//-------------------------------------------------------------------------------------------------
// *** f8c generated file: DO NOT EDIT! Created: 2017-11-19 17:56:21 ***
//-------------------------------------------------------------------------------------------------
/*

Fix8 is released under the GNU LESSER GENERAL PUBLIC LICENSE Version 3.

Fix8 Open Source FIX Engine.
Copyright (C) 2010-17 David L. Dight <fix@fix8.org>

Fix8 is free software: you can  redistribute it and / or modify  it under the  terms of the
GNU Lesser General  Public License as  published  by the Free  Software Foundation,  either
version 3 of the License, or (at your option) any later version.

Fix8 is distributed in the hope  that it will be useful, but WITHOUT ANY WARRANTY;  without
even the  implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

You should  have received a copy of the GNU Lesser General Public  License along with Fix8.
If not, see <http://www.gnu.org/licenses/>.

*******************************************************************************************
*                Special note for Fix8 compiler generated source code                     *
*                                                                                         *
* Binary works  that are the results of compilation of code that is generated by the Fix8 *
* compiler  can be released  without releasing your  source code as  long as your  binary *
* links dynamically  against an  unmodified version of the Fix8 library.  You are however *
* required to leave the copyright text in the generated code.                             *
*                                                                                         *
*******************************************************************************************

BECAUSE THE PROGRAM IS  LICENSED FREE OF  CHARGE, THERE IS NO  WARRANTY FOR THE PROGRAM, TO
THE EXTENT  PERMITTED  BY  APPLICABLE  LAW.  EXCEPT WHEN  OTHERWISE  STATED IN  WRITING THE
COPYRIGHT HOLDERS AND/OR OTHER PARTIES  PROVIDE THE PROGRAM "AS IS" WITHOUT WARRANTY OF ANY
KIND,  EITHER EXPRESSED   OR   IMPLIED,  INCLUDING,  BUT   NOT  LIMITED   TO,  THE  IMPLIED
WARRANTIES  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  THE ENTIRE RISK AS TO
THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU. SHOULD THE PROGRAM PROVE DEFECTIVE,
YOU ASSUME THE COST OF ALL NECESSARY SERVICING, REPAIR OR CORRECTION.

IN NO EVENT UNLESS REQUIRED  BY APPLICABLE LAW  OR AGREED TO IN  WRITING WILL ANY COPYRIGHT
HOLDER, OR  ANY OTHER PARTY  WHO MAY MODIFY  AND/OR REDISTRIBUTE  THE PROGRAM AS  PERMITTED
ABOVE,  BE  LIABLE  TO  YOU  FOR  DAMAGES,  INCLUDING  ANY  GENERAL, SPECIAL, INCIDENTAL OR
CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT
NOT LIMITED TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR
THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS), EVEN IF SUCH
HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.

*/

//-------------------------------------------------------------------------------------------------
#include <fix8/f8config.h>
#if defined FIX8_MAGIC_NUM && FIX8_MAGIC_NUM > 16793600L
#error Myfix_types.cpp version 1.4.0 is out of date. Please regenerate with f8c.
#endif
//-------------------------------------------------------------------------------------------------
// Myfix_types.cpp
//-------------------------------------------------------------------------------------------------
#include <iostream>
#include <fstream>
#include <iomanip>
#include <sstream>
#include <vector>
#include <map>
#include <list>
#include <set>
#include <iterator>
#include <algorithm>
#include <cerrno>
#include <string.h>
// f8 includes
#include <fix8/f8exception.hpp>
#include <fix8/hypersleep.hpp>
#include <fix8/mpmc.hpp>
#include <fix8/thread.hpp>
#include <fix8/f8types.hpp>
#include <fix8/f8utils.hpp>
#include <fix8/tickval.hpp>
#include <fix8/logger.hpp>
#include <fix8/traits.hpp>
#include <fix8/field.hpp>
#include <fix8/message.hpp>
#include "Myfix_types.hpp"
//-------------------------------------------------------------------------------------------------
namespace FIX8 {
namespace TEX {

namespace {

//-------------------------------------------------------------------------------------------------
const char AdvSide_realm[]  
   { 'B', 'S', 'T', 'X' };
const char *AdvSide_descriptions[]  
   { "BUY", "SELL", "TRADE", "CROSS" };
const f8String AdvTransType_realm[]  
   { "C", "N", "R" };
const char *AdvTransType_descriptions[]  
   { "CANCEL", "NEW", "REPLACE" };
const char CommType_realm[]  
   { '1', '2', '3', '4', '5', '6' };
const char *CommType_descriptions[]  
   { "PER_UNIT", "PERCENT", "ABSOLUTE", "PERCENTAGE_WAIVED_4", "PERCENTAGE_WAIVED_5", "POINTS_PER_BOND_OR_CONTRACT" };
const f8String ExecInst_realm[]  
   { "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z", "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t" };
const char *ExecInst_descriptions[]  
   { "STAY_ON_OFFER_SIDE", "NOT_HELD", "WORK", "GO_ALONG", "OVER_THE_DAY", "HELD", "PARTICIPANT_DONT_INITIATE", "STRICT_SCALE", "TRY_TO_SCALE", "STAY_ON_BID_SIDE", "NO_CROSS", "OK_TO_CROSS", "CALL_FIRST", "PERCENT_OF_VOLUME", "DO_NOT_INCREASE", "DO_NOT_REDUCE", "ALL_OR_NONE", "REINSTATE_ON_SYSTEM_FAILURE", "INSTITUTIONS_ONLY", "REINSTATE_ON_TRADING_HALT", "CANCEL_ON_TRADING_HALT", "LAST_PEG", "MID_PRICE_PEG", "NON_NEGOTIABLE", "OPENING_PEG", "MARKET_PEG", "CANCEL_ON_SYSTEM_FAILURE", "PRIMARY_PEG", "SUSPEND", "FIXED_PEG_TO_LOCAL_BEST_BID_OR_OFFER_AT_TIME_OF_ORDER", "CUSTOMER_DISPLAY_INSTRUCTION", "NETTING", "PEG_TO_VWAP", "TRADE_ALONG", "TRY_TO_STOP", "CANCEL_IF_NOT_BEST", "TRAILING_STOP_PEG", "STRICT_LIMIT", "IGNORE_PRICE_VALIDITY_CHECKS", "PEG_TO_LIMIT_PRICE", "WORK_TO_TARGET_STRATEGY", "INTERMARKET_SWEEP", "EXTERNAL_ROUTING_ALLOWED", "EXTERNAL_ROUTING_NOT_ALLOWED", "IMBALANCE_ONLY", "SINGLE_EXECUTION_REQUESTED_FOR_BLOCK_TRADE", "BEST_EXECUTION", "SUSPEND_ON_SYSTEM_FAILURE", "SUSPEND_ON_TRADING_HALT", "REINSTATE_ON_CONNECTION_LOSS", "CANCEL_ON_CONNECTION_LOSS", "SUSPEND_ON_CONNECTION_LOSS", "RELEASE_FROM_SUSPENSION", "EXECUTE_AS_DELTA_NEUTRAL_USING_VOLATILITY_PROVIDED", "EXECUTE_AS_DURATION_NEUTRAL", "EXECUTE_AS_FX_NEUTRAL" };
const char HandlInst_realm[]  
   { '1', '2', '3' };
const char *HandlInst_descriptions[]  
   { "AUTOMATED_EXECUTION_ORDER_PRIVATE_NO_BROKER_INTERVENTION", "AUTOMATED_EXECUTION_ORDER_PUBLIC_BROKER_INTERVENTION_OK", "MANUAL_ORDER_BEST_EXECUTION" };
const f8String SecurityIDSource_realm[]  
   { "1", "2", "3", "4", "5", "6", "7", "8", "9", "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M" };
const char *SecurityIDSource_descriptions[]  
   { "CUSIP", "SEDOL", "QUIK", "ISIN_NUMBER", "RIC_CODE", "ISO_CURRENCY_CODE", "ISO_COUNTRY_CODE", "EXCHANGE_SYMBOL", "CONSOLIDATED_TAPE_ASSOCIATION", "BLOOMBERG_SYMBOL", "WERTPAPIER", "DUTCH", "VALOREN", "SICOVAM", "BELGIAN", "COMMON", "CLEARING_HOUSE", "ISDA_FPML_PRODUCT_SPECIFICATION", "OPTION_PRICE_REPORTING_AUTHORITY", "ISDA_FPML_PRODUCT_URL", "LETTER_OF_CREDIT", "MARKETPLACE_ASSIGNED_IDENTIFIER" };
const char IOIQltyInd_realm[]  
   { 'H', 'L', 'M' };
const char *IOIQltyInd_descriptions[]  
   { "HIGH", "LOW", "MEDIUM" };
const f8String IOIQty_realm[]  
   { "0", "L", "M", "S", "U" };
const char *IOIQty_descriptions[]  
   { "1000000000", "LARGE", "MEDIUM", "SMALL", "UNDISCLOSED_QUANTITY" };
const char IOITransType_realm[]  
   { 'C', 'N', 'R' };
const char *IOITransType_descriptions[]  
   { "CANCEL", "NEW", "REPLACE" };
const char LastCapacity_realm[]  
   { '1', '2', '3', '4' };
const char *LastCapacity_descriptions[]  
   { "AGENT", "CROSS_AS_AGENT", "CROSS_AS_PRINCIPAL", "PRINCIPAL" };
const f8String MsgType_realm[]  
   { "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "A", "AA", "AB", "AC", "AD", "AE", "AF", "AG", "AH", "AI", "AJ", "AK", "AL", "AM", "AN", "AO", "AP", "AQ", "AR", "AS", "AT", "AU", "AV", "AW", "AX", "AY", "AZ", "B", "BA", "BB", "BC", "BD", "BE", "BF", "BG", "BH", "BI", "BJ", "BK", "BL", "BM", "BN", "BO", "BP", "BQ", "BR", "BS", "BT", "BU", "BV", "BW", "BX", "BY", "BZ", "C", "CA", "CB", "CC", "CD", "CE", "CF", "CG", "D", "E", "F", "G", "H", "J", "K", "L", "M", "N", "P", "Q", "R", "S", "T", "V", "W", "X", "Y", "Z", "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z" };
const char *MsgType_descriptions[]  
   { "HEARTBEAT", "TESTREQUEST", "RESENDREQUEST", "REJECT", "SEQUENCERESET", "LOGOUT", "IOI", "ADVERTISEMENT", "EXECUTIONREPORT", "ORDERCANCELREJECT", "LOGON", "DERIVATIVESECURITYLIST", "NEWORDERMULTILEG", "MULTILEGORDERCANCELREPLACE", "TRADECAPTUREREPORTREQUEST", "TRADECAPTUREREPORT", "ORDERMASSSTATUSREQUEST", "QUOTEREQUESTREJECT", "RFQREQUEST", "QUOTESTATUSREPORT", "QUOTERESPONSE", "CONFIRMATION", "POSITIONMAINTENANCEREQUEST", "POSITIONMAINTENANCEREPORT", "REQUESTFORPOSITIONS", "REQUESTFORPOSITIONSACK", "POSITIONREPORT", "TRADECAPTUREREPORTREQUESTACK", "TRADECAPTUREREPORTACK", "ALLOCATIONREPORT", "ALLOCATIONREPORTACK", "CONFIRMATION_ACK", "SETTLEMENTINSTRUCTIONREQUEST", "ASSIGNMENTREPORT", "COLLATERALREQUEST", "COLLATERALASSIGNMENT", "COLLATERALRESPONSE", "NEWS", "COLLATERALREPORT", "COLLATERALINQUIRY", "NETWORKCOUNTERPARTYSYSTEMSTATUSREQUEST", "NETWORKCOUNTERPARTYSYSTEMSTATUSRESPONSE", "USERREQUEST", "USERRESPONSE", "COLLATERALINQUIRYACK", "CONFIRMATIONREQUEST", "TRADINGSESSIONLISTREQUEST", "TRADINGSESSIONLIST", "SECURITYLISTUPDATEREPORT", "ADJUSTEDPOSITIONREPORT", "ALLOCATIONINSTRUCTIONALERT", "EXECUTIONACKNOWLEDGEMENT", "CONTRARYINTENTIONREPORT", "SECURITYDEFINITIONUPDATEREPORT", "SETTLEMENTOBLIGATIONREPORT", "DERIVATIVESECURITYLISTUPDATEREPORT", "TRADINGSESSIONLISTUPDATEREPORT", "MARKETDEFINITIONREQUEST", "MARKETDEFINITION", "MARKETDEFINITIONUPDATEREPORT", "APPLICATIONMESSAGEREQUEST", "APPLICATIONMESSAGEREQUESTACK", "APPLICATIONMESSAGEREPORT", "ORDERMASSACTIONREPORT", "EMAIL", "ORDERMASSACTIONREQUEST", "USERNOTIFICATION", "STREAMASSIGNMENTREQUEST", "STREAMASSIGNMENTREPORT", "STREAMASSIGNMENTREPORTACK", "PARTYDETAILSLISTREQUEST", "PARTYDETAILSLISTREPORT", "NEWORDERSINGLE", "NEWORDERLIST", "ORDERCANCELREQUEST", "ORDERCANCELREPLACEREQUEST", "ORDERSTATUSREQUEST", "ALLOCATIONINSTRUCTION", "LISTCANCELREQUEST", "LISTEXECUTE", "LISTSTATUSREQUEST", "LISTSTATUS", "ALLOCATIONINSTRUCTIONACK", "DONTKNOWTRADEDK", "QUOTEREQUEST", "QUOTE", "SETTLEMENTINSTRUCTIONS", "MARKETDATAREQUEST", "MARKETDATASNAPSHOTFULLREFRESH", "MARKETDATAINCREMENTALREFRESH", "MARKETDATAREQUESTREJECT", "QUOTECANCEL", "QUOTESTATUSREQUEST", "MASSQUOTEACKNOWLEDGEMENT", "SECURITYDEFINITIONREQUEST", "SECURITYDEFINITION", "SECURITYSTATUSREQUEST", "SECURITYSTATUS", "TRADINGSESSIONSTATUSREQUEST", "TRADINGSESSIONSTATUS", "MASSQUOTE", "BUSINESSMESSAGEREJECT", "BIDREQUEST", "BIDRESPONSE", "LISTSTRIKEPRICE", "XML_NON_FIX", "REGISTRATIONINSTRUCTIONS", "REGISTRATIONINSTRUCTIONSRESPONSE", "ORDERMASSCANCELREQUEST", "ORDERMASSCANCELREPORT", "NEWORDERCROSS", "CROSSORDERCANCELREPLACEREQUEST", "CROSSORDERCANCELREQUEST", "SECURITYTYPEREQUEST", "SECURITYTYPES", "SECURITYLISTREQUEST", "SECURITYLIST", "DERIVATIVESECURITYLISTREQUEST" };
const char OrdStatus_realm[]  
   { '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E' };
const char *OrdStatus_descriptions[]  
   { "NEW", "PARTIALLY_FILLED", "FILLED", "DONE_FOR_DAY", "CANCELED", "REPLACED", "PENDING_CANCEL", "STOPPED", "REJECTED", "SUSPENDED", "PENDING_NEW", "CALCULATED", "EXPIRED", "ACCEPTED_FOR_BIDDING", "PENDING_REPLACE" };
const char OrdType_realm[]  
   { '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'P', 'Q' };
const char *OrdType_descriptions[]  
   { "MARKET", "LIMIT", "STOP", "STOP_LIMIT", "MARKET_ON_CLOSE", "WITH_OR_WITHOUT", "LIMIT_OR_BETTER", "LIMIT_WITH_OR_WITHOUT", "ON_BASIS", "ON_CLOSE", "LIMIT_ON_CLOSE", "FOREX_MARKET", "PREVIOUSLY_QUOTED", "PREVIOUSLY_INDICATED", "FOREX_LIMIT", "FOREX_SWAP", "FOREX_PREVIOUSLY_QUOTED", "FUNARI", "MARKET_IF_TOUCHED", "MARKET_WITH_LEFT_OVER_AS_LIMIT", "PREVIOUS_FUND_VALUATION_POINT", "NEXT_FUND_VALUATION_POINT", "PEGGED", "COUNTER_ORDER_SELECTION" };
const char Side_realm[]  
   { '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F', 'G' };
const char *Side_descriptions[]  
   { "BUY", "SELL", "BUY_MINUS", "SELL_PLUS", "SELL_SHORT", "SELL_SHORT_EXEMPT", "UNDISCLOSED", "CROSS", "CROSS_SHORT", "CROSS_SHORT_EXEMPT", "AS_DEFINED", "OPPOSITE", "SUBSCRIBE", "REDEEM", "LEND", "BORROW" };
const char TimeInForce_realm[]  
   { '0', '1', '2', '3', '4', '5', '6', '7', '8', '9' };
const char *TimeInForce_descriptions[]  
   { "DAY", "GOOD_TILL_CANCEL", "AT_THE_OPENING", "IMMEDIATE_OR_CANCEL", "FILL_OR_KILL", "GOOD_TILL_CROSSING", "GOOD_TILL_DATE", "AT_THE_CLOSE", "GOOD_THROUGH_CROSSING", "AT_CROSSING" };
const char Urgency_realm[]  
   { '0', '1', '2' };
const char *Urgency_descriptions[]  
   { "NORMAL", "FLASH", "BACKGROUND" };
const f8String SettlType_realm[]  
   { "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "B", "C" };
const char *SettlType_descriptions[]  
   { "REGULAR", "CASH", "NEXT_DAY", "T_PLUS_2", "T_PLUS_3", "T_PLUS_4", "FUTURE", "WHEN_AND_IF_ISSUED", "SELLERS_OPTION", "T_PLUS_5", "BROKEN_DATE", "FX_SPOT_NEXT_SETTLEMENT" };
const f8String SymbolSfx_realm[]  
   { "CD", "WI" };
const char *SymbolSfx_descriptions[]  
   { "EUCP_WITH_LUMP_SUM_INTEREST_RATHER_THAN_DISCOUNT_PRICE", "WHEN_ISSUED_FOR_A_SECURITY_TO_BE_REISSUED_UNDER_AN_OLD_CUSIP_OR_ISIN" };
const char AllocTransType_realm[]  
   { '0', '1', '2', '3', '4', '5', '6' };
const char *AllocTransType_descriptions[]  
   { "NEW", "REPLACE", "CANCEL", "PRELIMINARY", "CALCULATED", "CALCULATED_WITHOUT_PRELIMINARY", "REVERSAL" };
const char PositionEffect_realm[]  
   { 'C', 'D', 'F', 'N', 'O', 'R' };
const char *PositionEffect_descriptions[]  
   { "CLOSE", "DEFAULT", "FIFO", "CLOSE_BUT_NOTIFY_ON_OPEN", "OPEN", "ROLLED" };
const char ProcessCode_realm[]  
   { '0', '1', '2', '3', '4', '5', '6' };
const char *ProcessCode_descriptions[]  
   { "REGULAR", "SOFT_DOLLAR", "STEP_IN", "STEP_OUT", "SOFT_DOLLAR_STEP_IN", "SOFT_DOLLAR_STEP_OUT", "PLAN_SPONSOR" };
const int AllocStatus_realm[]  
   { 0, 1, 2, 3, 4, 5, 6, 7 };
const char *AllocStatus_descriptions[]  
   { "ACCEPTED", "BLOCK_LEVEL_REJECT", "ACCOUNT_LEVEL_REJECT", "RECEIVED", "INCOMPLETE", "REJECTED_BY_INTERMEDIARY", "ALLOCATION_PENDING", "REVERSED" };
const int AllocRejCode_realm[]  
   { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 99 };
const char *AllocRejCode_descriptions[]  
   { "UNKNOWN_ACCOUNT", "INCORRECT_QUANTITY", "INCORRECT_AVERAGEG_PRICE", "UNKNOWN_EXECUTING_BROKER_MNEMONIC", "COMMISSION_DIFFERENCE", "UNKNOWN_ORDERID", "UNKNOWN_LISTID", "OTHER_7", "INCORRECT_ALLOCATED_QUANTITY", "CALCULATION_DIFFERENCE", "UNKNOWN_OR_STALE_EXECID", "MISMATCHED_DATA", "UNKNOWN_CLORDID", "WAREHOUSE_REQUEST_REJECTED", "OTHER_99" };
const char EmailType_realm[]  
   { '0', '1', '2' };
const char *EmailType_descriptions[]  
   { "NEW", "REPLY", "ADMIN_REPLY" };
const int EncryptMethod_realm[]  
   { 0, 1, 2, 3, 4, 5, 6 };
const char *EncryptMethod_descriptions[]  
   { "NONE_OTHER", "PKCS", "DES", "PKCS_DES", "PGP_DES", "PGP_DES_MD5", "PEM_DES_MD5" };
const int CxlRejReason_realm[]  
   { 0, 1, 2, 3, 4, 5, 6, 7, 8, 18, 99 };
const char *CxlRejReason_descriptions[]  
   { "TOO_LATE_TO_CANCEL", "UNKNOWN_ORDER", "BROKER", "ORDER_ALREADY_IN_PENDING_CANCEL_OR_PENDING_REPLACE_STATUS", "UNABLE_TO_PROCESS_ORDER_MASS_CANCEL_REQUEST", "ORIGORDMODTIME", "DUPLICATE_CLORDID", "PRICE_EXCEEDS_CURRENT_PRICE", "PRICE_EXCEEDS_CURRENT_PRICE_BAND", "INVALID_PRICE_INCREMENT", "OTHER" };
const int OrdRejReason_realm[]  
   { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 99 };
const char *OrdRejReason_descriptions[]  
   { "BROKER", "UNKNOWN_SYMBOL", "EXCHANGE_CLOSED", "ORDER_EXCEEDS_LIMIT", "TOO_LATE_TO_ENTER", "UNKNOWN_ORDER", "DUPLICATE_ORDER", "DUPLICATE_OF_A_VERBALLY_COMMUNICATED_ORDER", "STALE_ORDER", "TRADE_ALONG_REQUIRED", "INVALID_INVESTOR_ID", "UNSUPPORTED_ORDER_CHARACTERISTIC", "SURVEILLENCE_OPTION", "INCORRECT_QUANTITY", "INCORRECT_ALLOCATED_QUANTITY", "UNKNOWN_ACCOUNT", "PRICE_EXCEEDS_CURRENT_PRICE_BAND", "INVALID_PRICE_INCREMENT", "OTHER" };
const char IOIQualifier_realm[]  
   { 'A', 'B', 'C', 'D', 'I', 'L', 'M', 'O', 'P', 'Q', 'R', 'S', 'T', 'V', 'W', 'X', 'Y', 'Z' };
const char *IOIQualifier_descriptions[]  
   { "ALL_OR_NONE", "MARKET_ON_CLOSE", "AT_THE_CLOSE", "VWAP", "IN_TOUCH_WITH", "LIMIT", "MORE_BEHIND", "AT_THE_OPEN", "TAKING_A_POSITION", "AT_THE_MARKET", "READY_TO_TRADE", "PORTFOLIO_SHOWN", "THROUGH_THE_DAY", "VERSUS", "INDICATION", "CROSSING_OPPORTUNITY", "AT_THE_MIDPOINT", "PRE_OPEN" };
const char ReportToExch_realm[]  
   { 'N', 'Y' };
const char *ReportToExch_descriptions[]  
   { "NO", "YES" };
const char LocateReqd_realm[]  
   { 'N', 'Y' };
const char *LocateReqd_descriptions[]  
   { "NO", "YES" };
const char ForexReq_realm[]  
   { 'N', 'Y' };
const char *ForexReq_descriptions[]  
   { "NO", "YES" };
const char DKReason_realm[]  
   { 'A', 'B', 'C', 'D', 'E', 'F', 'Z' };
const char *DKReason_descriptions[]  
   { "UNKNOWN_SYMBOL", "WRONG_SIDE", "QUANTITY_EXCEEDS_ORDER", "NO_MATCHING_ORDER", "PRICE_EXCEEDS_LIMIT", "CALCULATION_DIFFERENCE", "OTHER" };
const char IOINaturalFlag_realm[]  
   { 'N', 'Y' };
const char *IOINaturalFlag_descriptions[]  
   { "NO", "YES" };
const f8String MiscFeeType_realm[]  
   { "1", "10", "11", "12", "13", "14", "2", "3", "4", "5", "6", "7", "8", "9" };
const char *MiscFeeType_descriptions[]  
   { "REGULATORY", "PER_TRANSACTION", "CONVERSION", "AGENT", "TRANSFER_FEE", "SECURITY_LENDING", "TAX", "LOCAL_COMMISSION", "EXCHANGE_FEES", "STAMP", "LEVY", "OTHER", "MARKUP", "CONSUMPTION_TAX" };
const char ExecType_realm[]  
   { '0', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L' };
const char *ExecType_descriptions[]  
   { "NEW", "DONE_FOR_DAY", "CANCELED", "REPLACED", "PENDING_CANCEL", "STOPPED", "REJECTED", "SUSPENDED", "PENDING_NEW", "CALCULATED", "EXPIRED", "RESTATED", "PENDING_REPLACE", "TRADE", "TRADE_CORRECT", "TRADE_CANCEL", "ORDER_STATUS", "TRADE_IN_A_CLEARING_HOLD", "TRADE_HAS_BEEN_RELEASED_TO_CLEARING", "TRIGGERED_OR_ACTIVATED_BY_SYSTEM" };
const char SettlCurrFxRateCalc_realm[]  
   { 'D', 'M' };
const char *SettlCurrFxRateCalc_descriptions[]  
   { "DIVIDE", "MULTIPLY" };
const char SettlInstMode_realm[]  
   { '0', '1', '2', '3', '4', '5' };
const char *SettlInstMode_descriptions[]  
   { "DEFAULT", "STANDING_INSTRUCTIONS_PROVIDED", "SPECIFIC_ALLOCATION_ACCOUNT_OVERRIDING", "SPECIFIC_ALLOCATION_ACCOUNT_STANDING", "SPECIFIC_ORDER_FOR_A_SINGLE_ACCOUNT", "REQUEST_REJECT" };
const char SettlInstTransType_realm[]  
   { 'C', 'N', 'R', 'T' };
const char *SettlInstTransType_descriptions[]  
   { "CANCEL", "NEW", "REPLACE", "RESTATE" };
const char SettlInstSource_realm[]  
   { '1', '2', '3' };
const char *SettlInstSource_descriptions[]  
   { "BROKERS_INSTRUCTIONS", "INSTITUTIONS_INSTRUCTIONS", "INVESTOR" };
const f8String SecurityType_realm[]  
   { "?", "ABS", "AMENDED", "AN", "BA", "BDN", "BN", "BOX", "BRADY", "BRIDGE", "BUYSELL", "CAMM", "CAN", "CASH", "CB", "CD", "CDS", "CL", "CMB", "CMBS", "CMO", "COFO", "COFP", "CORP", "CP", "CPP", "CS", "CTB", "DEFLTED", "DINP", "DN", "DUAL", "EUCD", "EUCORP", "EUCP", "EUFRN", "EUSOV", "EUSUPRA", "FAC", "FADN", "FOR", "FORWARD", "FRN", "FUT", "FXFWD", "FXNDF", "FXSPOT", "FXSWAP", "GO", "IET", "IRS", "LOFC", "LQN", "MATURED", "MBS", "MF", "MIO", "MLEG", "MPO", "MPP", "MPT", "MT", "MTN", "NONE", "ONITE", "OOC", "OOF", "OOP", "OPT", "PEF", "PFAND", "PN", "PROV", "PS", "PZFJ", "RAN", "REPLACD", "REPO", "RETIRED", "REV", "RVLV", "RVLVTRM", "SECLOAN", "SECPLEDGE", "SLQN", "SPCLA", "SPCLO", "SPCLT", "STN", "STRUCT", "SUPRA", "SWING", "TAN", "TAXA", "TB", "TBA", "TBILL", "TBOND", "TCAL", "TD", "TECP", "TERM", "TINT", "TIPS", "TLQN", "TMCP", "TNOTE", "TPRN", "TRAN", "UST", "USTB", "VRDN", "WAR", "WITHDRN", "XCN", "XLINKD", "YANK", "YCD" };
const char *SecurityType_descriptions[]  
   { "WILDCARD_ENTRY_FOR_USE_ON_SECURITY_DEFINITION_REQUEST", "ASSET_BACKED_SECURITIES", "AMENDED_RESTATED", "OTHER_ANTICIPATION_NOTES", "BANKERS_ACCEPTANCE", "BANK_DEPOSITORY_NOTE", "BANK_NOTES", "BILL_OF_EXCHANGES", "BRADY_BOND", "BRIDGE_LOAN", "BUY_SELLBACK", "CANADIAN_MONEY_MARKETS", "CANADIAN_TREASURY_NOTES", "CASH", "CONVERTIBLE_BOND", "CERTIFICATE_OF_DEPOSIT", "CREDIT_DEFAULT_SWAP", "CALL_LOANS", "CANADIAN_MORTGAGE_BONDS", "CORP_MORTGAGE_BACKED_SECURITIES", "COLLATERALIZED_MORTGAGE_OBLIGATION", "CERTIFICATE_OF_OBLIGATION", "CERTIFICATE_OF_PARTICIPATION", "CORPORATE_BOND", "COMMERCIAL_PAPER", "CORPORATE_PRIVATE_PLACEMENT", "COMMON_STOCK", "CANADIAN_TREASURY_BILLS", "DEFAULTED", "DEBTOR_IN_POSSESSION", "DEPOSIT_NOTES", "DUAL_CURRENCY", "EURO_CERTIFICATE_OF_DEPOSIT", "EURO_CORPORATE_BOND", "EURO_COMMERCIAL_PAPER", "EURO_CORPORATE_FLOATING_RATE_NOTES", "EURO_SOVEREIGNS", "EURO_SUPRANATIONAL_COUPONS", "FEDERAL_AGENCY_COUPON", "FEDERAL_AGENCY_DISCOUNT_NOTE", "FOREIGN_EXCHANGE_CONTRACT", "FORWARD", "US_CORPORATE_FLOATING_RATE_NOTES", "FUTURE", "FX_FORWARD", "NON_DELIVERABLE_FORWARD", "FX_SPOT", "FX_SWAP", "GENERAL_OBLIGATION_BONDS", "IOETTE_MORTGAGE", "INTEREST_RATE_SWAP", "LETTER_OF_CREDIT", "LIQUIDITY_NOTE", "MATURED", "MORTGAGE_BACKED_SECURITIES", "MUTUAL_FUND", "MORTGAGE_INTEREST_ONLY", "MULTILEG_INSTRUMENT", "MORTGAGE_PRINCIPAL_ONLY", "MORTGAGE_PRIVATE_PLACEMENT", "MISCELLANEOUS_PASS_THROUGH", "MANDATORY_TENDER", "MEDIUM_TERM_NOTES", "NO_SECURITY_TYPE", "OVERNIGHT", "OPTIONS_ON_COMBO", "OPTIONS_ON_FUTURES", "OPTIONS_ON_PHYSICAL", "OPTION", "PRIVATE_EXPORT_FUNDING", "PFANDBRIEFE", "PROMISSORY_NOTE", "CANADIAN_PROVINCIAL_BONDS", "PREFERRED_STOCK", "PLAZOS_FIJOS", "REVENUE_ANTICIPATION_NOTE", "REPLACED", "REPURCHASE", "RETIRED", "REVENUE_BONDS", "REVOLVER_LOAN", "REVOLVER_TERM_LOAN", "SECURITIES_LOAN", "SECURITIES_PLEDGE", "SECURED_LIQUIDITY_NOTE", "SPECIAL_ASSESSMENT", "SPECIAL_OBLIGATION", "SPECIAL_TAX", "SHORT_TERM_LOAN_NOTE", "STRUCTURED_NOTES", "USD_SUPRANATIONAL_COUPONS", "SWING_LINE_FACILITY", "TAX_ANTICIPATION_NOTE", "TAX_ALLOCATION", "TREASURY_BILL", "TO_BE_ANNOUNCED", "US_TREASURY_BILL_TBILL", "US_TREASURY_BOND", "PRINCIPAL_STRIP_OF_A_CALLABLE_BOND_OR_NOTE", "TIME_DEPOSIT", "TAX_EXEMPT_COMMERCIAL_PAPER", "TERM_LOAN", "INTEREST_STRIP_FROM_ANY_BOND_OR_NOTE", "TREASURY_INFLATION_PROTECTED_SECURITIES", "TERM_LIQUIDITY_NOTE", "TAXABLE_MUNICIPAL_CP", "US_TREASURY_NOTE_TNOTE", "PRINCIPAL_STRIP_FROM_A_NON_CALLABLE_BOND_OR_NOTE", "TAX_REVENUE_ANTICIPATION_NOTE", "US_TREASURY_NOTE_UST", "US_TREASURY_BILL_USTB", "VARIABLE_RATE_DEMAND_NOTE", "WARRANT", "WITHDRAWN", "EXTENDED_COMM_NOTE", "INDEXED_LINKED", "YANKEE_CORPORATE_BOND", "YANKEE_CERTIFICATE_OF_DEPOSIT" };
const int StandInstDbType_realm[]  
   { 0, 1, 2, 3, 4 };
const char *StandInstDbType_descriptions[]  
   { "OTHER", "DTC_SID", "THOMSON_ALERT", "A_GLOBAL_CUSTODIAN", "ACCOUNTNET" };
const int SettlDeliveryType_realm[]  
   { 0, 1, 2, 3 };
const char *SettlDeliveryType_descriptions[]  
   { "VERSUS_PAYMENT_DELIVER", "FREE_DELIVER", "TRI_PARTY", "HOLD_IN_CUSTODY" };
const int AllocLinkType_realm[]  
   { 0, 1 };
const char *AllocLinkType_descriptions[]  
   { "FX_NETTING", "FX_SWAP" };
const int PutOrCall_realm[]  
   { 0, 1 };
const char *PutOrCall_descriptions[]  
   { "PUT", "CALL" };
const int CoveredOrUncovered_realm[]  
   { 0, 1 };
const char *CoveredOrUncovered_descriptions[]  
   { "COVERED", "UNCOVERED" };
const char NotifyBrokerOfCredit_realm[]  
   { 'N', 'Y' };
const char *NotifyBrokerOfCredit_descriptions[]  
   { "NO", "YES" };
const int AllocHandlInst_realm[]  
   { 1, 2, 3 };
const char *AllocHandlInst_descriptions[]  
   { "MATCH", "FORWARD", "FORWARD_AND_MATCH" };
const int RoutingType_realm[]  
   { 1, 2, 3, 4 };
const char *RoutingType_descriptions[]  
   { "TARGET_FIRM", "TARGET_LIST", "BLOCK_FIRM", "BLOCK_LIST" };
const f8String BenchmarkCurveName_realm[]  
   { "EONIA", "EUREPO", "Euribor", "FutureSWAP", "LIBID", "LIBOR", "MuniAAA", "OTHER", "Pfandbriefe", "SONIA", "SWAP", "Treasury" };
const char *BenchmarkCurveName_descriptions[]  
   { "EONIA", "EUREPO", "EURIBOR", "FUTURESWAP", "LIBID", "LIBOR", "MUNIAAA", "OTHER", "PFANDBRIEFE", "SONIA", "SWAP", "TREASURY" };
const f8String StipulationType_realm[]  
   { "ABS", "AMT", "AUTOREINV", "AVAILQTY", "AVFICO", "AVSIZE", "BANKQUAL", "BGNCON", "BROKERCREDIT", "COUPON", "CPP", "CPR", "CPY", "CURRENCY", "CUSTOMDATE", "DISCOUNT", "GEOG", "HAIRCUT", "HEP", "INSURED", "INTERNALPX", "INTERNALQTY", "ISSUE", "ISSUER", "ISSUESIZE", "LEAVEQTY", "LOOKBACK", "LOT", "LOTVAR", "MAT", "MATURITY", "MAXBAL", "MAXORDQTY", "MAXSUBS", "MHP", "MINDNOM", "MININCR", "MINQTY", "MPR", "ORDRINCR", "PAYFREQ", "PIECES", "PMAX", "POOL", "PPC", "PPL", "PPM", "PPT", "PRICE", "PRICEFREQ", "PRIMARY", "PROD", "PROTECT", "PSA", "PURPOSE", "PXSOURCE", "RATING", "REDEMPTION", "REFINT", "REFPRIN", "REFTRADE", "RESTRICTED", "ROLLTYPE", "SALESCREDITOVR", "SECTOR", "SECTYPE", "SMM", "STRUCT", "SUBSFREQ", "SUBSLEFT", "TEXT", "TRADERCREDIT", "TRDVAR", "WAC", "WAL", "WALA", "WAM", "WHOLE", "YIELD", "YTM" };
const char *StipulationType_descriptions[]  
   { "ABSOLUTE_PREPAYMENT_SPEED", "ALTERNATIVE_MINIMUM_TAX", "AUTO_REINVESTMENT_AT_RATE_OR_BETTER", "AVAILABLE_OFFER_QUANTITY_TO_BE_SHOWN_TO_THE_STREET", "AVERAGE_FICO_SCORE", "AVERAGE_LOAN_SIZE", "BANK_QUALIFIED", "BARGAIN_CONDITIONS", "BROKERS_SALES_CREDIT", "COUPON_RANGE", "CONSTANT_PREPAYMENT_PENALTY", "CONSTANT_PREPAYMENT_RATE", "CONSTANT_PREPAYMENT_YIELD", "ISO_CURRENCY_CODE", "CUSTOM_START_END_DATE", "DISCOUNT_RATE", "GEOGRAPHICS_AND_RANGE", "VALUATION_DISCOUNT", "FINAL_CPR_OF_HOME_EQUITY_PREPAYMENT_CURVE", "INSURED", "OFFER_PRICE_TO_BE_SHOWN_TO_INTERNAL_BROKERS", "OFFER_QUANTITY_TO_BE_SHOWN_TO_INTERNAL_BROKERS", "YEAR_OR_YEAR_MONTH_OF_ISSUE", "ISSUERS_TICKER", "ISSUE_SIZE_RANGE", "THE_MINIMUM_RESIDUAL_OFFER_QUANTITY", "LOOKBACK_DAYS", "EXPLICIT_LOT_IDENTIFIER", "LOT_VARIANCE", "MATURITY_YEAR_AND_MONTH", "MATURITY_RANGE", "MAXIMUM_LOAN_BALANCE", "MAXIMUM_ORDER_SIZE", "MAXIMUM_SUBSTITUTIONS", "PERCENT_OF_MANUFACTURED_HOUSING_PREPAYMENT_CURVE", "MINIMUM_DENOMINATION", "MINIMUM_INCREMENT", "MINIMUM_QUANTITY", "MONTHLY_PREPAYMENT_RATE", "ORDER_QUANTITY_INCREMENT", "PAYMENT_FREQUENCY_CALENDAR", "NUMBER_OF_PIECES", "POOLS_MAXIMUM", "POOL_IDENTIFIER", "PERCENT_OF_PROSPECTUS_PREPAYMENT_CURVE", "POOLS_PER_LOT", "POOLS_PER_MILLION", "POOLS_PER_TRADE", "PRICE_RANGE", "PRICING_FREQUENCY", "PRIMARY_OR_SECONDARY_MARKET_INDICATOR", "PRODUCTION_YEAR", "CALL_PROTECTION", "PERCENT_OF_BMA_PREPAYMENT_CURVE", "PURPOSE", "BENCHMARK_PRICE_SOURCE", "RATING_SOURCE_AND_RANGE", "TYPE_OF_REDEMPTION", "INTEREST_OF_ROLLING_OR_CLOSING_TRADE", "PRINCIPAL_OF_ROLLING_OR_CLOSING_TRADE", "REFERENCE_TO_ROLLING_OR_CLOSING_TRADE", "RESTRICTED", "TYPE_OF_ROLL_TRADE", "BROKER_SALES_CREDIT_OVERRIDE", "MARKET_SECTOR", "SECURITY_TYPE_INCLUDED_OR_EXCLUDED", "SINGLE_MONTHLY_MORTALITY", "STRUCTURE", "SUBSTITUTIONS_FREQUENCY", "SUBSTITUTIONS_LEFT", "FREEFORM_TEXT", "TRADERS_CREDIT", "TRADE_VARIANCE", "WEIGHTED_AVERAGE_COUPON", "WEIGHTED_AVERAGE_LIFE_COUPON", "WEIGHTED_AVERAGE_LOAN_AGE", "WEIGHTED_AVERAGE_MATURITY", "WHOLE_POOL", "YIELD_RANGE", "YIELD_TO_MATURITY" };
const f8String YieldType_realm[]  
   { "AFTERTAX", "ANNUAL", "ATISSUE", "AVGMATURITY", "BOOK", "CALL", "CHANGE", "CLOSE", "COMPOUND", "CURRENT", "GOVTEQUIV", "GROSS", "INFLATION", "INVERSEFLOATER", "LASTCLOSE", "LASTMONTH", "LASTQUARTER", "LASTYEAR", "LONGAVGLIFE", "MARK", "MATURITY", "NEXTREFUND", "OPENAVG", "PREVCLOSE", "PROCEEDS", "PUT", "SEMIANNUAL", "SHORTAVGLIFE", "SIMPLE", "TAXEQUIV", "TENDER", "TRUE", "VALUE1_32", "WORST" };
const char *YieldType_descriptions[]  
   { "AFTER_TAX_YIELD", "ANNUAL_YIELD", "YIELD_AT_ISSUE", "YIELD_TO_AVG_MATURITY", "BOOK_YIELD", "YIELD_TO_NEXT_CALL", "YIELD_CHANGE_SINCE_CLOSE", "CLOSING_YIELD", "COMPOUND_YIELD", "CURRENT_YIELD", "GVNT_EQUIVALENT_YIELD", "TRUE_GROSS_YIELD", "YIELD_WITH_INFLATION_ASSUMPTION", "INVERSE_FLOATER_BOND_YIELD", "MOST_RECENT_CLOSING_YIELD", "CLOSING_YIELD_MOST_RECENT_MONTH", "CLOSING_YIELD_MOST_RECENT_QUARTER", "CLOSING_YIELD_MOST_RECENT_YEAR", "YIELD_TO_LONGEST_AVERAGE_LIFE", "MARK_TO_MARKET_YIELD", "YIELD_TO_MATURITY", "YIELD_TO_NEXT_REFUND", "OPEN_AVERAGE_YIELD", "PREVIOUS_CLOSE_YIELD", "PROCEEDS_YIELD", "YIELD_TO_NEXT_PUT", "SEMI_ANNUAL_YIELD", "YIELD_TO_SHORTEST_AVERAGE_LIFE", "SIMPLE_YIELD", "TAX_EQUIVALENT_YIELD", "YIELD_TO_TENDER_DATE", "TRUE_YIELD", "YIELD_VALUE_OF_1_32", "YIELD_TO_WORST" };
const char TradedFlatSwitch_realm[]  
   { 'N', 'Y' };
const char *TradedFlatSwitch_descriptions[]  
   { "NO", "YES" };
const char SubscriptionRequestType_realm[]  
   { '0', '1', '2' };
const char *SubscriptionRequestType_descriptions[]  
   { "SNAPSHOT", "SNAPSHOT_PLUS_UPDATES", "DISABLE_PREVIOUS_SNAPSHOT_PLUS_UPDATE_REQUEST" };
const int MDUpdateType_realm[]  
   { 0, 1 };
const char *MDUpdateType_descriptions[]  
   { "FULL_REFRESH", "INCREMENTAL_REFRESH" };
const char AggregatedBook_realm[]  
   { 'N', 'Y' };
const char *AggregatedBook_descriptions[]  
   { "NO", "YES" };
const char MDEntryType_realm[]  
   { '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', 'a' };
const char *MDEntryType_descriptions[]  
   { "BID", "OFFER", "TRADE", "INDEX_VALUE", "OPENING_PRICE", "CLOSING_PRICE", "SETTLEMENT_PRICE", "TRADING_SESSION_HIGH_PRICE", "TRADING_SESSION_LOW_PRICE", "TRADING_SESSION_VWAP_PRICE", "IMBALANCE", "TRADE_VOLUME", "OPEN_INTEREST", "COMPOSITE_UNDERLYING_PRICE", "SIMULATED_SELL_PRICE", "SIMULATED_BUY_PRICE", "MARGIN_RATE", "MID_PRICE", "EMPTY_BOOK", "SETTLE_HIGH_PRICE", "SETTLE_LOW_PRICE", "PRIOR_SETTLE_PRICE", "SESSION_HIGH_BID", "SESSION_LOW_OFFER", "EARLY_PRICES", "AUCTION_CLEARING_PRICE", "DAILY_VALUE_ADJUSTMENT_FOR_LONG_POSITIONS", "SWAP_VALUE_FACTOR", "CUMULATIVE_VALUE_ADJUSTMENT_FOR_LONG_POSITIONS", "DAILY_VALUE_ADJUSTMENT_FOR_SHORT_POSITIONS", "CUMULATIVE_VALUE_ADJUSTMENT_FOR_SHORT_POSITIONS", "FIXING_PRICE", "CASH_RATE", "RECOVERY_RATE", "RECOVERY_RATE_FOR_LONG", "RECOVERY_RATE_FOR_SHORT" };
const char TickDirection_realm[]  
   { '0', '1', '2', '3' };
const char *TickDirection_descriptions[]  
   { "PLUS_TICK", "ZERO_PLUS_TICK", "MINUS_TICK", "ZERO_MINUS_TICK" };
const f8String QuoteCondition_realm[]  
   { "0", "1", "2", "3", "4", "5", "6", "7", "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z", "a", "b", "c", "d", "e", "f ", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z" };
const char *QuoteCondition_descriptions[]  
   { "RESERVED_SAM", "NO_ACTIVE_SAM", "RESTRICTED", "REST_OF_BOOK_VWAP", "BETTER_PRICES_IN_CONDITIONAL_ORDERS", "MEDIAN_PRICE", "FULL_CURVE", "FLAT_CURVE", "OPEN_ACTIVE", "CLOSED_INACTIVE", "EXCHANGE_BEST", "CONSOLIDATED_BEST", "LOCKED", "CROSSED", "DEPTH", "FAST_TRADING", "NON_FIRM", "OUTRIGHT_PRICE", "IMPLIED_PRICE", "MANUAL_SLOW_QUOTE", "DEPTH_ON_OFFER", "DEPTH_ON_BID", "CLOSING", "NEWS_DISSEMINATION", "TRADING_RANGE", "ORDER_INFLUX", "DUE_TO_RELATED", "NEWS_PENDING", "ADDITIONAL_INFO", "ADDITIONAL_INFO_DUE_TO_RELATED", "RESUME", "VIEW_OF_COMMON", "VOLUME_ALERT", "ORDER_IMBALANCE", "EQUIPMENT_CHANGEOVER", "NO_OPEN", "REGULAR_ETH", "AUTOMATIC_EXECUTION", "AUTOMATIC_EXECUTION_ETH", "FAST_MARKET_ETH", "INACTIVE_ETH", "ROTATION", "ROTATION_ETH", "HALT", "HALT_ETH", "DUE_TO_NEWS_DISSEMINATION", "DUE_TO_NEWS_PENDING", "TRADING_RESUME", "OUT_OF_SEQUENCE", "BID_SPECIALIST", "OFFER_SPECIALIST", "BID_OFFER_SPECIALIST", "END_OF_DAY_SAM", "FORBIDDEN_SAM", "FROZEN_SAM", "PREOPENING_SAM", "OPENING_SAM", "OPEN_SAM", "SURVEILLANCE_SAM", "SUSPENDED_SAM" };
const f8String TradeCondition_realm[]  
   { "0", "1", "2", "3", "4", "A", "AA", "AB", "AC", "AD", "AE", "AF", "AG", "AH", "AI", "AJ", "AK", "AL", "AM", "AN", "AO", "AP", "AQ", "AR", "AS", "AT", "AV", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z", "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z" };
const char *TradeCondition_descriptions[]  
   { "CANCEL", "IMPLIED_TRADE", "MARKETPLACE_ENTERED_TRADE", "MULT_ASSET_CLASS_MULTILEG_TRADE", "MULTILEG_TO_MULTILEG_TRADE", "CASH", "SPREAD", "SPREAD_ETH", "STRADDLE", "STRADDLE_ETH", "STOPPED", "STOPPED_ETH", "REGULAR_ETH", "COMBO", "COMBO_ETH", "OFFICIAL_CLOSING_PRICE", "PRIOR_REFERENCE_PRICE", "STOPPED_SOLD_LAST", "STOPPED_OUT_OF_SEQUENCE", "OFFICAL_CLOSING_PRICE", "CROSSED_AO", "FAST_MARKET", "AUTOMATIC_EXECUTION", "FORM_T", "BASKET_INDEX", "BURST_BASKET", "OUTSIDE_SPREAD", "AVERAGE_PRICE_TRADE", "CASH_TRADE", "NEXT_DAY", "OPENING_REOPENING_TRADE_DETAIL", "INTRADAY_TRADE_DETAIL", "RULE_127_TRADE", "RULE_155_TRADE", "SOLD_LAST", "NEXT_DAY_TRADE", "OPENED", "SELLER", "SOLD", "STOPPED_STOCK", "IMBALANCE_MORE_BUYERS", "IMBALANCE_MORE_SELLERS", "OPENING_PRICE", "BARGAIN_CONDITION", "CONVERTED_PRICE_INDICATOR", "EXCHANGE_LAST", "FINAL_PRICE_OF_SESSION", "EX_PIT", "CROSSED_X", "TRADES_RESULTING_FROM_MANUAL_SLOW_QUOTE", "TRADES_RESULTING_FROM_INTERMARKET_SWEEP", "VOLUME_ONLY", "DIRECT_PLUS", "ACQUISITION", "BUNCHED", "DISTRIBUTION", "BUNCHED_SALE", "SPLIT_TRADE", "CANCEL_STOPPED", "CANCEL_ETH", "CANCEL_STOPPED_ETH", "OUT_OF_SEQUENCE_ETH", "CANCEL_LAST_ETH", "SOLD_LAST_SALE_ETH", "CANCEL_LAST", "SOLD_LAST_SALE", "CANCEL_OPEN", "CANCEL_OPEN_ETH", "OPENED_SALE_ETH", "CANCEL_ONLY", "CANCEL_ONLY_ETH", "LATE_OPEN_ETH", "AUTO_EXECUTION_ETH", "REOPEN", "REOPEN_ETH", "ADJUSTED", "ADJUSTED_ETH" };
const char MDUpdateAction_realm[]  
   { '0', '1', '2', '3', '4', '5' };
const char *MDUpdateAction_descriptions[]  
   { "NEW", "CHANGE", "DELETE", "DELETE_THRU", "DELETE_FROM", "OVERLAY" };
const char MDReqRejReason_realm[]  
   { '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D' };
const char *MDReqRejReason_descriptions[]  
   { "UNKNOWN_SYMBOL", "DUPLICATE_MDREQID", "INSUFFICIENT_BANDWIDTH", "INSUFFICIENT_PERMISSIONS", "UNSUPPORTED_SUBSCRIPTIONREQUESTTYPE", "UNSUPPORTED_MARKETDEPTH", "UNSUPPORTED_MDUPDATETYPE", "UNSUPPORTED_AGGREGATEDBOOK", "UNSUPPORTED_MDENTRYTYPE", "UNSUPPORTED_TRADINGSESSIONID", "UNSUPPORTED_SCOPE", "UNSUPPORTED_OPENCLOSESETTLEFLAG", "UNSUPPORTED_MDIMPLICITDELETE", "INSUFFICIENT_CREDIT" };
const char DeleteReason_realm[]  
   { '0', '1' };
const char *DeleteReason_descriptions[]  
   { "CANCELLATION", "ERROR" };
const f8String OpenCloseSettlFlag_realm[]  
   { "0", "1", "2", "3", "4", "5" };
const char *OpenCloseSettlFlag_descriptions[]  
   { "DAILY_OPEN", "SESSION_OPEN", "DELIVERY_SETTLEMENT_ENTRY", "EXPECTED_ENTRY", "ENTRY_FROM_PREVIOUS_BUSINESS_DAY", "THEORETICAL_PRICE_VALUE" };
const f8String FinancialStatus_realm[]  
   { "1", "2", "3" };
const char *FinancialStatus_descriptions[]  
   { "BANKRUPT", "PENDING_DELISTING", "RESTRICTED" };
const f8String CorporateAction_realm[]  
   { "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W" };
const char *CorporateAction_descriptions[]  
   { "EX_DIVIDEND", "EX_DISTRIBUTION", "EX_RIGHTS", "NEW", "EX_INTEREST", "CASH_DIVIDEND", "STOCK_DIVIDEND", "NON_INTEGER_STOCK_SPLIT", "REVERSE_STOCK_SPLIT", "STANDARD_INTEGER_STOCK_SPLIT", "POSITION_CONSOLIDATION", "LIQUIDATION_REORGANIZATION", "MERGER_REORGANIZATION", "RIGHTS_OFFERING", "SHAREHOLDER_MEETING", "SPINOFF", "TENDER_OFFER", "WARRANT", "SPECIAL_ACTION", "SYMBOL_CONVERSION", "CUSIP", "LEAP_ROLLOVER", "SUCCESSION_EVENT" };
const int QuoteStatus_realm[]  
   { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20 };
const char *QuoteStatus_descriptions[]  
   { "ACCEPTED", "CANCEL_FOR_SYMBOL", "CANCELED_FOR_SECURITY_TYPE", "CANCELED_FOR_UNDERLYING", "CANCELED_ALL", "REJECTED", "REMOVED_FROM_MARKET", "EXPIRED", "QUERY", "QUOTE_NOT_FOUND", "PENDING", "PASS", "LOCKED_MARKET_WARNING", "CROSS_MARKET_WARNING", "CANCELED_DUE_TO_LOCK_MARKET", "CANCELED_DUE_TO_CROSS_MARKET", "ACTIVE", "CANCELED", "UNSOLICITED_QUOTE_REPLENISHMENT", "PENDING_END_TRADE", "TOO_LATE_TO_END" };
const int QuoteCancelType_realm[]  
   { 1, 2, 3, 4, 5, 6, 7, 8 };
const char *QuoteCancelType_descriptions[]  
   { "CANCEL_FOR_ONE_OR_MORE_SECURITIES", "CANCEL_FOR_SECURITY_TYPE", "CANCEL_FOR_UNDERLYING_SECURITY", "CANCEL_ALL_QUOTES", "CANCEL_QUOTE_SPECIFIED_IN_QUOTEID", "CANCEL_BY_QUOTETYPE", "CANCEL_FOR_SECURITY_ISSUER", "CANCEL_FOR_ISSUER_OF_UNDERLYING_SECURITY" };
const int QuoteRejectReason_realm[]  
   { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 99 };
const char *QuoteRejectReason_descriptions[]  
   { "UNKNOWN_SYMBOL", "EXCHANGE", "QUOTE_REQUEST_EXCEEDS_LIMIT", "TOO_LATE_TO_ENTER", "UNKNOWN_QUOTE", "DUPLICATE_QUOTE", "INVALID_BID_ASK_SPREAD", "INVALID_PRICE", "NOT_AUTHORIZED_TO_QUOTE_SECURITY", "PRICE_EXCEEDS_CURRENT_PRICE_BAND", "QUOTE_LOCKED", "INVALID_OR_UNKNOWN_SECURITY_ISSUER", "INVALID_OR_UNKNOWN_ISSUER_OF_UNDERLYING_SECURITY", "OTHER" };
const int QuoteResponseLevel_realm[]  
   { 0, 1, 2, 3 };
const char *QuoteResponseLevel_descriptions[]  
   { "NO_ACKNOWLEDGEMENT", "ACKNOWLEDGE_ONLY_NEGATIVE_OR_ERRONEOUS_QUOTES", "ACKNOWLEDGE_EACH_QUOTE_MESSAGE", "SUMMARY_ACKNOWLEDGEMENT" };
const int QuoteRequestType_realm[]  
   { 1, 2 };
const char *QuoteRequestType_descriptions[]  
   { "MANUAL", "AUTOMATIC" };
const int SecurityRequestType_realm[]  
   { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
const char *SecurityRequestType_descriptions[]  
   { "REQUEST_SECURITY_IDENTITY_AND_SPECIFICATIONS", "REQUEST_SECURITY_IDENTITY_FOR_THE_SPECIFICATIONS_PROVIDED", "REQUEST_LIST_SECURITY_TYPES", "REQUEST_LIST_SECURITIES", "SYMBOL", "SECURITYTYPE_AND_OR_CFICODE", "PRODUCT", "TRADINGSESSIONID", "ALL_SECURITIES", "MARKETID_OR_MARKETID_PLUS_MARKETSEGMENTID" };
const int SecurityResponseType_realm[]  
   { 1, 2, 3, 4, 5, 6 };
const char *SecurityResponseType_descriptions[]  
   { "ACCEPT_SECURITY_PROPOSAL_AS_IS", "ACCEPT_SECURITY_PROPOSAL_WITH_REVISIONS_AS_INDICATED_IN_THE_MESSAGE", "LIST_OF_SECURITY_TYPES_RETURNED_PER_REQUEST", "LIST_OF_SECURITIES_RETURNED_PER_REQUEST", "REJECT_SECURITY_PROPOSAL", "CANNOT_MATCH_SELECTION_CRITERIA" };
const char UnsolicitedIndicator_realm[]  
   { 'N', 'Y' };
const char *UnsolicitedIndicator_descriptions[]  
   { "NO", "YES" };
const int SecurityTradingStatus_realm[]  
   { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26 };
const char *SecurityTradingStatus_descriptions[]  
   { "OPENING_DELAY", "TRADING_HALT", "RESUME", "NO_OPEN", "PRICE_INDICATION", "TRADING_RANGE_INDICATION", "MARKET_IMBALANCE_BUY", "MARKET_IMBALANCE_SELL", "MARKET_ON_CLOSE_IMBALANCE_BUY", "MARKET_ON_CLOSE_IMBALANCE_SELL", "11", "NO_MARKET_IMBALANCE", "NO_MARKET_ON_CLOSE_IMBALANCE", "ITS_PRE_OPENING", "NEW_PRICE_INDICATION", "TRADE_DISSEMINATION_TIME", "READY_TO_TRADE", "NOT_AVAILABLE_FOR_TRADING", "NOT_TRADED_ON_THIS_MARKET", "UNKNOWN_OR_INVALID", "PRE_OPEN", "OPENING_ROTATION", "FAST_MARKET", "PRE_CROSS", "CROSS", "POST_CLOSE" };
const int HaltReasonInt_realm[]  
   { 0, 1, 2, 3, 4, 5 };
const char *HaltReasonInt_descriptions[]  
   { "NEWS_DISSEMINATION", "ORDER_INFLUX", "ORDER_IMBALANCE", "ADDITIONAL_INFORMATION", "NEWS_PENDING", "EQUIPMENT_CHANGEOVER" };
const char InViewOfCommon_realm[]  
   { 'N', 'Y' };
const char *InViewOfCommon_descriptions[]  
   { "NO", "YES" };
const char DueToRelated_realm[]  
   { 'N', 'Y' };
const char *DueToRelated_descriptions[]  
   { "NO", "YES" };
const int Adjustment_realm[]  
   { 1, 2, 3 };
const char *Adjustment_descriptions[]  
   { "CANCEL", "ERROR", "CORRECTION" };
const f8String TradingSessionID_realm[]  
   { "1", "2", "3", "4", "5", "6" };
const char *TradingSessionID_descriptions[]  
   { "DAY", "HALFDAY", "MORNING", "AFTERNOON", "EVENING", "AFTER_HOURS" };
const int TradSesMethod_realm[]  
   { 1, 2, 3 };
const char *TradSesMethod_descriptions[]  
   { "ELECTRONIC", "OPEN_OUTCRY", "TWO_PARTY" };
const int TradSesMode_realm[]  
   { 1, 2, 3 };
const char *TradSesMode_descriptions[]  
   { "TESTING", "SIMULATED", "PRODUCTION" };
const int TradSesStatus_realm[]  
   { 0, 1, 2, 3, 4, 5, 6 };
const char *TradSesStatus_descriptions[]  
   { "UNKNOWN", "HALTED", "OPEN", "CLOSED", "PRE_OPEN", "PRE_CLOSE", "REQUEST_REJECTED" };
const f8String MessageEncoding_realm[]  
   { "EUC-JP", "ISO-2022-JP", "SHIFT_JIS", "UTF-8" };
const char *MessageEncoding_descriptions[]  
   { "EUC_JP", "ISO_2022_JP", "SHIFT_JIS", "UTF_8" };
const int SessionRejectReason_realm[]  
   { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 99 };
const char *SessionRejectReason_descriptions[]  
   { "INVALID_TAG_NUMBER", "REQUIRED_TAG_MISSING", "TAG_NOT_DEFINED_FOR_THIS_MESSAGE_TYPE", "UNDEFINED_TAG", "TAG_SPECIFIED_WITHOUT_A_VALUE", "VALUE_IS_INCORRECT", "INCORRECT_DATA_FORMAT_FOR_VALUE", "DECRYPTION_PROBLEM", "SIGNATURE_PROBLEM", "COMPID_PROBLEM", "SENDINGTIME_ACCURACY_PROBLEM", "INVALID_MSGTYPE", "XML_VALIDATION_ERROR", "TAG_APPEARS_MORE_THAN_ONCE", "TAG_SPECIFIED_OUT_OF_REQUIRED_ORDER", "REPEATING_GROUP_FIELDS_OUT_OF_ORDER", "INCORRECT_NUMINGROUP_COUNT_FOR_REPEATING_GROUP", "NON_DATA_VALUE_INCLUDES_FIELD_DELIMITER", "OTHER" };
const char BidRequestTransType_realm[]  
   { 'C', 'N' };
const char *BidRequestTransType_descriptions[]  
   { "CANCEL", "NO" };
const char SolicitedFlag_realm[]  
   { 'N', 'Y' };
const char *SolicitedFlag_descriptions[]  
   { "NO", "YES" };
const int ExecRestatementReason_realm[]  
   { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 99 };
const char *ExecRestatementReason_descriptions[]  
   { "GT_CORPORATE_ACTION", "GT_RENEWAL", "VERBAL_CHANGE", "REPRICING_OF_ORDER", "BROKER_OPTION", "PARTIAL_DECLINE_OF_ORDERQTY", "CANCEL_ON_TRADING_HALT", "CANCEL_ON_SYSTEM_FAILURE", "MARKET", "CANCELED_NOT_BEST", "WAREHOUSE_RECAP", "PEG_REFRESH", "OTHER" };
const int BusinessRejectReason_realm[]  
   { 0, 1, 2, 3, 4, 5, 6, 7, 18 };
const char *BusinessRejectReason_descriptions[]  
   { "OTHER", "UNKNOWN_ID", "UNKNOWN_SECURITY", "UNSUPPORTED_MESSAGE_TYPE", "APPLICATION_NOT_AVAILABLE", "CONDITIONALLY_REQUIRED_FIELD_MISSING", "NOT_AUTHORIZED", "DELIVERTO_FIRM_NOT_AVAILABLE_AT_THIS_TIME", "INVALID_PRICE_INCREMENT" };
const char MsgDirection_realm[]  
   { 'R', 'S' };
const char *MsgDirection_descriptions[]  
   { "RECEIVE", "SEND" };
const char DiscretionInst_realm[]  
   { '0', '1', '2', '3', '4', '5', '6', '7' };
const char *DiscretionInst_descriptions[]  
   { "RELATED_TO_DISPLAYED_PRICE", "RELATED_TO_MARKET_PRICE", "RELATED_TO_PRIMARY_PRICE", "RELATED_TO_LOCAL_PRIMARY_PRICE", "RELATED_TO_MIDPOINT_PRICE", "RELATED_TO_LAST_TRADE_PRICE", "RELATED_TO_VWAP", "AVERAGE_PRICE_GUARANTEE" };
const int BidType_realm[]  
   { 1, 2, 3 };
const char *BidType_descriptions[]  
   { "NON_DISCLOSED_STYLE", "DISCLOSED_SYTLE", "NO_BIDDING_PROCESS" };
const int BidDescriptorType_realm[]  
   { 1, 2, 3 };
const char *BidDescriptorType_descriptions[]  
   { "SECTOR", "COUNTRY", "INDEX" };
const int SideValueInd_realm[]  
   { 1, 2 };
const char *SideValueInd_descriptions[]  
   { "SIDE_VALUE_1", "SIDE_VALUE_2" };
const int LiquidityIndType_realm[]  
   { 1, 2, 3, 4 };
const char *LiquidityIndType_descriptions[]  
   { "5_DAY_MOVING_AVERAGE", "20_DAY_MOVING_AVERAGE", "NORMAL_MARKET_SIZE", "OTHER" };
const char ExchangeForPhysical_realm[]  
   { 'N', 'Y' };
const char *ExchangeForPhysical_descriptions[]  
   { "NO", "YES" };
const int ProgRptReqs_realm[]  
   { 1, 2, 3 };
const char *ProgRptReqs_descriptions[]  
   { "BUY_SIDE_EXPLICITLY_REQUESTS_STATUS_USING_STATUE_REQUEST", "SELL_SIDE_PERIODICALLY_SENDS_STATUS_USING_LIST_STATUS_PERIOD_OPTIONALLY_SPECIFIED_IN_PROGRESSPERIOD", "REAL_TIME_EXECUTION_REPORTS" };
const int IncTaxInd_realm[]  
   { 1, 2 };
const char *IncTaxInd_descriptions[]  
   { "NET", "GROSS" };
const char BidTradeType_realm[]  
   { 'A', 'G', 'J', 'R' };
const char *BidTradeType_descriptions[]  
   { "AGENCY", "VWAP_GUARANTEE", "GUARANTEED_CLOSE", "RISK_TRADE" };
const char BasisPxType_realm[]  
   { '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'Z' };
const char *BasisPxType_descriptions[]  
   { "CLOSING_PRICE_AT_MORNINGN_SESSION", "CLOSING_PRICE", "CURRENT_PRICE", "SQ", "VWAP_THROUGH_A_DAY", "VWAP_THROUGH_A_MORNING_SESSION", "VWAP_THROUGH_AN_AFTERNOON_SESSION", "VWAP_THROUGH_A_DAY_EXCEPT_YORI", "VWAP_THROUGH_A_MORNING_SESSION_EXCEPT_YORI", "VWAP_THROUGH_AN_AFTERNOON_SESSION_EXCEPT_YORI", "STRIKE", "OPEN", "OTHERS" };
const int PriceType_realm[]  
   { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19 };
const char *PriceType_descriptions[]  
   { "PERCENTAGE", "PER_UNIT", "FIXED_AMOUNT", "DISCOUNT", "PREMIUM", "SPREAD", "TED_PRICE", "TED_YIELD", "YIELD", "FIXED_CABINET_TRADE_PRICE", "VARIABLE_CABINET_TRADE_PRICE", "PRODUCT_TICKS_IN_HALFS", "PRODUCT_TICKS_IN_FOURTHS", "PRODUCT_TICKS_IN_EIGHTS", "PRODUCT_TICKS_IN_SIXTEENTHS", "PRODUCT_TICKS_IN_THIRTY_SECONDS", "PRODUCT_TICKS_IN_SIXTY_FORTHS", "PRODUCT_TICKS_IN_ONE_TWENTY_EIGHTS" };
const int GTBookingInst_realm[]  
   { 0, 1, 2 };
const char *GTBookingInst_descriptions[]  
   { "BOOK_OUT_ALL_TRADES_ON_DAY_OF_EXECUTION", "ACCUMULATE_EXECTUIONS_UNTIL_FORDER_IS_FILLED_OR_EXPIRES", "ACCUMULATE_UNTIL_VERBALLLY_NOTIFIED_OTHERWISE" };
const int ListStatusType_realm[]  
   { 1, 2, 3, 4, 5, 6 };
const char *ListStatusType_descriptions[]  
   { "ACK", "RESPONSE", "TIMED", "EXEC_STARTED", "ALL_DONE", "ALERT" };
const int NetGrossInd_realm[]  
   { 1, 2 };
const char *NetGrossInd_descriptions[]  
   { "NET", "GROSS" };
const int ListOrderStatus_realm[]  
   { 1, 2, 3, 4, 5, 6, 7 };
const char *ListOrderStatus_descriptions[]  
   { "IN_BIDDING_PROCESS", "RECEIVED_FOR_EXECUTION", "EXECUTING", "CANCELLING", "ALERT", "ALL_DONE", "REJECT" };
const char ListExecInstType_realm[]  
   { '1', '2', '3', '4', '5' };
const char *ListExecInstType_descriptions[]  
   { "IMMEDIATE", "WAIT_FOR_EXECUT_INSTRUCTION", "EXCHANGE_SWITCH_CIV_ORDER_3", "EXCHANGE_SWITCH_CIV_ORDER_4", "EXCHANGE_SWITCH_CIV_ORDER_5" };
const char CxlRejResponseTo_realm[]  
   { '1', '2' };
const char *CxlRejResponseTo_descriptions[]  
   { "ORDER_CANCEL_REQUEST", "ORDER_CANCEL_REPLACE_REQUEST" };
const char MultiLegReportingType_realm[]  
   { '1', '2', '3' };
const char *MultiLegReportingType_descriptions[]  
   { "SINGLE_SECURITY", "INDIVIDUAL_LEG_OF_A_MULTI_LEG_SECURITY", "MULTI_LEG_SECURITY" };
const char PartyIDSource_realm[]  
   { '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I' };
const char *PartyIDSource_descriptions[]  
   { "KOREAN_INVESTOR_ID", "TAIWANESE_QUALIFIED_FOREIGN_INVESTOR_ID_QFII_FID", "TAIWANESE_TRADING_ACCT", "MALAYSIAN_CENTRAL_DEPOSITORY", "CHINESE_INVESTOR_ID", "UK_NATIONAL_INSURANCE_OR_PENSION_NUMBER", "US_SOCIAL_SECURITY_NUMBER", "US_EMPLOYER_OR_TAX_ID_NUMBER", "AUSTRALIAN_BUSINESS_NUMBER", "AUSTRALIAN_TAX_FILE_NUMBER", "BIC", "GENERALLY_ACCEPTED_MARKET_PARTICIPANT_IDENTIFIER", "PROPRIETARY", "ISO_COUNTRY_CODE", "SETTLEMENT_ENTITY_LOCATION", "MIC", "CSD_PARTICIPANT_MEMBER_CODE", "DIRECTED_BROKER_THREE_CHARACTER_ACRONYM_AS_DEFINED_IN_ISITC_ETC_BEST_PRACTICE_GUIDELINES_DOCUMENT" };
const int PartyRole_realm[]  
   { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85 };
const char *PartyRole_descriptions[]  
   { "EXECUTING_FIRM", "BROKER_OF_CREDIT", "CLIENT_ID", "CLEARING_FIRM", "INVESTOR_ID", "INTRODUCING_FIRM", "ENTERING_FIRM", "LOCATE", "FUND_MANAGER_CLIENT_ID", "SETTLEMENT_LOCATION", "ORDER_ORIGINATION_TRADER", "EXECUTING_TRADER", "ORDER_ORIGINATION_FIRM", "GIVEUP_CLEARING_FIRM", "CORRESPONDANT_CLEARING_FIRM", "EXECUTING_SYSTEM", "CONTRA_FIRM", "CONTRA_CLEARING_FIRM", "SPONSORING_FIRM", "UNDERLYING_CONTRA_FIRM", "CLEARING_ORGANIZATION", "EXCHANGE", "CUSTOMER_ACCOUNT", "CORRESPONDENT_CLEARING_ORGANIZATION", "CORRESPONDENT_BROKER", "BUYER_SELLER", "CUSTODIAN", "INTERMEDIARY", "AGENT", "SUB_CUSTODIAN", "BENEFICIARY", "INTERESTED_PARTY", "REGULATORY_BODY", "LIQUIDITY_PROVIDER", "ENTERING_TRADER", "CONTRA_TRADER", "POSITION_ACCOUNT", "CONTRA_INVESTOR_ID", "TRANSFER_TO_FIRM", "CONTRA_POSITION_ACCOUNT", "CONTRA_EXCHANGE", "INTERNAL_CARRY_ACCOUNT", "ORDER_ENTRY_OPERATOR_ID", "SECONDARY_ACCOUNT_NUMBER", "FOREIGN_FIRM", "THIRD_PARTY_ALLOCATION_FIRM", "CLAIMING_ACCOUNT", "ASSET_MANAGER", "PLEDGOR_ACCOUNT", "PLEDGEE_ACCOUNT", "LARGE_TRADER_REPORTABLE_ACCOUNT", "TRADER_MNEMONIC", "SENDER_LOCATION", "SESSION_ID", "ACCEPTABLE_COUNTERPARTY", "UNACCEPTABLE_COUNTERPARTY", "ENTERING_UNIT", "EXECUTING_UNIT", "INTRODUCING_BROKER", "QUOTE_ORIGINATOR", "REPORT_ORIGINATOR", "SYSTEMATIC_INTERNALISER", "MULTILATERAL_TRADING_FACILITY", "REGULATED_MARKET", "MARKET_MAKER", "INVESTMENT_FIRM", "HOST_COMPETENT_AUTHORITY", "HOME_COMPETENT_AUTHORITY", "COMPETENT_AUTHORITY_OF_THE_MOST_RELEVANT_MARKET_IN_TERMS_OF_LIQUIDITY", "COMPETENT_AUTHORITY_OF_THE_TRANSACTION", "REPORTING_INTERMEDIARY", "EXECUTION_VENUE", "MARKET_DATA_ENTRY_ORIGINATOR", "LOCATION_ID", "DESK_ID", "MARKET_DATA_MARKET", "ALLOCATION_ENTITY", "PRIME_BROKER_PROVIDING_GENERAL_TRADE_SERVICES", "STEP_OUT_FIRM", "BROKERCLEARINGID", "CENTRAL_REGISTRATION_DEPOSITORY", "CLEARING_ACCOUNT", "ACCEPTABLE_SETTLING_COUNTERPARTY", "UNACCEPTABLE_SETTLING_COUNTERPARTY" };
const int Product_realm[]  
   { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13 };
const char *Product_descriptions[]  
   { "AGENCY", "COMMODITY", "CORPORATE", "CURRENCY", "EQUITY", "GOVERNMENT", "INDEX", "LOAN", "MONEYMARKET", "MORTGAGE", "MUNICIPAL", "OTHER", "FINANCING" };
const char RoundingDirection_realm[]  
   { '0', '1', '2' };
const char *RoundingDirection_descriptions[]  
   { "ROUND_TO_NEAREST", "ROUND_DOWN", "ROUND_UP" };
const int DistribPaymentMethod_realm[]  
   { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12 };
const char *DistribPaymentMethod_descriptions[]  
   { "CREST", "NSCC", "EUROCLEAR", "CLEARSTREAM", "CHEQUE", "TELEGRAPHIC_TRANSFER", "FED_WIRE", "DIRECT_CREDIT", "ACH_CREDIT", "BPAY", "HIGH_VALUE_CLEARING_SYSTEM_HVACS", "REINVEST_IN_FUND" };
const char CancellationRights_realm[]  
   { 'M', 'N', 'O', 'Y' };
const char *CancellationRights_descriptions[]  
   { "NO_M", "NO_N", "NO_O", "YES" };
const char MoneyLaunderingStatus_realm[]  
   { '1', '2', '3', 'N', 'Y' };
const char *MoneyLaunderingStatus_descriptions[]  
   { "EXEMPT_1", "EXEMPT_2", "EXEMPT_3", "NOT_CHECKED", "PASSED" };
const char ExecPriceType_realm[]  
   { 'B', 'C', 'D', 'E', 'O', 'P', 'Q', 'S' };
const char *ExecPriceType_descriptions[]  
   { "BID_PRICE", "CREATION_PRICE", "CREATION_PRICE_PLUS_ADJUSTMENT_PERCENT", "CREATION_PRICE_PLUS_ADJUSTMENT_AMOUNT", "OFFER_PRICE", "OFFER_PRICE_MINUS_ADJUSTMENT_PERCENT", "OFFER_PRICE_MINUS_ADJUSTMENT_AMOUNT", "SINGLE_PRICE" };
const int TradeReportTransType_realm[]  
   { 0, 1, 2, 3, 4, 5 };
const char *TradeReportTransType_descriptions[]  
   { "NEW", "CANCEL", "REPLACE", "RELEASE", "REVERSE", "CANCEL_DUE_TO_BACK_OUT_OF_TRADE" };
const int PaymentMethod_realm[]  
   { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15 };
const char *PaymentMethod_descriptions[]  
   { "CREST", "NSCC", "EUROCLEAR", "CLEARSTREAM", "CHEQUE", "TELEGRAPHIC_TRANSFER", "FED_WIRE", "DEBIT_CARD", "DIRECT_DEBIT", "DIRECT_CREDIT", "CREDIT_CARD", "ACH_DEBIT", "ACH_CREDIT", "BPAY", "HIGH_VALUE_CLEARING_SYSTEM" };
const int TaxAdvantageType_realm[]  
   { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 999 };
const char *TaxAdvantageType_descriptions[]  
   { "NONE_NOT_APPLICABLE", "MAXI_ISA", "TESSA", "MINI_CASH_ISA", "MINI_STOCKS_AND_SHARES_ISA", "MINI_INSURANCE_ISA", "CURRENT_YEAR_PAYMENT", "PRIOR_YEAR_PAYMENT", "ASSET_TRANSFER", "EMPLOYEE_9", "EMPLOYEE_10", "EMPLOYER_11", "EMPLOYER_12", "NON_FUND_PROTOTYPE_IRA", "NON_FUND_QUALIFIED_PLAN", "DEFINED_CONTRIBUTION_PLAN", "INDIVIDUAL_RETIREMENT_ACCOUNT_16", "INDIVIDUAL_RETIREMENT_ACCOUNT_17", "KEOGH", "PROFIT_SHARING_PLAN", "401", "SELF_DIRECTED_IRA", "403", "457", "ROTH_IRA_24", "ROTH_IRA_25", "ROTH_CONVERSION_IRA_26", "ROTH_CONVERSION_IRA_27", "EDUCATION_IRA_28", "EDUCATION_IRA_29", "OTHER" };
const char FundRenewWaiv_realm[]  
   { 'N', 'Y' };
const char *FundRenewWaiv_descriptions[]  
   { "NO", "YES" };
const char RegistStatus_realm[]  
   { 'A', 'H', 'N', 'R' };
const char *RegistStatus_descriptions[]  
   { "ACCEPTED", "HELD", "REMINDER", "REJECTED" };
const int RegistRejReasonCode_realm[]  
   { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 99 };
const char *RegistRejReasonCode_descriptions[]  
   { "INVALID_UNACCEPTABLE_ACCOUNT_TYPE", "INVALID_UNACCEPTABLE_TAX_EXEMPT_TYPE", "INVALID_UNACCEPTABLE_OWNERSHIP_TYPE", "INVALID_UNACCEPTABLE_NO_REG_DETAILS", "INVALID_UNACCEPTABLE_REG_SEQ_NO", "INVALID_UNACCEPTABLE_REG_DETAILS", "INVALID_UNACCEPTABLE_MAILING_DETAILS", "INVALID_UNACCEPTABLE_MAILING_INSTRUCTIONS", "INVALID_UNACCEPTABLE_INVESTOR_ID", "INVALID_UNACEEPTABLE_INVESTOR_ID_SOURCE", "INVALID_UNACCEPTABLE_DATE_OF_BIRTH", "INVALID_UNACCEPTABLE_INVESTOR_COUNTRY_OF_RESIDENCE", "INVALID_UNACCEPTABLE_NO_DISTRIB_INSTNS", "INVALID_UNACCEPTABLE_DISTRIB_PERCENTAGE", "INVALID_UNACCEPTABLE_DISTRIB_PAYMENT_METHOD", "INVALID_UNACCEPTABLE_CASH_DISTRIB_AGENT_ACCT_NAME", "INVALID_UNACCEPTABLE_CASH_DISTRIB_AGENT_CODE", "INVALID_UNACCEPTABLE_CASH_DISTRIB_AGENT_ACCT_NUM", "OTHER" };
const char RegistTransType_realm[]  
   { '0', '1', '2' };
const char *RegistTransType_descriptions[]  
   { "NEW", "REPLACE", "CANCEL" };
const char OwnershipType_realm[]  
   { '2', 'J', 'T' };
const char *OwnershipType_descriptions[]  
   { "JOINT_TRUSTEES", "JOINT_INVESTORS", "TENANTS_IN_COMMON" };
const int ContAmtType_realm[]  
   { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15 };
const char *ContAmtType_descriptions[]  
   { "COMMISSION_AMOUNT", "COMMISSION_PERCENT", "INITIAL_CHARGE_AMOUNT", "INITIAL_CHARGE_PERCENT", "DISCOUNT_AMOUNT", "DISCOUNT_PERCENT", "DILUTION_LEVY_AMOUNT", "DILUTION_LEVY_PERCENT", "EXIT_CHARGE_AMOUNT", "EXIT_CHARGE_PERCENT", "FUND_BASED_RENEWAL_COMMISSION_PERCENT", "PROJECTED_FUND_VALUE", "FUND_BASED_RENEWAL_COMMISSION_AMOUNT_13", "FUND_BASED_RENEWAL_COMMISSION_AMOUNT_14", "NET_SETTLEMENT_AMOUNT" };
const int OwnerType_realm[]  
   { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13 };
const char *OwnerType_descriptions[]  
   { "INDIVIDUAL_INVESTOR", "PUBLIC_COMPANY", "PRIVATE_COMPANY", "INDIVIDUAL_TRUSTEE", "COMPANY_TRUSTEE", "PENSION_PLAN", "CUSTODIAN_UNDER_GIFTS_TO_MINORS_ACT", "TRUSTS", "FIDUCIARIES", "NETWORKING_SUB_ACCOUNT", "NON_PROFIT_ORGANIZATION", "CORPORATE_BODY", "NOMINEE" };
const char OrderCapacity_realm[]  
   { 'A', 'G', 'I', 'P', 'R', 'W' };
const char *OrderCapacity_descriptions[]  
   { "AGENCY", "PROPRIETARY", "INDIVIDUAL", "PRINCIPAL", "RISKLESS_PRINCIPAL", "AGENT_FOR_OTHER_MEMBER" };
const f8String OrderRestrictions_realm[]  
   { "1", "2", "3", "4", "5", "6", "7", "8", "9", "A", "B", "C", "D", "E", "F" };
const char *OrderRestrictions_descriptions[]  
   { "PROGRAM_TRADE", "INDEX_ARBITRAGE", "NON_INDEX_ARBITRAGE", "COMPETING_MARKET_MAKER", "ACTING_AS_MARKET_MAKER_OR_SPECIALIST_IN_THE_SECURITY", "ACTING_AS_MARKET_MAKER_OR_SPECIALIST_IN_THE_UNDERLYING_SECURITY_OF_A_DERIVATIVE_SECURITY", "FOREIGN_ENTITY", "EXTERNAL_MARKET_PARTICIPANT", "EXTERNAL_INTER_CONNECTED_MARKET_LINKAGE", "RISKLESS_ARBITRAGE", "ISSUER_HOLDING", "ISSUE_PRICE_STABILIZATION", "NON_ALGORITHMIC", "ALGORITHMIC", "CROSS" };
const char MassCancelRequestType_realm[]  
   { '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C' };
const char *MassCancelRequestType_descriptions[]  
   { "CANCEL_ORDERS_FOR_A_SECURITY", "CANCEL_ORDERS_FOR_AN_UNDERLYING_SECURITY", "CANCEL_ORDERS_FOR_A_PRODUCT", "CANCEL_ORDERS_FOR_A_CFICODE", "CANCEL_ORDERS_FOR_A_SECURITYTYPE", "CANCEL_ORDERS_FOR_A_TRADING_SESSION", "CANCEL_ALL_ORDERS", "CANCEL_ORDERS_FOR_A_MARKET", "CANCEL_ORDERS_FOR_A_MARKET_SEGMENT", "CANCEL_ORDERS_FOR_A_SECURITY_GROUP", "CANCEL_FOR_SECURITY_ISSUER", "CANCEL_FOR_ISSUER_OF_UNDERLYING_SECURITY" };
const char MassCancelResponse_realm[]  
   { '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C' };
const char *MassCancelResponse_descriptions[]  
   { "CANCEL_REQUEST_REJECTED", "CANCEL_ORDERS_FOR_A_SECURITY", "CANCEL_ORDERS_FOR_AN_UNDERLYING_SECURITY", "CANCEL_ORDERS_FOR_A_PRODUCT", "CANCEL_ORDERS_FOR_A_CFICODE", "CANCEL_ORDERS_FOR_A_SECURITYTYPE", "CANCEL_ORDERS_FOR_A_TRADING_SESSION", "CANCEL_ALL_ORDERS", "CANCEL_ORDERS_FOR_A_MARKET", "CANCEL_ORDERS_FOR_A_MARKET_SEGMENT", "CANCEL_ORDERS_FOR_A_SECURITY_GROUP", "CANCEL_ORDERS_FOR_A_SECURITIES_ISSUER", "CANCEL_ORDERS_FOR_ISSUER_OF_UNDERLYING_SECURITY" };
const int MassCancelRejectReason_realm[]  
   { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 99 };
const char *MassCancelRejectReason_descriptions[]  
   { "MASS_CANCEL_NOT_SUPPORTED", "INVALID_OR_UNKNOWN_SECURITY", "INVALID_OR_UNKOWN_UNDERLYING_SECURITY", "INVALID_OR_UNKNOWN_PRODUCT", "INVALID_OR_UNKNOWN_CFICODE", "INVALID_OR_UNKNOWN_SECURITYTYPE", "INVALID_OR_UNKNOWN_TRADING_SESSION", "INVALID_OR_UNKNOWN_MARKET", "INVALID_OR_UNKOWN_MARKET_SEGMENT", "INVALID_OR_UNKNOWN_SECURITY_GROUP", "INVALID_OR_UNKNOWN_SECURITY_ISSUER", "INVALID_OR_UNKNOWN_ISSUER_OF_UNDERLYING_SECURITY", "OTHER" };
const int QuoteType_realm[]  
   { 0, 1, 2, 3 };
const char *QuoteType_descriptions[]  
   { "INDICATIVE", "TRADEABLE", "RESTRICTED_TRADEABLE", "COUNTER" };
const char CashMargin_realm[]  
   { '1', '2', '3' };
const char *CashMargin_descriptions[]  
   { "CASH", "MARGIN_OPEN", "MARGIN_CLOSE" };
const f8String Scope_realm[]  
   { "1", "2", "3" };
const char *Scope_descriptions[]  
   { "LOCAL_MARKET", "NATIONAL", "GLOBAL" };
const char MDImplicitDelete_realm[]  
   { 'N', 'Y' };
const char *MDImplicitDelete_descriptions[]  
   { "NO", "YES" };
const int CrossType_realm[]  
   { 1, 2, 3, 4 };
const char *CrossType_descriptions[]  
   { "CROSS_AON", "CROSS_IOC", "CROSS_ONE_SIDE", "CROSS_SAME_PRICE" };
const int CrossPrioritization_realm[]  
   { 0, 1, 2 };
const char *CrossPrioritization_descriptions[]  
   { "NONE", "BUY_SIDE_IS_PRIORITIZED", "SELL_SIDE_IS_PRIORITIZED" };
const int NoSides_realm[]  
   { 1, 2 };
const char *NoSides_descriptions[]  
   { "ONE_SIDE", "BOTH_SIDES" };
const int SecurityListRequestType_realm[]  
   { 0, 1, 2, 3, 4, 5 };
const char *SecurityListRequestType_descriptions[]  
   { "SYMBOL", "SECURITYTYPE_AND_OR_CFICODE", "PRODUCT", "TRADINGSESSIONID", "ALL_SECURITIES", "MARKETID_OR_MARKETID_PLUS_MARKETSEGMENTID" };
const int SecurityRequestResult_realm[]  
   { 0, 1, 2, 3, 4, 5 };
const char *SecurityRequestResult_descriptions[]  
   { "VALID_REQUEST", "INVALID_OR_UNSUPPORTED_REQUEST", "NO_INSTRUMENTS_FOUND_THAT_MATCH_SELECTION_CRITERIA", "NOT_AUTHORIZED_TO_RETRIEVE_INSTRUMENT_DATA", "INSTRUMENT_DATA_TEMPORARILY_UNAVAILABLE", "REQUEST_FOR_INSTRUMENT_DATA_NOT_SUPPORTED" };
const int MultiLegRptTypeReq_realm[]  
   { 0, 1, 2 };
const char *MultiLegRptTypeReq_descriptions[]  
   { "REPORT_BY_MULITLEG_SECURITY_ONLY", "REPORT_BY_MULTILEG_SECURITY_AND_BY_INSTRUMENT_LEGS_BELONGING_TO_THE_MULTILEG_SECURITY", "REPORT_BY_INSTRUMENT_LEGS_BELONGING_TO_THE_MULTILEG_SECURITY_ONLY" };
const int TradSesStatusRejReason_realm[]  
   { 1, 99 };
const char *TradSesStatusRejReason_descriptions[]  
   { "UNKNOWN_OR_INVALID_TRADINGSESSIONID", "OTHER" };
const int TradeRequestType_realm[]  
   { 0, 1, 2, 3, 4 };
const char *TradeRequestType_descriptions[]  
   { "ALL_TRADES", "MATCHED_TRADES_MATCHING_CRITERIA_PROVIDED_ON_REQUEST", "UNMATCHED_TRADES_THAT_MATCH_CRITERIA", "UNREPORTED_TRADES_THAT_MATCH_CRITERIA", "ADVISORIES_THAT_MATCH_CRITERIA" };
const char PreviouslyReported_realm[]  
   { 'N', 'Y' };
const char *PreviouslyReported_descriptions[]  
   { "NO", "YES" };
const char MatchStatus_realm[]  
   { '0', '1', '2' };
const char *MatchStatus_descriptions[]  
   { "COMPARED_MATCHED_OR_AFFIRMED", "UNCOMPARED_UNMATCHED_OR_UNAFFIRMED", "ADVISORY_OR_ALERT" };
const f8String MatchType_realm[]  
   { "1", "2", "3", "4", "5", "6", "7", "8", "A1", "A2", "A3", "A4", "A5", "AQ", "M1", "M2", "M3", "M4", "M5", "M6", "MT", "S1", "S2", "S3", "S4", "S5" };
const char *MatchType_descriptions[]  
   { "ONE_PARTY_TRADE_REPORT", "TWO_PARTY_TRADE_REPORT", "CONFIRMED_TRADE_REPORT", "AUTO_MATCH", "CROSS_AUCTION", "COUNTER_ORDER_SELECTION", "CALL_AUCTION", "ISSUING_BUY_BACK_AUCTION", "EXACT_MATCH_ON_TRADE_DATE_STOCK_SYMBOL_QUANTITY_PRICE_TRADE_TYPE_AND_SPECIAL_TRADE_INDICATOR_PLUS_FOUR_BADGES_AND_EXECUTION_TIME", "EXACT_MATCH_ON_TRADE_DATE_STOCK_SYMBOL_QUANTITY_PRICE_TRADE_TYPE_AND_SPECIAL_TRADE_INDICATOR_PLUS_FOUR_BADGES", "EXACT_MATCH_ON_TRADE_DATE_STOCK_SYMBOL_QUANTITY_PRICE_TRADE_TYPE_AND_SPECIAL_TRADE_INDICATOR_PLUS_TWO_BADGES_AND_EXECUTION_TIME", "EXACT_MATCH_ON_TRADE_DATE_STOCK_SYMBOL_QUANTITY_PRICE_TRADE_TYPE_AND_SPECIAL_TRADE_INDICATOR_PLUS_TWO_BADGES", "EXACT_MATCH_ON_TRADE_DATE_STOCK_SYMBOL_QUANTITY_PRICE_TRADETYPE_AND_SPECIAL_TRADE_INDICATOR_PLUS_EXECUTION_TIME", "COMPARED_RECORDS_RESULTING_FROM_STAMPED_ADVISORIES_OR_SPECIALIST_ACCEPTS_PAIR_OFFS", "EXACT_MATCH_ON_TRADE_DATE_STOCK_SYMBOL_QUANTITY_PRICE_TRADE_TYPE_AND_SPECIAL_TRADE_INDICATOR_MINUS_BADGES_AND_TIMES_ACT_M1_MATCH", "SUMMARIZED_MATCH_MINUS_BADGES_AND_TIMES_ACT_M2_MATCH", "ACT_ACCEPTED_TRADE", "ACT_DEFAULT_TRADE", "ACT_DEFAULT_AFTER_M2", "ACT_M6_MATCH", "OCS_LOCKED_IN_NON_ACT", "SUMMARIZED_MATCH_USING_A1_EXACT_MATCH_CRITERIA_EXCEPT_QUANTITY_IS_SUMMARIED", "SUMMARIZED_MATCH_USING_A2_EXACT_MATCH_CRITERIA_EXCEPT_QUANTITY_IS_SUMMARIZED", "SUMMARIZED_MATCH_USING_A3_EXACT_MATCH_CRITERIA_EXCEPT_QUANTITY_IS_SUMMARIZED", "SUMMARIZED_MATCH_USING_A4_EXACT_MATCH_CRITERIA_EXCEPT_QUANTITY_IS_SUMMARIZED", "SUMMARIZED_MATCH_USING_A5_EXACT_MATCH_CRITERIA_EXCEPT_QUANTITY_IS_SUMMARIZED" };
const char OddLot_realm[]  
   { 'N', 'Y' };
const char *OddLot_descriptions[]  
   { "NO", "YES" };
const int ClearingInstruction_realm[]  
   { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13 };
const char *ClearingInstruction_descriptions[]  
   { "PROCESS_NORMALLY", "EXCLUDE_FROM_ALL_NETTING", "BILATERAL_NETTING_ONLY", "EX_CLEARING", "SPECIAL_TRADE", "MULTILATERAL_NETTING", "CLEAR_AGAINST_CENTRAL_COUNTERPARTY", "EXCLUDE_FROM_CENTRAL_COUNTERPARTY", "MANUAL_MODE", "AUTOMATIC_POSTING_MODE", "AUTOMATIC_GIVE_UP_MODE", "QUALIFIED_SERVICE_REPRESENTATIVE_QSR", "CUSTOMER_TRADE", "SELF_CLEARING" };
const int AccountType_realm[]  
   { 1, 2, 3, 4, 6, 7, 8 };
const char *AccountType_descriptions[]  
   { "ACCOUNT_IS_CARRIED_ON_CUSTOMER_SIDE_OF_THE_BOOKS", "ACCOUNT_IS_CARRIED_ON_NON_CUSTOMER_SIDE_OF_BOOKS", "HOUSE_TRADER", "FLOOR_TRADER", "ACCOUNT_IS_CARRIED_ON_NON_CUSTOMER_SIDE_OF_BOOKS_AND_IS_CROSS_MARGINED", "ACCOUNT_IS_HOUSE_TRADER_AND_IS_CROSS_MARGINED", "JOINT_BACK_OFFICE_ACCOUNT" };
const int CustOrderCapacity_realm[]  
   { 1, 2, 3, 4 };
const char *CustOrderCapacity_descriptions[]  
   { "MEMBER_TRADING_FOR_THEIR_OWN_ACCOUNT", "CLEARING_FIRM_TRADING_FOR_ITS_PROPRIETARY_ACCOUNT", "MEMBER_TRADING_FOR_ANOTHER_MEMBER", "ALL_OTHER" };
const int MassStatusReqType_realm[]  
   { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 };
const char *MassStatusReqType_descriptions[]  
   { "STATUS_FOR_ORDERS_FOR_A_SECURITY", "STATUS_FOR_ORDERS_FOR_AN_UNDERLYING_SECURITY", "STATUS_FOR_ORDERS_FOR_A_PRODUCT", "STATUS_FOR_ORDERS_FOR_A_CFICODE", "STATUS_FOR_ORDERS_FOR_A_SECURITYTYPE", "STATUS_FOR_ORDERS_FOR_A_TRADING_SESSION", "STATUS_FOR_ALL_ORDERS", "STATUS_FOR_ORDERS_FOR_A_PARTYID", "STATUS_FOR_SECURITY_ISSUER", "STATUS_FOR_ISSUER_OF_UNDERLYING_SECURITY" };
const char DayBookingInst_realm[]  
   { '0', '1', '2' };
const char *DayBookingInst_descriptions[]  
   { "CAN_TRIGGER_BOOKING_WITHOUT_REFERENCE_TO_THE_ORDER_INITIATOR", "SPEAK_WITH_ORDER_INITIATOR_BEFORE_BOOKING", "ACCUMULATE" };
const char BookingUnit_realm[]  
   { '0', '1', '2' };
const char *BookingUnit_descriptions[]  
   { "EACH_PARTIAL_EXECUTION_IS_A_BOOKABLE_UNIT", "AGGREGATE_PARTIAL_EXECUTIONS_ON_THIS_ORDER_AND_BOOK_ONE_TRADE_PER_ORDER", "AGGREGATE_EXECUTIONS_FOR_THIS_SYMBOL_SIDE_AND_SETTLEMENT_DATE" };
const char PreallocMethod_realm[]  
   { '0', '1' };
const char *PreallocMethod_descriptions[]  
   { "PRO_RATA", "DO_NOT_PRO_RATA" };
const f8String TradingSessionSubID_realm[]  
   { "1", "2", "3", "4", "5", "6", "7" };
const char *TradingSessionSubID_descriptions[]  
   { "PRE_TRADING", "OPENING_OR_OPENING_AUCTION", "3", "CLOSING_OR_CLOSING_AUCTION", "POST_TRADING", "INTRADAY_AUCTION", "QUIESCENT" };
const int AllocType_realm[]  
   { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14 };
const char *AllocType_descriptions[]  
   { "CALCULATED", "PRELIMINARY", "SELLSIDE_CALCULATED_USING_PRELIMINARY", "SELLSIDE_CALCULATED_WITHOUT_PRELIMINARY", "READY_TO_BOOK", "BUYSIDE_READY_TO_BOOK", "WAREHOUSE_INSTRUCTION", "REQUEST_TO_INTERMEDIARY", "ACCEPT", "REJECT", "ACCEPT_PENDING", "INCOMPLETE_GROUP", "COMPLETE_GROUP", "REVERSAL_PENDING" };
const f8String ClearingFeeIndicator_realm[]  
   { "1", "2", "3", "4", "5", "9", "B", "C", "E", "F", "H", "I", "L", "M" };
const char *ClearingFeeIndicator_descriptions[]  
   { "1ST_YEAR_DELEGATE_TRADING_FOR_OWN_ACCOUNT", "2ND_YEAR_DELEGATE_TRADING_FOR_OWN_ACCOUNT", "3RD_YEAR_DELEGATE_TRADING_FOR_OWN_ACCOUNT", "4TH_YEAR_DELEGATE_TRADING_FOR_OWN_ACCOUNT", "5TH_YEAR_DELEGATE_TRADING_FOR_OWN_ACCOUNT", "6TH_YEAR_DELEGATE_TRADING_FOR_OWN_ACCOUNT", "CBOE_MEMBER", "NON_MEMBER_AND_CUSTOMER", "EQUITY_MEMBER_AND_CLEARING_MEMBER", "FULL_AND_ASSOCIATE_MEMBER_TRADING_FOR_OWN_ACCOUNT_AND_AS_FLOOR_BROKERS", "106H_AND_106J_FIRMS", "GIM_IDEM_AND_COM_MEMBERSHIP_INTEREST_HOLDERS", "LESSEE_106F_EMPLOYEES", "ALL_OTHER_OWNERSHIP_TYPES" };
const char WorkingIndicator_realm[]  
   { 'N', 'Y' };
const char *WorkingIndicator_descriptions[]  
   { "NO", "YES" };
const int PriorityIndicator_realm[]  
   { 0, 1 };
const char *PriorityIndicator_descriptions[]  
   { "PRIORITY_UNCHANGED", "LOST_PRIORITY_AS_RESULT_OF_ORDER_CHANGE" };
const char LegalConfirm_realm[]  
   { 'N', 'Y' };
const char *LegalConfirm_descriptions[]  
   { "NO", "YES" };
const int QuoteRequestRejectReason_realm[]  
   { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 99 };
const char *QuoteRequestRejectReason_descriptions[]  
   { "UNKNOWN_SYMBOL", "EXCHANGE", "QUOTE_REQUEST_EXCEEDS_LIMIT", "TOO_LATE_TO_ENTER", "INVALID_PRICE", "NOT_AUTHORIZED_TO_REQUEST_QUOTE", "NO_MATCH_FOR_INQUIRY", "NO_MARKET_FOR_INSTRUMENT", "NO_INVENTORY", "PASS", "INSUFFICIENT_CREDIT", "OTHER" };
const int AcctIDSource_realm[]  
   { 1, 2, 3, 4, 5, 99 };
const char *AcctIDSource_descriptions[]  
   { "BIC", "SID_CODE", "TFM", "OMGEO", "DTCC_CODE", "OTHER" };
const int ConfirmStatus_realm[]  
   { 1, 2, 3, 4, 5 };
const char *ConfirmStatus_descriptions[]  
   { "RECEIVED", "MISMATCHED_ACCOUNT", "MISSING_SETTLEMENT_INSTRUCTIONS", "CONFIRMED", "REQUEST_REJECTED" };
const int ConfirmTransType_realm[]  
   { 0, 1, 2 };
const char *ConfirmTransType_descriptions[]  
   { "NEW", "REPLACE", "CANCEL" };
const int DeliveryForm_realm[]  
   { 1, 2 };
const char *DeliveryForm_descriptions[]  
   { "BOOK_ENTRY", "BEARER" };
const int LegSwapType_realm[]  
   { 1, 2, 4, 5 };
const char *LegSwapType_descriptions[]  
   { "PAR_FOR_PAR", "MODIFIED_DURATION", "RISK", "PROCEEDS" };
const int QuotePriceType_realm[]  
   { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 };
const char *QuotePriceType_descriptions[]  
   { "PERCENT", "PER_SHARE", "FIXED_AMOUNT", "DISCOUNT", "PREMIUM", "SPREAD", "TED_PRICE", "TED_YIELD", "YIELD_SPREAD", "YIELD" };
const int QuoteRespType_realm[]  
   { 1, 2, 3, 4, 5, 6, 7, 8 };
const char *QuoteRespType_descriptions[]  
   { "HIT_LIFT", "COUNTER", "EXPIRED", "COVER", "DONE_AWAY", "PASS", "END_TRADE", "TIMED_OUT" };
const f8String PosType_realm[]  
   { "ALC", "AS", "ASF", "CAA", "CEA", "DLT", "DLV", "DN", "EP", "ETR", "EX", "FIN", "IAS", "IES", "PA", "PIT", "PNTN", "RCV", "SEA", "SOD", "SPL", "TA", "TOT", "TQ", "TRF", "TX", "XM" };
const char *PosType_descriptions[]  
   { "ALLOCATION_TRADE_QTY", "OPTION_ASSIGNMENT", "AS_OF_TRADE_QTY", "CORPORATE_ACTION_ADJUSTMENT", "CREDIT_EVENT_ADJUSTMENT", "NET_DELTA_QTY", "DELIVERY_QTY", "DELIVERY_NOTICE_QTY", "EXCHANGE_FOR_PHYSICAL_QTY", "ELECTRONIC_TRADE_QTY", "OPTION_EXERCISE_QTY", "END_OF_DAY_QTY", "INTRA_SPREAD_QTY", "INTER_SPREAD_QTY", "ADJUSTMENT_QTY", "PIT_TRADE_QTY", "PRIVATELY_NEGOTIATED_TRADE_QTY", "RECEIVE_QUANTITY", "SUCCESSION_EVENT_ADJUSTMENT", "START_OF_DAY_QTY", "INTEGRAL_SPLIT", "TRANSACTION_FROM_ASSIGNMENT", "TOTAL_TRANSACTION_QTY", "TRANSACTION_QUANTITY", "TRANSFER_TRADE_QTY", "TRANSACTION_FROM_EXERCISE", "CROSS_MARGIN_QTY" };
const int PosQtyStatus_realm[]  
   { 0, 1, 2 };
const char *PosQtyStatus_descriptions[]  
   { "SUBMITTED", "ACCEPTED", "REJECTED" };
const f8String PosAmtType_realm[]  
   { "ACPN", "BANK", "CASH", "CMTM", "COLAT", "CPN", "CRES", "DLV", "FMTM", "IACPN", "ICMTM", "ICPN", "IMTM", "PREM", "SETL", "SMTM", "TVAR", "VADJ" };
const char *PosAmtType_descriptions[]  
   { "ACCRUED_COUPON_AMOUNT", "TOTAL_BANKED_AMOUNT", "CASH_AMOUNT", "COLLATERALIZED_MARK_TO_MARKET", "TOTAL_COLLATERALIZED_AMOUNT", "COUPON_AMOUNT", "CASH_RESIDUAL_AMOUNT", "COMPENSATION_AMOUNT", "FINAL_MARK_TO_MARKET_AMOUNT", "INCREMENTAL_ACCRUED_COUPON", "INCREMENTAL_COLLATERALIZED_MARK_TO_MARKET", "INITIAL_TRADE_COUPON_AMOUNT", "INCREMENTAL_MARK_TO_MARKET_AMOUNT", "PREMIUM_AMOUNT", "SETTLEMENT_VALUE", "START_OF_DAY_MARK_TO_MARKET_AMOUNT", "TRADE_VARIATION_AMOUNT", "VALUE_ADJUSTED_AMOUNT" };
const int PosTransType_realm[]  
   { 1, 2, 3, 4, 5, 6 };
const char *PosTransType_descriptions[]  
   { "EXERCISE", "DO_NOT_EXERCISE", "POSITION_ADJUSTMENT", "POSITION_CHANGE_SUBMISSION_MARGIN_DISPOSITION", "PLEDGE", "LARGE_TRADER_SUBMISSION" };
const int PosMaintAction_realm[]  
   { 1, 2, 3, 4 };
const char *PosMaintAction_descriptions[]  
   { "NEW", "REPLACE", "CANCEL", "REVERSE" };
const f8String SettlSessID_realm[]  
   { "EOD", "ETH", "ITD", "RTH" };
const char *SettlSessID_descriptions[]  
   { "END_OF_DAY", "ELECTRONIC_TRADING_HOURS", "INTRADAY", "REGULAR_TRADING_HOURS" };
const int AdjustmentType_realm[]  
   { 0, 1, 2, 3 };
const char *AdjustmentType_descriptions[]  
   { "PROCESS_REQUEST_AS_MARGIN_DISPOSITION", "DELTA_PLUS", "DELTA_MINUS", "FINAL" };
const int PosMaintStatus_realm[]  
   { 0, 1, 2, 3, 4 };
const char *PosMaintStatus_descriptions[]  
   { "ACCEPTED", "ACCEPTED_WITH_WARNINGS", "REJECTED", "COMPLETED", "COMPLETED_WITH_WARNINGS" };
const int PosMaintResult_realm[]  
   { 0, 1, 99 };
const char *PosMaintResult_descriptions[]  
   { "SUCCESSFUL_COMPLETION", "REJECTED", "OTHER" };
const int PosReqType_realm[]  
   { 0, 1, 2, 3, 4, 5, 6 };
const char *PosReqType_descriptions[]  
   { "POSITIONS", "TRADES", "EXERCISES", "ASSIGNMENTS", "SETTLEMENT_ACTIVITY", "BACKOUT_MESSAGE", "DELTA_POSITIONS" };
const int ResponseTransportType_realm[]  
   { 0, 1 };
const char *ResponseTransportType_descriptions[]  
   { "INBAND", "OUT_OF_BAND" };
const int PosReqResult_realm[]  
   { 0, 1, 2, 3, 4, 99 };
const char *PosReqResult_descriptions[]  
   { "VALID_REQUEST", "INVALID_OR_UNSUPPORTED_REQUEST", "NO_POSITIONS_FOUND_THAT_MATCH_CRITERIA", "NOT_AUTHORIZED_TO_REQUEST_POSITIONS", "REQUEST_FOR_POSITION_NOT_SUPPORTED", "OTHER" };
const int PosReqStatus_realm[]  
   { 0, 1, 2 };
const char *PosReqStatus_descriptions[]  
   { "COMPLETED", "COMPLETED_WITH_WARNINGS", "REJECTED" };
const int SettlPriceType_realm[]  
   { 1, 2 };
const char *SettlPriceType_descriptions[]  
   { "FINAL", "THEORETICAL" };
const char AssignmentMethod_realm[]  
   { 'P', 'R' };
const char *AssignmentMethod_descriptions[]  
   { "PRO_RATA", "RANDOM" };
const char ExerciseMethod_realm[]  
   { 'A', 'M' };
const char *ExerciseMethod_descriptions[]  
   { "AUTOMATIC", "MANUAL" };
const int TradeRequestResult_realm[]  
   { 0, 1, 2, 3, 4, 5, 8, 9, 99 };
const char *TradeRequestResult_descriptions[]  
   { "SUCCESSFUL", "INVALID_OR_UNKNOWN_INSTRUMENT", "INVALID_TYPE_OF_TRADE_REQUESTED", "INVALID_PARTIES", "INVALID_TRANSPORT_TYPE_REQUESTED", "INVALID_DESTINATION_REQUESTED", "TRADEREQUESTTYPE_NOT_SUPPORTED", "NOT_AUTHORIZED", "OTHER" };
const int TradeRequestStatus_realm[]  
   { 0, 1, 2 };
const char *TradeRequestStatus_descriptions[]  
   { "ACCEPTED", "COMPLETED", "REJECTED" };
const int TradeReportRejectReason_realm[]  
   { 0, 1, 2, 3, 4, 99 };
const char *TradeReportRejectReason_descriptions[]  
   { "SUCCESSFUL", "INVALID_PARTY_ONFORMATION", "UNKNOWN_INSTRUMENT", "UNAUTHORIZED_TO_REPORT_TRADES", "INVALID_TRADE_TYPE", "OTHER" };
const int SideMultiLegReportingType_realm[]  
   { 1, 2, 3 };
const char *SideMultiLegReportingType_descriptions[]  
   { "SINGLE_SECURITY", "INDIVIDUAL_LEG_OF_A_MULTILEG_SECURITY", "MULTILEG_SECURITY" };
const int TrdRegTimestampType_realm[]  
   { 1, 2, 3, 4, 5, 6, 7 };
const char *TrdRegTimestampType_descriptions[]  
   { "EXECUTION_TIME", "TIME_IN", "TIME_OUT", "BROKER_RECEIPT", "BROKER_EXECUTION", "DESK_RECEIPT", "SUBMISSION_TO_CLEARING" };
const int ConfirmType_realm[]  
   { 1, 2, 3 };
const char *ConfirmType_descriptions[]  
   { "STATUS", "CONFIRMATION", "CONFIRMATION_REQUEST_REJECTED" };
const int ConfirmRejReason_realm[]  
   { 1, 2, 99 };
const char *ConfirmRejReason_descriptions[]  
   { "MISMATCHED_ACCOUNT", "MISSING_SETTLEMENT_INSTRUCTIONS", "OTHER" };
const int BookingType_realm[]  
   { 0, 1, 2 };
const char *BookingType_descriptions[]  
   { "REGULAR_BOOKING", "CFD", "TOTAL_RETURN_SWAP" };
const int AllocSettlInstType_realm[]  
   { 0, 1, 2, 3, 4 };
const char *AllocSettlInstType_descriptions[]  
   { "USE_DEFAULT_INSTRUCTIONS", "DERIVE_FROM_PARAMETERS_PROVIDED", "FULL_DETAILS_PROVIDED", "SSI_DB_IDS_PROVIDED", "PHONE_FOR_INSTRUCTIONS" };
const char DlvyInstType_realm[]  
   { 'C', 'S' };
const char *DlvyInstType_descriptions[]  
   { "CASH", "SECURITIES" };
const int TerminationType_realm[]  
   { 1, 2, 3, 4 };
const char *TerminationType_descriptions[]  
   { "OVERNIGHT", "TERM", "FLEXIBLE", "OPEN" };
const int SettlInstReqRejCode_realm[]  
   { 0, 1, 2, 99 };
const char *SettlInstReqRejCode_descriptions[]  
   { "UNABLE_TO_PROCESS_REQUEST", "UNKNOWN_ACCOUNT", "NO_MATCHING_SETTLEMENT_INSTRUCTIONS_FOUND", "OTHER" };
const int AllocReportType_realm[]  
   { 2, 3, 4, 5, 8, 9, 10, 11, 12, 14 };
const char *AllocReportType_descriptions[]  
   { "PRELIMINARY_REQUEST_TO_INTERMEDIARY", "SELLSIDE_CALCULATED_USING_PRELIMINARY", "SELLSIDE_CALCULATED_WITHOUT_PRELIMINARY", "WAREHOUSE_RECAP", "REQUEST_TO_INTERMEDIARY", "ACCEPT", "REJECT", "ACCEPT_PENDING", "COMPLETE", "REVERSE_PENDING" };
const int AllocCancReplaceReason_realm[]  
   { 1, 2, 99 };
const char *AllocCancReplaceReason_descriptions[]  
   { "ORIGINAL_DETAILS_INCOMPLETE_INCORRECT", "CHANGE_IN_UNDERLYING_ORDER_DETAILS", "OTHER" };
const int AllocAccountType_realm[]  
   { 1, 2, 3, 4, 6, 7, 8 };
const char *AllocAccountType_descriptions[]  
   { "ACCOUNT_IS_CARRIED_PN_CUSTOMER_SIDE_OF_BOOKS", "ACCOUNT_IS_CARRIED_ON_NON_CUSTOMER_SIDE_OF_BOOKS", "HOUSE_TRADER", "FLOOR_TRADER", "ACCOUNT_IS_CARRIED_ON_NON_CUSTOMER_SIDE_OF_BOOKS_AND_IS_CROSS_MARGINED", "ACCOUNT_IS_HOUSE_TRADER_AND_IS_CROSS_MARGINED", "JOINT_BACK_OFFICE_ACCOUNT" };
const int PartySubIDType_realm[]  
   { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33 };
const char *PartySubIDType_descriptions[]  
   { "FIRM", "PERSON", "SYSTEM", "APPLICATION", "FULL_LEGAL_NAME_OF_FIRM", "POSTAL_ADDRESS", "PHONE_NUMBER", "EMAIL_ADDRESS", "CONTACT_NAME", "SECURITIES_ACCOUNT_NUMBER", "REGISTRATION_NUMBER", "REGISTERED_ADDRESS_12", "REGULATORY_STATUS", "REGISTRATION_NAME", "CASH_ACCOUNT_NUMBER", "BIC", "CSD_PARTICIPANT_MEMBER_CODE", "REGISTERED_ADDRESS_18", "FUND_ACCOUNT_NAME", "TELEX_NUMBER", "FAX_NUMBER", "SECURITIES_ACCOUNT_NAME", "CASH_ACCOUNT_NAME", "DEPARTMENT", "LOCATION_DESK", "POSITION_ACCOUNT_TYPE", "SECURITY_LOCATE_ID", "MARKET_MAKER", "ELIGIBLE_COUNTERPARTY", "PROFESSIONAL_CLIENT", "LOCATION", "EXECUTION_VENUE", "CURRENCY_DELIVERY_IDENTIFIER" };
const int AllocIntermedReqType_realm[]  
   { 1, 2, 3, 4, 5, 6 };
const char *AllocIntermedReqType_descriptions[]  
   { "PENDING_ACCEPT", "PENDING_RELEASE", "PENDING_REVERSAL", "ACCEPT", "BLOCK_LEVEL_REJECT", "ACCOUNT_LEVEL_REJECT" };
const int ApplQueueResolution_realm[]  
   { 0, 1, 2, 3 };
const char *ApplQueueResolution_descriptions[]  
   { "NO_ACTION_TAKEN", "QUEUE_FLUSHED", "OVERLAY_LAST", "END_SESSION" };
const int ApplQueueAction_realm[]  
   { 0, 1, 2, 3 };
const char *ApplQueueAction_descriptions[]  
   { "NO_ACTION_TAKEN", "QUEUE_FLUSHED", "OVERLAY_LAST", "END_SESSION" };
const int AvgPxIndicator_realm[]  
   { 0, 1, 2 };
const char *AvgPxIndicator_descriptions[]  
   { "NO_AVERAGE_PRICING", "TRADE_IS_PART_OF_AN_AVERAGE_PRICE_GROUP_IDENTIFIED_BY_THE_TRADELINKID", "LAST_TRADE_IS_THE_AVERAGE_PRICE_GROUP_IDENTIFIED_BY_THE_TRADELINKID" };
const int TradeAllocIndicator_realm[]  
   { 0, 1, 2, 3, 4, 5 };
const char *TradeAllocIndicator_descriptions[]  
   { "ALLOCATION_NOT_REQUIRED", "ALLOCATION_REQUIRED", "USE_ALLOCATION_PROVIDED_WITH_THE_TRADE", "ALLOCATION_GIVE_UP_EXECUTOR", "ALLOCATION_FROM_EXECUTOR", "ALLOCATION_TO_CLAIM_ACCOUNT" };
const int ExpirationCycle_realm[]  
   { 0, 1, 2 };
const char *ExpirationCycle_descriptions[]  
   { "EXPIRE_ON_TRADING_SESSION_CLOSE", "EXPIRE_ON_TRADING_SESSION_OPEN", "TRADING_ELIGIBILITY_EXPIRATION_SPECIFIED_IN_THE_DATE_AND_TIME_FIELDS_EVENTDATE" };
const int TrdType_realm[]  
   { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55 };
const char *TrdType_descriptions[]  
   { "REGULAR_TRADE", "BLOCK_TRADE_1", "EFP", "TRANSFER", "LATE_TRADE", "T_TRADE", "WEIGHTED_AVERAGE_PRICE_TRADE", "BUNCHED_TRADE", "LATE_BUNCHED_TRADE", "PRIOR_REFERENCE_PRICE_TRADE", "AFTER_HOURS_TRADE", "EXCHANGE_FOR_RISK", "EXCHANGE_FOR_SWAP", "EXCHANGE_OF_FUTURES_FOR", "EXCHANGE_OF_OPTIONS_FOR_OPTIONS", "TRADING_AT_SETTLEMENT", "ALL_OR_NONE", "FUTURES_LARGE_ORDER_EXECUTION", "EXCHANGE_OF_FUTURES_FOR_FUTURES", "OPTION_INTERIM_TRADE", "OPTION_CABINET_TRADE", "PRIVATELY_NEGOTIATED_TRADES", "SUBSTITUTION_OF_FUTURES_FOR_FORWARDS", "ERROR_TRADE", "SPECIAL_CUM_DIVIDEND", "SPECIAL_EX_DIVIDEND", "SPECIAL_CUM_COUPON", "SPECIAL_EX_COUPON", "CASH_SETTLEMENT", "SPECIAL_PRICE", "GUARANTEED_DELIVERY", "SPECIAL_CUM_RIGHTS", "SPECIAL_EX_RIGHTS", "SPECIAL_CUM_CAPITAL_REPAYMENTS", "SPECIAL_EX_CAPITAL_REPAYMENTS", "SPECIAL_CUM_BONUS", "SPECIAL_EX_BONUS", "BLOCK_TRADE_38", "WORKED_PRINCIPAL_TRADE", "BLOCK_TRADES", "NAME_CHANGE", "PORTFOLIO_TRANSFER", "PROROGATION_BUY", "PROROGATION_SELL", "OPTION_EXERCISE", "DELTA_NEUTRAL_TRANSACTION", "FINANCING_TRANSACTION", "NON_STANDARD_SETTLEMENT", "DERIVATIVE_RELATED_TRANSACTION", "PORTFOLIO_TRADE", "VOLUME_WEIGHTED_AVERAGE_TRADE", "EXCHANGE_GRANTED_TRADE", "REPURCHASE_AGREEMENT", "OTC", "EXCHANGE_BASIS_FACILITY" };
const int TrdSubType_realm[]  
   { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39 };
const char *TrdSubType_descriptions[]  
   { "CMTA", "INTERNAL_TRANSFER_OR_ADJUSTMENT", "EXTERNAL_TRANSFER_OR_TRANSFER_OF_ACCOUNT", "REJECT_FOR_SUBMITTING_SIDE", "ADVISORY_FOR_CONTRA_SIDE", "OFFSET_DUE_TO_AN_ALLOCATION", "ONSET_DUE_TO_AN_ALLOCATION", "DIFFERENTIAL_SPREAD", "IMPLIED_SPREAD_LEG_EXECUTED_AGAINST_AN_OUTRIGHT", "TRANSACTION_FROM_EXERCISE", "TRANSACTION_FROM_ASSIGNMENT", "ACATS", "AI", "B", "K", "LC", "M", "N", "NM", "NR", "P", "PA", "PC", "PN", "R", "RO", "RT", "SW", "T", "WN", "WT", "OFF_HOURS_TRADE", "ON_HOURS_TRADE", "OTC_QUOTE", "CONVERTED_SWAP", "CROSSED_TRADE", "INTERIM_PROTECTED_TRADE", "LARGE_IN_SCALE" };
const int PegMoveType_realm[]  
   { 0, 1 };
const char *PegMoveType_descriptions[]  
   { "FLOATING", "FIXED" };
const int PegOffsetType_realm[]  
   { 0, 1, 2, 3 };
const char *PegOffsetType_descriptions[]  
   { "PRICE", "BASIS_POINTS", "TICKS", "PRICE_TIER" };
const int PegLimitType_realm[]  
   { 0, 1, 2 };
const char *PegLimitType_descriptions[]  
   { "OR_BETTER", "STRICT", "OR_WORSE" };
const int PegRoundDirection_realm[]  
   { 1, 2 };
const char *PegRoundDirection_descriptions[]  
   { "MORE_AGGRESSIVE", "MORE_PASSIVE" };
const int PegScope_realm[]  
   { 1, 2, 3, 4 };
const char *PegScope_descriptions[]  
   { "LOCAL", "NATIONAL", "GLOBAL", "NATIONAL_EXCLUDING_LOCAL" };
const int DiscretionMoveType_realm[]  
   { 0, 1 };
const char *DiscretionMoveType_descriptions[]  
   { "FLOATING", "FIXED" };
const int DiscretionOffsetType_realm[]  
   { 0, 1, 2, 3 };
const char *DiscretionOffsetType_descriptions[]  
   { "PRICE", "BASIS_POINTS", "TICKS", "PRICE_TIER" };
const int DiscretionLimitType_realm[]  
   { 0, 1, 2 };
const char *DiscretionLimitType_descriptions[]  
   { "OR_BETTER", "STRICT", "OR_WORSE" };
const int DiscretionRoundDirection_realm[]  
   { 1, 2 };
const char *DiscretionRoundDirection_descriptions[]  
   { "MORE_AGGRESSIVE", "MORE_PASSIVE" };
const int DiscretionScope_realm[]  
   { 1, 2, 3, 4 };
const char *DiscretionScope_descriptions[]  
   { "LOCAL", "NATIONAL", "GLOBAL", "NATIONAL_EXCLUDING_LOCAL" };
const int TargetStrategy_realm[]  
   { 1, 2, 3 };
const char *TargetStrategy_descriptions[]  
   { "VWAP", "PARTICIPATE", "MININIZE_MARKET_IMPACT" };
const int LastLiquidityInd_realm[]  
   { 1, 2, 3, 4 };
const char *LastLiquidityInd_descriptions[]  
   { "ADDED_LIQUIDITY", "REMOVED_LIQUIDITY", "LIQUIDITY_ROUTED_OUT", "AUCTION" };
const char PublishTrdIndicator_realm[]  
   { 'N', 'Y' };
const char *PublishTrdIndicator_descriptions[]  
   { "NO", "YES" };
const int ShortSaleReason_realm[]  
   { 0, 1, 2, 3, 4, 5 };
const char *ShortSaleReason_descriptions[]  
   { "DEALER_SOLD_SHORT", "DEALER_SOLD_SHORT_EXEMPT", "SELLING_CUSTOMER_SOLD_SHORT", "SELLING_CUSTOMER_SOLD_SHORT_EXEMPT", "QUALIFIED_SERVICE_REPRESENTATIVE", "QSR_OR_AGU_CONTRA_SIDE_SOLD_SHORT_EXEMPT" };
const int QtyType_realm[]  
   { 0, 1, 2 };
const char *QtyType_descriptions[]  
   { "UNITS", "CONTRACTS", "UNITS_OF_MEASURE_PER_TIME_UNIT" };
const int TradeReportType_realm[]  
   { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15 };
const char *TradeReportType_descriptions[]  
   { "SUBMIT", "ALLEGED_1", "ACCEPT", "DECLINE", "ADDENDUM", "NO_WAS", "TRADE_REPORT_CANCEL", "7", "DEFAULTED", "INVALID_CMTA", "PENDED", "ALLEGED_NEW", "ALLEGED_ADDENDUM", "ALLEGED_NO_WAS", "ALLEGED_TRADE_REPORT_CANCEL", "ALLEGED_15" };
const int AllocNoOrdersType_realm[]  
   { 0, 1 };
const char *AllocNoOrdersType_descriptions[]  
   { "NOT_SPECIFIED", "EXPLICIT_LIST_PROVIDED" };
const int EventType_realm[]  
   { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 99 };
const char *EventType_descriptions[]  
   { "PUT", "CALL", "TENDER", "SINKING_FUND_CALL", "ACTIVATION", "INACTIVIATION", "LAST_ELIGIBLE_TRADE_DATE", "SWAP_START_DATE", "SWAP_END_DATE", "SWAP_ROLL_DATE", "SWAP_NEXT_START_DATE", "SWAP_NEXT_ROLL_DATE", "FIRST_DELIVERY_DATE", "LAST_DELIVERY_DATE", "INITIAL_INVENTORY_DUE_DATE", "FINAL_INVENTORY_DUE_DATE", "FIRST_INTENT_DATE", "LAST_INTENT_DATE", "POSITION_REMOVAL_DATE", "OTHER" };
const int InstrAttribType_realm[]  
   { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 99 };
const char *InstrAttribType_descriptions[]  
   { "FLAT", "ZERO_COUPON", "INTEREST_BEARING", "NO_PERIODIC_PAYMENTS", "VARIABLE_RATE", "LESS_FEE_FOR_PUT", "STEPPED_COUPON", "COUPON_PERIOD", "WHEN_AND_IF_ISSUED", "ORIGINAL_ISSUE_DISCOUNT", "CALLABLE_PUTTABLE", "ESCROWED_TO_MATURITY", "ESCROWED_TO_REDEMPTION_DATE", "PRE_REFUNDED", "IN_DEFAULT", "UNRATED", "TAXABLE", "INDEXED", "SUBJECT_TO_ALTERNATIVE_MINIMUM_TAX", "ORIGINAL_ISSUE_DISCOUNT_PRICE_SUPPLY_PRICE_IN_THE_INSTRATTRIBVALUE", "CALLABLE_BELOW_MATURITY_VALUE", "CALLABLE_WITHOUT_NOTICE_BY_MAIL_TO_HOLDER_UNLESS_REGISTERED", "PRICE_TICK_RULES_FOR_SECURITY", "TRADE_TYPE_ELIGIBILITY_DETAILS_FOR_SECURITY", "INSTRUMENT_DENOMINATOR", "INSTRUMENT_NUMERATOR", "INSTRUMENT_PRICE_PRECISION", "INSTRUMENT_STRIKE_PRICE", "TRADEABLE_INDICATOR", "TEXT_SUPPLY_THE_TEXT_OF_THE_ATTRIBUTE_OR_DISCLAIMER_IN_THE_INSTRATTRIBVALUE" };
const int CPProgram_realm[]  
   { 1, 2, 99 };
const char *CPProgram_descriptions[]  
   { "3", "4", "OTHER" };
const int MiscFeeBasis_realm[]  
   { 0, 1, 2 };
const char *MiscFeeBasis_descriptions[]  
   { "ABSOLUTE", "PER_UNIT", "PERCENTAGE" };
const char LastFragment_realm[]  
   { 'N', 'Y' };
const char *LastFragment_descriptions[]  
   { "NO", "YES" };
const int CollAsgnReason_realm[]  
   { 0, 1, 2, 3, 4, 5, 6, 7 };
const char *CollAsgnReason_descriptions[]  
   { "INITIAL", "SCHEDULED", "TIME_WARNING", "MARGIN_DEFICIENCY", "MARGIN_EXCESS", "FORWARD_COLLATERAL_DEMAND", "EVENT_OF_DEFAULT", "ADVERSE_TAX_EVENT" };
const int CollInquiryQualifier_realm[]  
   { 0, 1, 2, 3, 4, 5, 6, 7 };
const char *CollInquiryQualifier_descriptions[]  
   { "TRADE_DATE", "GC_INSTRUMENT", "COLLATERAL_INSTRUMENT", "SUBSTITUTION_ELIGIBLE", "NOT_ASSIGNED", "PARTIALLY_ASSIGNED", "FULLY_ASSIGNED", "OUTSTANDING_TRADES" };
const int CollAsgnTransType_realm[]  
   { 0, 1, 2, 3, 4 };
const char *CollAsgnTransType_descriptions[]  
   { "NEW", "REPLACE", "CANCEL", "RELEASE", "REVERSE" };
const int CollAsgnRespType_realm[]  
   { 0, 1, 2, 3 };
const char *CollAsgnRespType_descriptions[]  
   { "RECEIVED", "ACCEPTED", "DECLINED", "REJECTED" };
const int CollAsgnRejectReason_realm[]  
   { 0, 1, 2, 3, 4, 5, 99 };
const char *CollAsgnRejectReason_descriptions[]  
   { "UNKNOWN_DEAL", "UNKNOWN_OR_INVALID_INSTRUMENT", "UNAUTHORIZED_TRANSACTION", "INSUFFICIENT_COLLATERAL", "INVALID_TYPE_OF_COLLATERAL", "EXCESSIVE_SUBSTITUTION", "OTHER" };
const int CollStatus_realm[]  
   { 0, 1, 2, 3, 4 };
const char *CollStatus_descriptions[]  
   { "UNASSIGNED", "PARTIALLY_ASSIGNED", "ASSIGNMENT_PROPOSED", "ASSIGNED", "CHALLENGED" };
const char LastRptRequested_realm[]  
   { 'N', 'Y' };
const char *LastRptRequested_descriptions[]  
   { "NO", "YES" };
const int DeliveryType_realm[]  
   { 0, 1, 2, 3 };
const char *DeliveryType_descriptions[]  
   { "VERSUS_PAYMENT_DELIVER", "FREE_DELIVER", "TRI_PARTY", "HOLD_IN_CUSTODY" };
const int UserRequestType_realm[]  
   { 1, 2, 3, 4 };
const char *UserRequestType_descriptions[]  
   { "LOG_ON_USER", "LOG_OFF_USER", "CHANGE_PASSWORD_FOR_USER", "REQUEST_INDIVIDUAL_USER_STATUS" };
const int UserStatus_realm[]  
   { 1, 2, 3, 4, 5, 6, 7, 8 };
const char *UserStatus_descriptions[]  
   { "LOGGED_IN", "NOT_LOGGED_IN", "USER_NOT_RECOGNISED", "PASSWORD_INCORRECT", "PASSWORD_CHANGED", "OTHER", "FORCED_USER_LOGOUT_BY_EXCHANGE", "SESSION_SHUTDOWN_WARNING" };
const int StatusValue_realm[]  
   { 1, 2, 3, 4 };
const char *StatusValue_descriptions[]  
   { "CONNECTED", "NOT_CONNECTED_2", "NOT_CONNECTED_3", "IN_PROCESS" };
const int NetworkRequestType_realm[]  
   { 1, 2, 4, 8 };
const char *NetworkRequestType_descriptions[]  
   { "SNAPSHOT", "SUBSCRIBE", "STOP_SUBSCRIBING", "LEVEL_OF_DETAIL_THEN_NOCOMPIDS_BECOMES_REQUIRED" };
const int NetworkStatusResponseType_realm[]  
   { 1, 2 };
const char *NetworkStatusResponseType_descriptions[]  
   { "FULL", "INCREMENTAL_UPDATE" };
const int TrdRptStatus_realm[]  
   { 0, 1, 3 };
const char *TrdRptStatus_descriptions[]  
   { "ACCEPTED", "REJECTED", "ACCEPTED_WITH_ERRORS" };
const int AffirmStatus_realm[]  
   { 1, 2, 3 };
const char *AffirmStatus_descriptions[]  
   { "RECEIVED", "CONFIRM_REJECTED_IE_NOT_AFFIRMED", "AFFIRMED" };
const int CollAction_realm[]  
   { 0, 1, 2 };
const char *CollAction_descriptions[]  
   { "RETAIN", "ADD", "REMOVE" };
const int CollInquiryStatus_realm[]  
   { 0, 1, 2, 3, 4 };
const char *CollInquiryStatus_descriptions[]  
   { "ACCEPTED", "ACCEPTED_WITH_WARNINGS", "COMPLETED", "COMPLETED_WITH_WARNINGS", "REJECTED" };
const int CollInquiryResult_realm[]  
   { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 99 };
const char *CollInquiryResult_descriptions[]  
   { "SUCCESSFUL", "INVALID_OR_UNKNOWN_INSTRUMENT", "INVALID_OR_UNKNOWN_COLLATERAL_TYPE", "INVALID_PARTIES", "INVALID_TRANSPORT_TYPE_REQUESTED", "INVALID_DESTINATION_REQUESTED", "NO_COLLATERAL_FOUND_FOR_THE_TRADE_SPECIFIED", "NO_COLLATERAL_FOUND_FOR_THE_ORDER_SPECIFIED", "COLLATERAL_INQUIRY_TYPE_NOT_SUPPORTED", "UNAUTHORIZED_FOR_COLLATERAL_INQUIRY", "OTHER" };
const int StrategyParameterType_realm[]  
   { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29 };
const char *StrategyParameterType_descriptions[]  
   { "INT", "LENGTH", "NUMINGROUP", "SEQNUM", "TAGNUM", "FLOAT", "QTY", "PRICE", "PRICEOFFSET", "AMT", "PERCENTAGE", "CHAR", "BOOLEAN", "STRING", "MULTIPLECHARVALUE", "CURRENCY", "EXCHANGE", "MONTHYEAR", "UTCTIMESTAMP", "UTCTIMEONLY", "LOCALMKTDATE", "UTCDATEONLY", "DATA", "MULTIPLESTRINGVALUE", "COUNTRY", "LANGUAGE", "TZTIMEONLY", "TZTIMESTAMP", "TENOR" };
const f8String SecurityStatusID_realm[]  
   { "1", "2" };
const char *SecurityStatusID_descriptions[]  
   { "ACTIVE", "INACTIVE" };
const f8String UnderlyingCashType_realm[]  
   { "DIFF", "FIXED" };
const char *UnderlyingCashType_descriptions[]  
   { "DIFF", "FIXED" };
const int UnderlyingSettlementType_realm[]  
   { 2, 4, 5 };
const char *UnderlyingSettlementType_descriptions[]  
   { "T_PLUS_1", "T_PLUS_3", "T_PLUS_4" };
const char SecurityUpdateAction_realm[]  
   { 'A', 'D', 'M' };
const char *SecurityUpdateAction_descriptions[]  
   { "ADD", "DELETE", "MODIFY" };
const int ExpirationQtyType_realm[]  
   { 1, 2, 3, 4, 5 };
const char *ExpirationQtyType_descriptions[]  
   { "AUTO_EXERCISE", "NON_AUTO_EXERCISE", "FINAL_WILL_BE_EXERCISED", "CONTRARY_INTENTION", "DIFFERENCE" };
const int IndividualAllocType_realm[]  
   { 1, 2 };
const char *IndividualAllocType_descriptions[]  
   { "SUB_ALLOCATE", "THIRD_PARTY_ALLOCATION" };
const f8String UnitOfMeasure_realm[]  
   { "Alw", "Bbl", "Bcf", "Bu", "Gal", "MMBtu", "MMbbl", "MWh", "USD", "lbs", "oz_tr", "t", "tn" };
const char *UnitOfMeasure_descriptions[]  
   { "ALLOWANCES", "BARRELS", "BILLION_CUBIC_FEET", "BUSHELS", "GALLONS", "ONE_MILLION_BTU", "MILLION_BARRELS", "MEGAWATT_HOURS", "US_DOLLARS", "POUNDS", "TROY_OUNCES", "METRIC_TONS", "TONS" };
const f8String TimeUnit_realm[]  
   { "D", "H", "Min", "Mo", "S", "Wk", "Yr" };
const char *TimeUnit_descriptions[]  
   { "DAY", "HOUR", "MINUTE", "MONTH", "SECOND", "WEEK", "YEAR" };
const int AllocMethod_realm[]  
   { 1, 2, 3 };
const char *AllocMethod_descriptions[]  
   { "AUTOMATIC", "GUARANTOR", "MANUAL" };
const char AsOfIndicator_realm[]  
   { '0', '1' };
const char *AsOfIndicator_descriptions[]  
   { "FALSE", "TRUE" };
const int MDBookType_realm[]  
   { 1, 2, 3 };
const char *MDBookType_descriptions[]  
   { "TOP_OF_BOOK", "PRICE_DEPTH", "ORDER_DEPTH" };
const int MDOriginType_realm[]  
   { 0, 1, 2 };
const char *MDOriginType_descriptions[]  
   { "BOOK", "OFF_BOOK", "CROSS" };
const f8String CustOrderHandlingInst_realm[]  
   { "ADD", "AON", "CNH", "DIR", "E.W", "FOK", "IO", "IOC", "LOC", "LOO", "MAC", "MAO", "MOC", "MOO", "MQT", "NH", "OVD", "PEG", "RSV", "S.W", "SCL", "TMO", "TS", "WRK" };
const char *CustOrderHandlingInst_descriptions[]  
   { "ADD_ON_ORDER", "ALL_OR_NONE", "CASH_NOT_HELD", "DIRECTED_ORDER", "EXCHANGE_FOR_PHYSICAL_TRANSACTION", "FILL_OR_KILL", "IMBALANCE_ONLY", "IMMEDIATE_OR_CANCEL", "LIMIT_ON_CLOSE", "LIMIT_ON_OPEN", "MARKET_AT_CLOSE", "MARKET_AT_OPEN", "MARKET_ON_CLOSE", "MARKET_ON_OPEN", "MINIMUM_QUANTITY", "NOT_HELD", "OVER_THE_DAY", "PEGGED", "RESERVE_SIZE_ORDER", "STOP_STOCK_TRANSACTION", "SCALE", "TIME_ORDER", "TRAILING_STOP", "WORK" };
const int OrderHandlingInstSource_realm[]  
   { 1 };
const char *OrderHandlingInstSource_descriptions[]  
   { "NASD_OATS" };
const f8String DeskType_realm[]  
   { "A", "AR", "D", "IN", "IS", "O", "PF", "PR", "PT", "S", "T" };
const char *DeskType_descriptions[]  
   { "AGENCY", "ARBITRAGE", "DERIVATIVES", "INTERNATIONAL", "INSTITUTIONAL", "OTHER", "PREFERRED_TRADING", "PROPRIETARY", "PROGRAM_TRADING", "SALES", "TRADING" };
const int DeskTypeSource_realm[]  
   { 1 };
const char *DeskTypeSource_descriptions[]  
   { "NASD_OATS" };
const f8String DeskOrderHandlingInst_realm[]  
   { "ADD", "AON", "CNH", "DIR", "E.W", "FOK", "IO", "IOC", "LOC", "LOO", "MAC", "MAO", "MOC", "MOO", "MQT", "NH", "OVD", "PEG", "RSV", "S.W", "SCL", "TMO", "TS", "WRK" };
const char *DeskOrderHandlingInst_descriptions[]  
   { "ADD_ON_ORDER", "ALL_OR_NONE", "CASH_NOT_HELD", "DIRECTED_ORDER", "EXCHANGE_FOR_PHYSICAL_TRANSACTION", "FILL_OR_KILL", "IMBALANCE_ONLY", "IMMEDIATE_OR_CANCEL", "LIMIT_ON_CLOSE", "LIMIT_ON_OPEN", "MARKET_AT_CLOSE", "MARKET_AT_OPEN", "MARKET_ON_CLOSE", "MARKET_ON_OPEN", "MINIMUM_QUANTITY", "NOT_HELD", "OVER_THE_DAY", "PEGGED", "RESERVE_SIZE_ORDER", "STOP_STOCK_TRANSACTION", "SCALE", "TIME_ORDER", "TRAILING_STOP", "WORK" };
const char ExecAckStatus_realm[]  
   { '0', '1', '2' };
const char *ExecAckStatus_descriptions[]  
   { "RECEIVED_NOT_YET_PROCESSED", "ACCEPTED", "DONT_KNOW" };
const int CollApplType_realm[]  
   { 0, 1 };
const char *CollApplType_descriptions[]  
   { "SPECIFIC_DEPOSIT", "GENERAL" };
const char UnderlyingFXRateCalc_realm[]  
   { 'D', 'M' };
const char *UnderlyingFXRateCalc_descriptions[]  
   { "DIVIDE", "MULTIPLY" };
const char AllocPositionEffect_realm[]  
   { 'C', 'F', 'O', 'R' };
const char *AllocPositionEffect_descriptions[]  
   { "CLOSE", "FIFO", "OPEN", "ROLLED" };
const char DealingCapacity_realm[]  
   { 'A', 'P', 'R' };
const char *DealingCapacity_descriptions[]  
   { "AGENT", "PRINCIPAL", "RISKLESS_PRINCIPAL" };
const char AggressorIndicator_realm[]  
   { 'N', 'Y' };
const char *AggressorIndicator_descriptions[]  
   { "NO", "YES" };
const int MDQuoteType_realm[]  
   { 0, 1, 2, 3, 4 };
const char *MDQuoteType_descriptions[]  
   { "INDICATIVE", "TRADEABLE", "RESTRICTED_TRADEABLE", "COUNTER", "INDICATIVE_AND_TRADEABLE" };
const char RefOrderIDSource_realm[]  
   { '0', '1', '2', '3', '4' };
const char *RefOrderIDSource_descriptions[]  
   { "SECONDARYORDERID", "ORDERID", "MDENTRYID", "QUOTEENTRYID", "ORIGINAL_ORDER_ID" };
const char DisplayWhen_realm[]  
   { '1', '2' };
const char *DisplayWhen_descriptions[]  
   { "IMMEDIATE", "EXHAUST" };
const char DisplayMethod_realm[]  
   { '1', '2', '3', '4' };
const char *DisplayMethod_descriptions[]  
   { "INITIAL", "NEW", "RANDOM", "UNDISCLOSED" };
const char PriceProtectionScope_realm[]  
   { '0', '1', '2', '3' };
const char *PriceProtectionScope_descriptions[]  
   { "NONE", "LOCAL", "NATIONAL", "GLOBAL" };
const char LotType_realm[]  
   { '1', '2', '3', '4' };
const char *LotType_descriptions[]  
   { "ODD_LOT", "ROUND_LOT", "BLOCK_LOT", "ROUND_LOT_BASED_UPON_UNITOFMEASURE" };
const int PegPriceType_realm[]  
   { 1, 2, 3, 4, 5, 7, 8, 9 };
const char *PegPriceType_descriptions[]  
   { "LAST_PEG", "MID_PRICE_PEG", "OPENING_PEG", "MARKET_PEG", "PRIMARY_PEG", "PEG_TO_VWAP", "TRAILING_STOP_PEG", "PEG_TO_LIMIT_PRICE" };
const char TriggerType_realm[]  
   { '1', '2', '3', '4' };
const char *TriggerType_descriptions[]  
   { "PARTIAL_EXECUTION", "SPECIFIED_TRADING_SESSION", "NEXT_AUCTION", "PRICE_MOVEMENT" };
const char TriggerAction_realm[]  
   { '1', '2', '3' };
const char *TriggerAction_descriptions[]  
   { "ACTIVATE", "MODIFY", "CANCEL" };
const char TriggerPriceType_realm[]  
   { '1', '2', '3', '4', '5', '6' };
const char *TriggerPriceType_descriptions[]  
   { "BEST_OFFER", "LAST_TRADE", "BEST_BID", "BEST_BID_OR_LAST_TRADE", "BEST_OFFER_OR_LAST_TRADE", "BEST_MID" };
const char TriggerPriceTypeScope_realm[]  
   { '0', '1', '2', '3' };
const char *TriggerPriceTypeScope_descriptions[]  
   { "NONE", "LOCAL", "NATIONAL", "GLOBAL" };
const char TriggerPriceDirection_realm[]  
   { 'D', 'U' };
const char *TriggerPriceDirection_descriptions[]  
   { "TRIGGER_IF_THE_PRICE_OF_THE_SPECIFIED_TYPE_GOES_DOWN_TO_OR_THROUGH_THE_SPECIFIED_TRIGGER_PRICE", "TRIGGER_IF_THE_PRICE_OF_THE_SPECIFIED_TYPE_GOES_UP_TO_OR_THROUGH_THE_SPECIFIED_TRIGGER_PRICE" };
const char TriggerOrderType_realm[]  
   { '1', '2' };
const char *TriggerOrderType_descriptions[]  
   { "MARKET", "LIMIT" };
const char OrderCategory_realm[]  
   { '1', '2', '3', '4', '5', '6', '7', '8', '9' };
const char *OrderCategory_descriptions[]  
   { "ORDER", "QUOTE", "PRIVATELY_NEGOTIATED_TRADE", "MULTILEG_ORDER", "LINKED_ORDER", "QUOTE_REQUEST", "IMPLIED_ORDER", "CROSS_ORDER", "STREAMING_PRICE" };
const char TradeHandlingInstr_realm[]  
   { '0', '1', '2', '3', '4', '5' };
const char *TradeHandlingInstr_descriptions[]  
   { "TRADE_CONFIRMATION", "TWO_PARTY_REPORT", "ONE_PARTY_REPORT_FOR_MATCHING", "ONE_PARTY_REPORT_FOR_PASS_THROUGH", "AUTOMATED_FLOOR_ORDER_ROUTING", "TWO_PARTY_REPORT_FOR_CLAIM" };
const f8String ApplVerID_realm[]  
   { "0", "1", "2", "3", "4", "5", "6", "7", "8", "9" };
const char *ApplVerID_descriptions[]  
   { "FIX27", "FIX30", "FIX40", "FIX41", "FIX42", "FIX43", "FIX44", "FIX50", "FIX50SP1", "FIX50SP2" };
const char ExDestinationIDSource_realm[]  
   { 'B', 'C', 'D', 'E', 'G' };
const char *ExDestinationIDSource_descriptions[]  
   { "BIC", "GENERALLY_ACCEPTED_MARKET_PARTICIPANT_IDENTIFIER", "PROPRIETARY", "ISO_COUNTRY_CODE", "MIC" };
const f8String DefaultApplVerID_realm[]  
   { "0", "1", "2", "3", "4", "5", "6", "7", "8", "9" };
const char *DefaultApplVerID_descriptions[]  
   { "FIX27", "FIX30", "FIX40", "FIX41", "FIX42", "FIX43", "FIX44", "FIX50", "FIX50SP1", "FIX50SP2" };
const int ImpliedMarketIndicator_realm[]  
   { 0, 1, 2, 3 };
const char *ImpliedMarketIndicator_descriptions[]  
   { "NOT_IMPLIED", "IMPLIED_IN", "IMPLIED_OUT", "BOTH_IMPLIED_IN_AND_IMPLIED_OUT" };
const int SettlObligMode_realm[]  
   { 1, 2 };
const char *SettlObligMode_descriptions[]  
   { "PRELIMINARY", "FINAL" };
const char SettlObligTransType_realm[]  
   { 'C', 'N', 'R', 'T' };
const char *SettlObligTransType_descriptions[]  
   { "CANCEL", "NEW", "REPLACE", "RESTATE" };
const char SettlObligSource_realm[]  
   { '1', '2', '3' };
const char *SettlObligSource_descriptions[]  
   { "INSTRUCTIONS_OF_BROKER", "INSTRUCTIONS_FOR_INSTITUTION", "INVESTOR" };
const int QuoteEntryStatus_realm[]  
   { 0, 5, 6, 7, 12, 13, 14, 15, 16 };
const char *QuoteEntryStatus_descriptions[]  
   { "ACCEPTED", "REJECTED", "REMOVED_FROM_MARKET", "EXPIRED", "LOCKED_MARKET_WARNING", "CROSS_MARKET_WARNING", "CANCELED_DUE_TO_LOCK_MARKET", "CANCELED_DUE_TO_CROSS_MARKET", "ACTIVE" };
const int RespondentType_realm[]  
   { 1, 2, 3, 4 };
const char *RespondentType_descriptions[]  
   { "ALL_MARKET_PARTICIPANTS", "SPECIFIED_MARKET_PARTICIPANTS", "ALL_MARKET_MAKERS", "PRIMARY_MARKET_MAKER" };
const int SecurityTradingEvent_realm[]  
   { 1, 2, 3, 4, 5, 6, 7, 8 };
const char *SecurityTradingEvent_descriptions[]  
   { "ORDER_IMBALANCE_AUCTION_IS_EXTENDED", "TRADING_RESUMES", "PRICE_VOLATILITY_INTERRUPTION", "CHANGE_OF_TRADING_SESSION", "CHANGE_OF_TRADING_SUBSESSION", "CHANGE_OF_SECURITY_TRADING_STATUS", "CHANGE_OF_BOOK_TYPE", "CHANGE_OF_MARKET_DEPTH" };
const int StatsType_realm[]  
   { 1, 2, 3, 4 };
const char *StatsType_descriptions[]  
   { "EXCHANGE_LAST", "HIGH", "AVERAGE_PRICE", "TURNOVER" };
const int MDSecSizeType_realm[]  
   { 1 };
const char *MDSecSizeType_descriptions[]  
   { "CUSTOMER" };
const char SettlMethod_realm[]  
   { 'C', 'P' };
const char *SettlMethod_descriptions[]  
   { "CASH_SETTLEMENT_REQUIRED", "PHYSICAL_SETTLEMENT_REQUIRED" };
const int ExerciseStyle_realm[]  
   { 0, 1, 2 };
const char *ExerciseStyle_descriptions[]  
   { "EUROPEAN", "AMERICAN", "BERMUDA" };
const f8String PriceQuoteMethod_realm[]  
   { "INT", "INX", "PCTPAR", "STD" };
const char *PriceQuoteMethod_descriptions[]  
   { "INTEREST_RATE_INDEX", "INDEX", "PERCENT_OF_PAR", "STANDARD" };
const f8String ValuationMethod_realm[]  
   { "CDS", "CDSD", "EQTY", "FUT", "FUTDA" };
const char *ValuationMethod_descriptions[]  
   { "CDS_STYLE_COLLATERALIZATION_OF_MARKET_TO_MARKET_AND_COUPON", "CDS_IN_DELIVERY", "PREMIUM_STYLE", "FUTURES_STYLE_MARK_TO_MARKET", "FUTURES_STYLE_WITH_AN_ATTACHED_CASH_ADJUSTMENT" };
const int ListMethod_realm[]  
   { 0, 1 };
const char *ListMethod_descriptions[]  
   { "PRE_LISTED_ONLY", "USER_REQUESTED" };
const int TickRuleType_realm[]  
   { 0, 1, 2, 3, 4 };
const char *TickRuleType_descriptions[]  
   { "REGULAR", "VARIABLE", "FIXED", "TRADED_AS_A_SPREAD_LEG", "SETTLED_AS_A_SPREAD_LEG" };
const int MaturityMonthYearIncrementUnits_realm[]  
   { 0, 1, 2, 3 };
const char *MaturityMonthYearIncrementUnits_descriptions[]  
   { "MONTHS", "DAYS", "WEEKS", "YEARS" };
const int MaturityMonthYearFormat_realm[]  
   { 0, 1, 2 };
const char *MaturityMonthYearFormat_descriptions[]  
   { "YEARMONTH_ONLY", "YEARMONTHDAY", "YEARMONTHWEEK" };
const int PriceLimitType_realm[]  
   { 0, 1, 2 };
const char *PriceLimitType_descriptions[]  
   { "PRICE", "TICKS", "PERCENTAGE" };
const int ApplReqType_realm[]  
   { 0, 1, 2, 3, 4, 5, 6 };
const char *ApplReqType_descriptions[]  
   { "RETRANSMISSION_OF_APPLICATION_MESSAGES_FOR_THE_SPECIFIED_APPLICATIONS", "SUBSCRIPTION_TO_THE_SPECIFIED_APPLICATIONS", "REQUEST_FOR_THE_LAST_APPLLASTSEQNUM_PUBLISHED_FOR_THE_SPECIFIED_APPLICATIONS", "REQUEST_VALID_SET_OF_APPLICATIONS", "UNSUBSCRIBE_TO_THE_SPECIFIED_APPLICATIONS", "CANCEL_RETRANSMISSION", "CANCEL_RETRANSMISSION_AND_UNSUBSCRIBE_TO_THE_SPECIFIED_APPLICATIONS" };
const int ApplResponseType_realm[]  
   { 0, 1, 2 };
const char *ApplResponseType_descriptions[]  
   { "REQUEST_SUCCESSFULLY_PROCESSED", "APPLICATION_DOES_NOT_EXIST", "MESSAGES_NOT_AVAILABLE" };
const int ApplResponseError_realm[]  
   { 0, 1, 2 };
const char *ApplResponseError_descriptions[]  
   { "APPLICATION_DOES_NOT_EXIST", "MESSAGES_REQUESTED_ARE_NOT_AVAILABLE", "USER_NOT_AUTHORIZED_FOR_APPLICATION" };
const int TradSesEvent_realm[]  
   { 0, 1, 2, 3 };
const char *TradSesEvent_descriptions[]  
   { "TRADING_RESUMES", "CHANGE_OF_TRADING_SESSION", "CHANGE_OF_TRADING_SUBSESSION", "CHANGE_OF_TRADING_STATUS" };
const int MassActionType_realm[]  
   { 1, 2, 3 };
const char *MassActionType_descriptions[]  
   { "SUSPEND_ORDERS", "RELEASE_ORDERS_FROM_SUSPENSION", "CANCEL_ORDERS" };
const int MassActionScope_realm[]  
   { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12 };
const char *MassActionScope_descriptions[]  
   { "ALL_ORDERS_FOR_A_SECURITY", "ALL_ORDERS_FOR_AN_UNDERLYING_SECURITY", "ALL_ORDERS_FOR_A_PRODUCT", "ALL_ORDERS_FOR_A_CFICODE", "ALL_ORDERS_FOR_A_SECURITYTYPE", "ALL_ORDERS_FOR_A_TRADING_SESSION", "ALL_ORDERS", "ALL_ORDERS_FOR_A_MARKET", "ALL_ORDERS_FOR_A_MARKET_SEGMENT", "ALL_ORDERS_FOR_A_SECURITY_GROUP", "CANCEL_FOR_SECURITY_ISSUER", "CANCEL_FOR_ISSUER_OF_UNDERLYING_SECURITY" };
const int MassActionResponse_realm[]  
   { 0, 1 };
const char *MassActionResponse_descriptions[]  
   { "REJECTED", "ACCEPTED" };
const int MassActionRejectReason_realm[]  
   { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 99 };
const char *MassActionRejectReason_descriptions[]  
   { "MASS_ACTION_NOT_SUPPORTED", "INVALID_OR_UNKNOWN_SECURITY", "INVALID_OR_UNKNOWN_UNDERLYING_SECURITY", "INVALID_OR_UNKNOWN_PRODUCT", "INVALID_OR_UNKNOWN_CFICODE", "INVALID_OR_UNKNOWN_SECURITYTYPE", "INVALID_OR_UNKNOWN_TRADING_SESSION", "INVALID_OR_UNKNOWN_MARKET", "INVALID_OR_UNKNOWN_MARKET_SEGMENT", "INVALID_OR_UNKNOWN_SECURITY_GROUP", "INVALID_OR_UNKNOWN_SECURITY_ISSUER", "INVALID_OR_UNKNOWN_ISSUER_OF_UNDERLYING_SECURITY", "OTHER" };
const int MultilegModel_realm[]  
   { 0, 1, 2 };
const char *MultilegModel_descriptions[]  
   { "PREDEFINED_MULTILEG_SECURITY", "USER_DEFINED_MULTLEG_SECURITY", "USER_DEFINED_NON_SECURITIZED_MULTILEG" };
const int MultilegPriceMethod_realm[]  
   { 0, 1, 2, 3, 4, 5 };
const char *MultilegPriceMethod_descriptions[]  
   { "NET_PRICE", "REVERSED_NET_PRICE", "YIELD_DIFFERENCE", "INDIVIDUAL", "CONTRACT_WEIGHTED_AVERAGE_PRICE", "MULTIPLIED_PRICE" };
const int ContingencyType_realm[]  
   { 1, 2, 3, 4 };
const char *ContingencyType_descriptions[]  
   { "ONE_CANCELS_THE_OTHER", "ONE_TRIGGERS_THE_OTHER", "ONE_UPDATES_THE_OTHER_3", "ONE_UPDATES_THE_OTHER_4" };
const int ListRejectReason_realm[]  
   { 0, 2, 4, 5, 6, 11, 99 };
const char *ListRejectReason_descriptions[]  
   { "BROKER", "EXCHANGE_CLOSED", "TOO_LATE_TO_ENTER", "UNKNOWN_ORDER", "DUPLICATE_ORDER", "UNSUPPORTED_ORDER_CHARACTERISTIC", "OTHER" };
const int TradePublishIndicator_realm[]  
   { 0, 1, 2 };
const char *TradePublishIndicator_descriptions[]  
   { "DO_NOT_PUBLISH_TRADE", "PUBLISH_TRADE", "DEFERRED_PUBLICATION" };
const char MarketUpdateAction_realm[]  
   { 'A', 'D', 'M' };
const char *MarketUpdateAction_descriptions[]  
   { "ADD", "DELETE", "MODIFY" };
const int ApplReportType_realm[]  
   { 0, 1, 2, 3 };
const char *ApplReportType_descriptions[]  
   { "RESET_APPLSEQNUM_TO_NEW_VALUE_SPECIFIED_IN_APPLNEWSEQNUM", "REPORTS_THAT_THE_LAST_MESSAGE_HAS_BEEN_SENT_FOR_THE_APPLIDS_REFER_TO_REFAPPLLASTSEQNUM", "HEARTBEAT_MESSAGE_INDICATING_THAT_APPLICATION_IDENTIFIED_BY_REFAPPLID", "APPLICATION_MESSAGE_RE_SEND_COMPLETED" };
const int OrderDelayUnit_realm[]  
   { 0, 1, 2, 3, 4, 5, 10, 11, 12, 13, 14, 15 };
const char *OrderDelayUnit_descriptions[]  
   { "SECONDS", "TENTHS_OF_A_SECOND", "HUNDREDTHS_OF_A_SECOND", "MILLISECONDS", "MICROSECONDS", "NANOSECONDS", "MINUTES", "HOURS", "DAYS", "WEEKS", "MONTHS", "YEARS" };
const char VenueType_realm[]  
   { 'E', 'P', 'X' };
const char *VenueType_descriptions[]  
   { "ELECTRONIC", "PIT", "EX_PIT" };
const int RefOrdIDReason_realm[]  
   { 0, 1, 2 };
const char *RefOrdIDReason_descriptions[]  
   { "GTC_FROM_PREVIOUS_DAY", "PARTIAL_FILL_REMAINING", "ORDER_CHANGED" };
const int OrigCustOrderCapacity_realm[]  
   { 1, 2, 3, 4 };
const char *OrigCustOrderCapacity_descriptions[]  
   { "MEMBER_TRADING_FOR_THEIR_OWN_ACCOUNT", "CLEARING_FIRM_TRADING_FOR_ITS_PROPRIETARY_ACCOUNT", "MEMBER_TRADING_FOR_ANOTHER_MEMBER", "ALL_OTHER" };
const int ModelType_realm[]  
   { 0, 1 };
const char *ModelType_descriptions[]  
   { "UTILITY_PROVIDED_STANDARD_MODEL", "PROPRIETARY" };
const int ContractMultiplierUnit_realm[]  
   { 0, 1, 2 };
const char *ContractMultiplierUnit_descriptions[]  
   { "SHARES", "HOURS", "DAYS" };
const int FlowScheduleType_realm[]  
   { 0, 1, 2, 3, 4 };
const char *FlowScheduleType_descriptions[]  
   { "NERC_EASTERN_OFF_PEAK", "NERC_WESTERN_OFF_PEAK", "NERC_CALENDAR_ALL_DAYS_IN_MONTH", "NERC_EASTERN_PEAK", "NERC_WESTERN_PEAK" };
const int RateSource_realm[]  
   { 0, 1, 2, 99 };
const char *RateSource_descriptions[]  
   { "BLOOMBERG", "REUTERS", "TELERATE", "OTHER" };
const int RateSourceType_realm[]  
   { 0, 1 };
const char *RateSourceType_descriptions[]  
   { "PRIMARY", "SECONDARY" };
const f8String RestructuringType_realm[]  
   { "FR", "MM", "MR", "XR" };
const char *RestructuringType_descriptions[]  
   { "FULL_RESTRUCTURING", "MODIFIED_MOD_RESTRUCTURING", "MODIFIED_RESTRUCTURING", "NO_RESTRUCTURING_SPECIFIED" };
const f8String Seniority_realm[]  
   { "SB", "SD", "SR" };
const char *Seniority_descriptions[]  
   { "SUBORDINATED", "SENIOR_SECURED", "SENIOR" };
const int SecurityListType_realm[]  
   { 1, 2, 3, 4 };
const char *SecurityListType_descriptions[]  
   { "INDUSTRY_CLASSIFICATION", "TRADING_LIST", "MARKET", "NEWSPAPER_LIST" };
const int SecurityListTypeSource_realm[]  
   { 1, 2, 3 };
const char *SecurityListTypeSource_descriptions[]  
   { "ICB", "NAICS", "GICS" };
const int NewsCategory_realm[]  
   { 0, 1, 2, 3, 99 };
const char *NewsCategory_descriptions[]  
   { "COMPANY_NEWS", "MARKETPLACE_NEWS", "FINANCIAL_MARKET_NEWS", "TECHNICAL_NEWS", "OTHER_NEWS" };
const int NewsRefType_realm[]  
   { 0, 1, 2 };
const char *NewsRefType_descriptions[]  
   { "REPLACEMENT", "OTHER_LANGUAGE", "COMPLIMENTARY" };
const int StrikePriceDeterminationMethod_realm[]  
   { 1, 2, 3, 4 };
const char *StrikePriceDeterminationMethod_descriptions[]  
   { "FIXED_STRIKE", "STRIKE_SET_AT_EXPIRATION_TO_UNDERLYING_OR_OTHER_VALUE", "STRIKE_SET_TO_AVERAGE_OF_UNDERLYING_SETTLEMENT_PRICE_ACROSS_THE_LIFE_OF_THE_OPTION", "STRIKE_SET_TO_OPTIMAL_VALUE" };
const int StrikePriceBoundaryMethod_realm[]  
   { 1, 2, 3, 4, 5 };
const char *StrikePriceBoundaryMethod_descriptions[]  
   { "LESS_THAN_UNDERLYING_PRICE_IS_IN_THE_MONEY", "LESS_THAN_OR_EQUAL_TO_THE_UNDERLYING_PRICE_IS_IN_THE_MONEY", "EQUAL_TO_THE_UNDERLYING_PRICE_IS_IN_THE_MONEY", "GREATER_THAN_OR_EQUAL_TO_UNDERLYING_PRICE_IS_IN_THE_MONEY", "GREATER_THAN_UNDERLYING_IS_IN_THE_MONEY" };
const int UnderlyingPriceDeterminationMethod_realm[]  
   { 1, 2, 3, 4 };
const char *UnderlyingPriceDeterminationMethod_descriptions[]  
   { "REGULAR", "SPECIAL_REFERENCE", "OPTIMAL_VALUE", "AVERAGE_VALUE" };
const int OptPayoutType_realm[]  
   { 1, 2, 3 };
const char *OptPayoutType_descriptions[]  
   { "VANILLA", "CAPPED", "BINARY" };
const int ComplexEventType_realm[]  
   { 1, 2, 3, 4, 5, 6, 7, 8, 9 };
const char *ComplexEventType_descriptions[]  
   { "CAPPED", "TRIGGER", "KNOCK_IN_UP", "KOCK_IN_DOWN", "KNOCK_OUT_UP", "KNOCK_OUT_DOWN", "UNDERLYING", "RESET_BARRIER", "ROLLING_BARRIER" };
const int ComplexEventPriceBoundaryMethod_realm[]  
   { 1, 2, 3, 4, 5 };
const char *ComplexEventPriceBoundaryMethod_descriptions[]  
   { "LESS_THAN_COMPLEXEVENTPRICE", "LESS_THAN_OR_EQUAL_TO_COMPLEXEVENTPRICE", "EQUAL_TO_COMPLEXEVENTPRICE", "GREATER_THAN_OR_EQUAL_TO_COMPLEXEVENTPRICE", "GREATER_THAN_COMPLEXEVENTPRICE" };
const int ComplexEventPriceTimeType_realm[]  
   { 1, 2, 3 };
const char *ComplexEventPriceTimeType_descriptions[]  
   { "EXPIRATION", "IMMEDIATE", "SPECIFIED_DATE_TIME" };
const int ComplexEventCondition_realm[]  
   { 1, 2 };
const char *ComplexEventCondition_descriptions[]  
   { "AND", "OR" };
const int StreamAsgnReqType_realm[]  
   { 1, 2 };
const char *StreamAsgnReqType_descriptions[]  
   { "STREAM_ASSIGNMENT_FOR_NEW_CUSTOMER", "STREAM_ASSIGNMENT_FOR_EXISTING_CUSTOMER" };
const int StreamAsgnRejReason_realm[]  
   { 0, 1, 2, 3, 99 };
const char *StreamAsgnRejReason_descriptions[]  
   { "UNKNOWN_CLIENT", "EXCEEDS_MAXIMUM_SIZE", "UNKNOWN_OR_INVALID_CURRENCY_PAIR", "NO_AVAILABLE_STREAM", "OTHER" };
const int StreamAsgnAckType_realm[]  
   { 0, 1 };
const char *StreamAsgnAckType_descriptions[]  
   { "ASSIGNMENT_ACCEPTED", "ASSIGNMENT_REJECTED" };
const int PartyListResponseType_realm[]  
   { 0, 1, 2, 3 };
const char *PartyListResponseType_descriptions[]  
   { "RETURN_ALL_AVAILABLE_INFORMATION_ON_PARTIES_AND_RELATED_PARTIES", "RETURN_ONLY_PARTY_INFORMATION", "INCLUDE_INFORMATION_ON_RELATED_PARTIES", "INCLUDE_RISK_LIMIT_INFORMATION" };
const int PartyDetailsRequestResult_realm[]  
   { 0, 1, 2, 3, 4, 5, 6, 99 };
const char *PartyDetailsRequestResult_descriptions[]  
   { "VALID_REQUEST", "INVALID_OR_UNSUPPORTED_REQUEST", "NO_PARTIES_OR_PARTY_DETAILS_FOUND_THAT_MATCH_SELECTION_CRITERIA", "UNSUPPORTED_PARTYLISTRESPONSETYPE", "NOT_AUTHORIZED_TO_RETRIEVE_PARTIES_OR_PARTY_DETAILS_DATA", "PARTIES_OR_PARTY_DETAILS_DATA_TEMPORARILY_UNAVAILABLE", "REQUEST_FOR_PARTIES_DATA_NOT_SUPPORTED", "OTHER" };
const int PartyRelationship_realm[]  
   { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36 };
const char *PartyRelationship_descriptions[]  
   { "IS_ALSO", "CLEARS_FOR", "CLEARS_THROUGH", "TRADES_FOR", "TRADES_THROUGH", "SPONSORS", "SPONSORED_THROUGH", "PROVIDES_GUARANTEE_FOR", "IS_GUARANTEED_BY", "MEMBER_OF", "HAS_MEMBERS", "PROVIDES_MARKETPLACE_FOR", "PARTICIPANT_OF_MARKETPLACE", "CARRIES_POSITIONS_FOR", "POSTS_TRADES_TO", "ENTERS_TRADES_FOR", "ENTERS_TRADES_THROUGH", "PROVIDES_QUOTES_TO", "REQUESTS_QUOTES_FROM", "INVESTS_FOR", "INVESTS_THROUGH", "BROKERS_TRADES_FOR", "BROKERS_TRADES_THROUGH", "PROVIDES_TRADING_SERVICES_FOR", "USES_TRADING_SERVICES_OF", "APPROVES_OF", "APPROVED_BY", "PARENT_FIRM_FOR", "SUBSIDIARY_OF", "REGULATORY_OWNER_OF", "OWNED_BY_30", "CONTROLS", "IS_CONTROLLED_BY", "LEGAL", "OWNED_BY_34", "BENEFICIAL_OWNER_OF", "OWNED_BY_36" };
const int RiskLimitType_realm[]  
   { 1, 2, 3, 4, 5 };
const char *RiskLimitType_descriptions[]  
   { "GROSS_LIMIT", "NET_LIMIT", "EXPOSURE", "LONG_LIMIT", "SHORT_LIMIT" };
const int RiskInstrumentOperator_realm[]  
   { 1, 2 };
const char *RiskInstrumentOperator_descriptions[]  
   { "INCLUDE", "EXCLUDE" };
const int StreamAsgnType_realm[]  
   { 1, 2, 3 };
const char *StreamAsgnType_descriptions[]  
   { "ASSIGNMENT", "REJECTED", "TERMINATE_UNASSIGN" };

//-------------------------------------------------------------------------------------------------
const RealmBase realmbases[] 
{
   { reinterpret_cast<const void *>(AdvSide_realm), RealmBase::dt_set, FieldTrait::ft_char, 4, AdvSide_descriptions },
   { reinterpret_cast<const void *>(AdvTransType_realm), RealmBase::dt_set, FieldTrait::ft_string, 3, AdvTransType_descriptions },
   { reinterpret_cast<const void *>(CommType_realm), RealmBase::dt_set, FieldTrait::ft_char, 6, CommType_descriptions },
   { reinterpret_cast<const void *>(ExecInst_realm), RealmBase::dt_set, FieldTrait::ft_MultipleCharValue, 56, ExecInst_descriptions },
   { reinterpret_cast<const void *>(HandlInst_realm), RealmBase::dt_set, FieldTrait::ft_char, 3, HandlInst_descriptions },
   { reinterpret_cast<const void *>(SecurityIDSource_realm), RealmBase::dt_set, FieldTrait::ft_string, 22, SecurityIDSource_descriptions },
   { reinterpret_cast<const void *>(IOIQltyInd_realm), RealmBase::dt_set, FieldTrait::ft_char, 3, IOIQltyInd_descriptions },
   { reinterpret_cast<const void *>(IOIQty_realm), RealmBase::dt_set, FieldTrait::ft_string, 5, IOIQty_descriptions },
   { reinterpret_cast<const void *>(IOITransType_realm), RealmBase::dt_set, FieldTrait::ft_char, 3, IOITransType_descriptions },
   { reinterpret_cast<const void *>(LastCapacity_realm), RealmBase::dt_set, FieldTrait::ft_char, 4, LastCapacity_descriptions },
   { reinterpret_cast<const void *>(MsgType_realm), RealmBase::dt_set, FieldTrait::ft_string, 118, MsgType_descriptions },
   { reinterpret_cast<const void *>(OrdStatus_realm), RealmBase::dt_set, FieldTrait::ft_char, 15, OrdStatus_descriptions },
   { reinterpret_cast<const void *>(OrdType_realm), RealmBase::dt_set, FieldTrait::ft_char, 24, OrdType_descriptions },
   { reinterpret_cast<const void *>(Side_realm), RealmBase::dt_set, FieldTrait::ft_char, 16, Side_descriptions },
   { reinterpret_cast<const void *>(TimeInForce_realm), RealmBase::dt_set, FieldTrait::ft_char, 10, TimeInForce_descriptions },
   { reinterpret_cast<const void *>(Urgency_realm), RealmBase::dt_set, FieldTrait::ft_char, 3, Urgency_descriptions },
   { reinterpret_cast<const void *>(SettlType_realm), RealmBase::dt_set, FieldTrait::ft_string, 12, SettlType_descriptions },
   { reinterpret_cast<const void *>(SymbolSfx_realm), RealmBase::dt_set, FieldTrait::ft_string, 2, SymbolSfx_descriptions },
   { reinterpret_cast<const void *>(AllocTransType_realm), RealmBase::dt_set, FieldTrait::ft_char, 7, AllocTransType_descriptions },
   { reinterpret_cast<const void *>(PositionEffect_realm), RealmBase::dt_set, FieldTrait::ft_char, 6, PositionEffect_descriptions },
   { reinterpret_cast<const void *>(ProcessCode_realm), RealmBase::dt_set, FieldTrait::ft_char, 7, ProcessCode_descriptions },
   { reinterpret_cast<const void *>(AllocStatus_realm), RealmBase::dt_set, FieldTrait::ft_int, 8, AllocStatus_descriptions },
   { reinterpret_cast<const void *>(AllocRejCode_realm), RealmBase::dt_set, FieldTrait::ft_int, 15, AllocRejCode_descriptions },
   { reinterpret_cast<const void *>(EmailType_realm), RealmBase::dt_set, FieldTrait::ft_char, 3, EmailType_descriptions },
   { reinterpret_cast<const void *>(EncryptMethod_realm), RealmBase::dt_set, FieldTrait::ft_int, 7, EncryptMethod_descriptions },
   { reinterpret_cast<const void *>(CxlRejReason_realm), RealmBase::dt_set, FieldTrait::ft_int, 11, CxlRejReason_descriptions },
   { reinterpret_cast<const void *>(OrdRejReason_realm), RealmBase::dt_set, FieldTrait::ft_int, 19, OrdRejReason_descriptions },
   { reinterpret_cast<const void *>(IOIQualifier_realm), RealmBase::dt_set, FieldTrait::ft_char, 18, IOIQualifier_descriptions },
   { reinterpret_cast<const void *>(ReportToExch_realm), RealmBase::dt_set, FieldTrait::ft_Boolean, 2, ReportToExch_descriptions },
   { reinterpret_cast<const void *>(LocateReqd_realm), RealmBase::dt_set, FieldTrait::ft_Boolean, 2, LocateReqd_descriptions },
   { reinterpret_cast<const void *>(ForexReq_realm), RealmBase::dt_set, FieldTrait::ft_Boolean, 2, ForexReq_descriptions },
   { reinterpret_cast<const void *>(DKReason_realm), RealmBase::dt_set, FieldTrait::ft_char, 7, DKReason_descriptions },
   { reinterpret_cast<const void *>(IOINaturalFlag_realm), RealmBase::dt_set, FieldTrait::ft_Boolean, 2, IOINaturalFlag_descriptions },
   { reinterpret_cast<const void *>(MiscFeeType_realm), RealmBase::dt_set, FieldTrait::ft_string, 14, MiscFeeType_descriptions },
   { reinterpret_cast<const void *>(ExecType_realm), RealmBase::dt_set, FieldTrait::ft_char, 20, ExecType_descriptions },
   { reinterpret_cast<const void *>(SettlCurrFxRateCalc_realm), RealmBase::dt_set, FieldTrait::ft_char, 2, SettlCurrFxRateCalc_descriptions },
   { reinterpret_cast<const void *>(SettlInstMode_realm), RealmBase::dt_set, FieldTrait::ft_char, 6, SettlInstMode_descriptions },
   { reinterpret_cast<const void *>(SettlInstTransType_realm), RealmBase::dt_set, FieldTrait::ft_char, 4, SettlInstTransType_descriptions },
   { reinterpret_cast<const void *>(SettlInstSource_realm), RealmBase::dt_set, FieldTrait::ft_char, 3, SettlInstSource_descriptions },
   { reinterpret_cast<const void *>(SecurityType_realm), RealmBase::dt_set, FieldTrait::ft_string, 118, SecurityType_descriptions },
   { reinterpret_cast<const void *>(StandInstDbType_realm), RealmBase::dt_set, FieldTrait::ft_int, 5, StandInstDbType_descriptions },
   { reinterpret_cast<const void *>(SettlDeliveryType_realm), RealmBase::dt_set, FieldTrait::ft_int, 4, SettlDeliveryType_descriptions },
   { reinterpret_cast<const void *>(AllocLinkType_realm), RealmBase::dt_set, FieldTrait::ft_int, 2, AllocLinkType_descriptions },
   { reinterpret_cast<const void *>(PutOrCall_realm), RealmBase::dt_set, FieldTrait::ft_int, 2, PutOrCall_descriptions },
   { reinterpret_cast<const void *>(CoveredOrUncovered_realm), RealmBase::dt_set, FieldTrait::ft_int, 2, CoveredOrUncovered_descriptions },
   { reinterpret_cast<const void *>(NotifyBrokerOfCredit_realm), RealmBase::dt_set, FieldTrait::ft_Boolean, 2, NotifyBrokerOfCredit_descriptions },
   { reinterpret_cast<const void *>(AllocHandlInst_realm), RealmBase::dt_set, FieldTrait::ft_int, 3, AllocHandlInst_descriptions },
   { reinterpret_cast<const void *>(RoutingType_realm), RealmBase::dt_set, FieldTrait::ft_int, 4, RoutingType_descriptions },
   { reinterpret_cast<const void *>(BenchmarkCurveName_realm), RealmBase::dt_set, FieldTrait::ft_string, 12, BenchmarkCurveName_descriptions },
   { reinterpret_cast<const void *>(StipulationType_realm), RealmBase::dt_set, FieldTrait::ft_string, 80, StipulationType_descriptions },
   { reinterpret_cast<const void *>(YieldType_realm), RealmBase::dt_set, FieldTrait::ft_string, 34, YieldType_descriptions },
   { reinterpret_cast<const void *>(TradedFlatSwitch_realm), RealmBase::dt_set, FieldTrait::ft_Boolean, 2, TradedFlatSwitch_descriptions },
   { reinterpret_cast<const void *>(SubscriptionRequestType_realm), RealmBase::dt_set, FieldTrait::ft_char, 3, SubscriptionRequestType_descriptions },
   { reinterpret_cast<const void *>(MDUpdateType_realm), RealmBase::dt_set, FieldTrait::ft_int, 2, MDUpdateType_descriptions },
   { reinterpret_cast<const void *>(AggregatedBook_realm), RealmBase::dt_set, FieldTrait::ft_Boolean, 2, AggregatedBook_descriptions },
   { reinterpret_cast<const void *>(MDEntryType_realm), RealmBase::dt_set, FieldTrait::ft_char, 36, MDEntryType_descriptions },
   { reinterpret_cast<const void *>(TickDirection_realm), RealmBase::dt_set, FieldTrait::ft_char, 4, TickDirection_descriptions },
   { reinterpret_cast<const void *>(QuoteCondition_realm), RealmBase::dt_set, FieldTrait::ft_MultipleStringValue, 60, QuoteCondition_descriptions },
   { reinterpret_cast<const void *>(TradeCondition_realm), RealmBase::dt_set, FieldTrait::ft_MultipleStringValue, 77, TradeCondition_descriptions },
   { reinterpret_cast<const void *>(MDUpdateAction_realm), RealmBase::dt_set, FieldTrait::ft_char, 6, MDUpdateAction_descriptions },
   { reinterpret_cast<const void *>(MDReqRejReason_realm), RealmBase::dt_set, FieldTrait::ft_char, 14, MDReqRejReason_descriptions },
   { reinterpret_cast<const void *>(DeleteReason_realm), RealmBase::dt_set, FieldTrait::ft_char, 2, DeleteReason_descriptions },
   { reinterpret_cast<const void *>(OpenCloseSettlFlag_realm), RealmBase::dt_set, FieldTrait::ft_MultipleCharValue, 6, OpenCloseSettlFlag_descriptions },
   { reinterpret_cast<const void *>(FinancialStatus_realm), RealmBase::dt_set, FieldTrait::ft_MultipleCharValue, 3, FinancialStatus_descriptions },
   { reinterpret_cast<const void *>(CorporateAction_realm), RealmBase::dt_set, FieldTrait::ft_MultipleCharValue, 23, CorporateAction_descriptions },
   { reinterpret_cast<const void *>(QuoteStatus_realm), RealmBase::dt_set, FieldTrait::ft_int, 21, QuoteStatus_descriptions },
   { reinterpret_cast<const void *>(QuoteCancelType_realm), RealmBase::dt_set, FieldTrait::ft_int, 8, QuoteCancelType_descriptions },
   { reinterpret_cast<const void *>(QuoteRejectReason_realm), RealmBase::dt_set, FieldTrait::ft_int, 14, QuoteRejectReason_descriptions },
   { reinterpret_cast<const void *>(QuoteResponseLevel_realm), RealmBase::dt_set, FieldTrait::ft_int, 4, QuoteResponseLevel_descriptions },
   { reinterpret_cast<const void *>(QuoteRequestType_realm), RealmBase::dt_set, FieldTrait::ft_int, 2, QuoteRequestType_descriptions },
   { reinterpret_cast<const void *>(SecurityRequestType_realm), RealmBase::dt_set, FieldTrait::ft_int, 10, SecurityRequestType_descriptions },
   { reinterpret_cast<const void *>(SecurityResponseType_realm), RealmBase::dt_set, FieldTrait::ft_int, 6, SecurityResponseType_descriptions },
   { reinterpret_cast<const void *>(UnsolicitedIndicator_realm), RealmBase::dt_set, FieldTrait::ft_Boolean, 2, UnsolicitedIndicator_descriptions },
   { reinterpret_cast<const void *>(SecurityTradingStatus_realm), RealmBase::dt_set, FieldTrait::ft_int, 26, SecurityTradingStatus_descriptions },
   { reinterpret_cast<const void *>(HaltReasonInt_realm), RealmBase::dt_set, FieldTrait::ft_int, 6, HaltReasonInt_descriptions },
   { reinterpret_cast<const void *>(InViewOfCommon_realm), RealmBase::dt_set, FieldTrait::ft_Boolean, 2, InViewOfCommon_descriptions },
   { reinterpret_cast<const void *>(DueToRelated_realm), RealmBase::dt_set, FieldTrait::ft_Boolean, 2, DueToRelated_descriptions },
   { reinterpret_cast<const void *>(Adjustment_realm), RealmBase::dt_set, FieldTrait::ft_int, 3, Adjustment_descriptions },
   { reinterpret_cast<const void *>(TradingSessionID_realm), RealmBase::dt_set, FieldTrait::ft_string, 6, TradingSessionID_descriptions },
   { reinterpret_cast<const void *>(TradSesMethod_realm), RealmBase::dt_set, FieldTrait::ft_int, 3, TradSesMethod_descriptions },
   { reinterpret_cast<const void *>(TradSesMode_realm), RealmBase::dt_set, FieldTrait::ft_int, 3, TradSesMode_descriptions },
   { reinterpret_cast<const void *>(TradSesStatus_realm), RealmBase::dt_set, FieldTrait::ft_int, 7, TradSesStatus_descriptions },
   { reinterpret_cast<const void *>(MessageEncoding_realm), RealmBase::dt_set, FieldTrait::ft_string, 4, MessageEncoding_descriptions },
   { reinterpret_cast<const void *>(SessionRejectReason_realm), RealmBase::dt_set, FieldTrait::ft_int, 19, SessionRejectReason_descriptions },
   { reinterpret_cast<const void *>(BidRequestTransType_realm), RealmBase::dt_set, FieldTrait::ft_char, 2, BidRequestTransType_descriptions },
   { reinterpret_cast<const void *>(SolicitedFlag_realm), RealmBase::dt_set, FieldTrait::ft_Boolean, 2, SolicitedFlag_descriptions },
   { reinterpret_cast<const void *>(ExecRestatementReason_realm), RealmBase::dt_set, FieldTrait::ft_int, 13, ExecRestatementReason_descriptions },
   { reinterpret_cast<const void *>(BusinessRejectReason_realm), RealmBase::dt_set, FieldTrait::ft_int, 9, BusinessRejectReason_descriptions },
   { reinterpret_cast<const void *>(MsgDirection_realm), RealmBase::dt_set, FieldTrait::ft_char, 2, MsgDirection_descriptions },
   { reinterpret_cast<const void *>(DiscretionInst_realm), RealmBase::dt_set, FieldTrait::ft_char, 8, DiscretionInst_descriptions },
   { reinterpret_cast<const void *>(BidType_realm), RealmBase::dt_set, FieldTrait::ft_int, 3, BidType_descriptions },
   { reinterpret_cast<const void *>(BidDescriptorType_realm), RealmBase::dt_set, FieldTrait::ft_int, 3, BidDescriptorType_descriptions },
   { reinterpret_cast<const void *>(SideValueInd_realm), RealmBase::dt_set, FieldTrait::ft_int, 2, SideValueInd_descriptions },
   { reinterpret_cast<const void *>(LiquidityIndType_realm), RealmBase::dt_set, FieldTrait::ft_int, 4, LiquidityIndType_descriptions },
   { reinterpret_cast<const void *>(ExchangeForPhysical_realm), RealmBase::dt_set, FieldTrait::ft_Boolean, 2, ExchangeForPhysical_descriptions },
   { reinterpret_cast<const void *>(ProgRptReqs_realm), RealmBase::dt_set, FieldTrait::ft_int, 3, ProgRptReqs_descriptions },
   { reinterpret_cast<const void *>(IncTaxInd_realm), RealmBase::dt_set, FieldTrait::ft_int, 2, IncTaxInd_descriptions },
   { reinterpret_cast<const void *>(BidTradeType_realm), RealmBase::dt_set, FieldTrait::ft_char, 4, BidTradeType_descriptions },
   { reinterpret_cast<const void *>(BasisPxType_realm), RealmBase::dt_set, FieldTrait::ft_char, 13, BasisPxType_descriptions },
   { reinterpret_cast<const void *>(PriceType_realm), RealmBase::dt_set, FieldTrait::ft_int, 18, PriceType_descriptions },
   { reinterpret_cast<const void *>(GTBookingInst_realm), RealmBase::dt_set, FieldTrait::ft_int, 3, GTBookingInst_descriptions },
   { reinterpret_cast<const void *>(ListStatusType_realm), RealmBase::dt_set, FieldTrait::ft_int, 6, ListStatusType_descriptions },
   { reinterpret_cast<const void *>(NetGrossInd_realm), RealmBase::dt_set, FieldTrait::ft_int, 2, NetGrossInd_descriptions },
   { reinterpret_cast<const void *>(ListOrderStatus_realm), RealmBase::dt_set, FieldTrait::ft_int, 7, ListOrderStatus_descriptions },
   { reinterpret_cast<const void *>(ListExecInstType_realm), RealmBase::dt_set, FieldTrait::ft_char, 5, ListExecInstType_descriptions },
   { reinterpret_cast<const void *>(CxlRejResponseTo_realm), RealmBase::dt_set, FieldTrait::ft_char, 2, CxlRejResponseTo_descriptions },
   { reinterpret_cast<const void *>(MultiLegReportingType_realm), RealmBase::dt_set, FieldTrait::ft_char, 3, MultiLegReportingType_descriptions },
   { reinterpret_cast<const void *>(PartyIDSource_realm), RealmBase::dt_set, FieldTrait::ft_char, 18, PartyIDSource_descriptions },
   { reinterpret_cast<const void *>(PartyRole_realm), RealmBase::dt_set, FieldTrait::ft_int, 84, PartyRole_descriptions },
   { reinterpret_cast<const void *>(Product_realm), RealmBase::dt_set, FieldTrait::ft_int, 13, Product_descriptions },
   { reinterpret_cast<const void *>(RoundingDirection_realm), RealmBase::dt_set, FieldTrait::ft_char, 3, RoundingDirection_descriptions },
   { reinterpret_cast<const void *>(DistribPaymentMethod_realm), RealmBase::dt_set, FieldTrait::ft_int, 12, DistribPaymentMethod_descriptions },
   { reinterpret_cast<const void *>(CancellationRights_realm), RealmBase::dt_set, FieldTrait::ft_char, 4, CancellationRights_descriptions },
   { reinterpret_cast<const void *>(MoneyLaunderingStatus_realm), RealmBase::dt_set, FieldTrait::ft_char, 5, MoneyLaunderingStatus_descriptions },
   { reinterpret_cast<const void *>(ExecPriceType_realm), RealmBase::dt_set, FieldTrait::ft_char, 8, ExecPriceType_descriptions },
   { reinterpret_cast<const void *>(TradeReportTransType_realm), RealmBase::dt_set, FieldTrait::ft_int, 6, TradeReportTransType_descriptions },
   { reinterpret_cast<const void *>(PaymentMethod_realm), RealmBase::dt_set, FieldTrait::ft_int, 15, PaymentMethod_descriptions },
   { reinterpret_cast<const void *>(TaxAdvantageType_realm), RealmBase::dt_set, FieldTrait::ft_int, 31, TaxAdvantageType_descriptions },
   { reinterpret_cast<const void *>(FundRenewWaiv_realm), RealmBase::dt_set, FieldTrait::ft_char, 2, FundRenewWaiv_descriptions },
   { reinterpret_cast<const void *>(RegistStatus_realm), RealmBase::dt_set, FieldTrait::ft_char, 4, RegistStatus_descriptions },
   { reinterpret_cast<const void *>(RegistRejReasonCode_realm), RealmBase::dt_set, FieldTrait::ft_int, 19, RegistRejReasonCode_descriptions },
   { reinterpret_cast<const void *>(RegistTransType_realm), RealmBase::dt_set, FieldTrait::ft_char, 3, RegistTransType_descriptions },
   { reinterpret_cast<const void *>(OwnershipType_realm), RealmBase::dt_set, FieldTrait::ft_char, 3, OwnershipType_descriptions },
   { reinterpret_cast<const void *>(ContAmtType_realm), RealmBase::dt_set, FieldTrait::ft_int, 15, ContAmtType_descriptions },
   { reinterpret_cast<const void *>(OwnerType_realm), RealmBase::dt_set, FieldTrait::ft_int, 13, OwnerType_descriptions },
   { reinterpret_cast<const void *>(OrderCapacity_realm), RealmBase::dt_set, FieldTrait::ft_char, 6, OrderCapacity_descriptions },
   { reinterpret_cast<const void *>(OrderRestrictions_realm), RealmBase::dt_set, FieldTrait::ft_MultipleCharValue, 15, OrderRestrictions_descriptions },
   { reinterpret_cast<const void *>(MassCancelRequestType_realm), RealmBase::dt_set, FieldTrait::ft_char, 12, MassCancelRequestType_descriptions },
   { reinterpret_cast<const void *>(MassCancelResponse_realm), RealmBase::dt_set, FieldTrait::ft_char, 13, MassCancelResponse_descriptions },
   { reinterpret_cast<const void *>(MassCancelRejectReason_realm), RealmBase::dt_set, FieldTrait::ft_int, 13, MassCancelRejectReason_descriptions },
   { reinterpret_cast<const void *>(QuoteType_realm), RealmBase::dt_set, FieldTrait::ft_int, 4, QuoteType_descriptions },
   { reinterpret_cast<const void *>(CashMargin_realm), RealmBase::dt_set, FieldTrait::ft_char, 3, CashMargin_descriptions },
   { reinterpret_cast<const void *>(Scope_realm), RealmBase::dt_set, FieldTrait::ft_MultipleCharValue, 3, Scope_descriptions },
   { reinterpret_cast<const void *>(MDImplicitDelete_realm), RealmBase::dt_set, FieldTrait::ft_Boolean, 2, MDImplicitDelete_descriptions },
   { reinterpret_cast<const void *>(CrossType_realm), RealmBase::dt_set, FieldTrait::ft_int, 4, CrossType_descriptions },
   { reinterpret_cast<const void *>(CrossPrioritization_realm), RealmBase::dt_set, FieldTrait::ft_int, 3, CrossPrioritization_descriptions },
   { reinterpret_cast<const void *>(NoSides_realm), RealmBase::dt_set, FieldTrait::ft_NumInGroup, 2, NoSides_descriptions },
   { reinterpret_cast<const void *>(SecurityListRequestType_realm), RealmBase::dt_set, FieldTrait::ft_int, 6, SecurityListRequestType_descriptions },
   { reinterpret_cast<const void *>(SecurityRequestResult_realm), RealmBase::dt_set, FieldTrait::ft_int, 6, SecurityRequestResult_descriptions },
   { reinterpret_cast<const void *>(MultiLegRptTypeReq_realm), RealmBase::dt_set, FieldTrait::ft_int, 3, MultiLegRptTypeReq_descriptions },
   { reinterpret_cast<const void *>(TradSesStatusRejReason_realm), RealmBase::dt_set, FieldTrait::ft_int, 2, TradSesStatusRejReason_descriptions },
   { reinterpret_cast<const void *>(TradeRequestType_realm), RealmBase::dt_set, FieldTrait::ft_int, 5, TradeRequestType_descriptions },
   { reinterpret_cast<const void *>(PreviouslyReported_realm), RealmBase::dt_set, FieldTrait::ft_Boolean, 2, PreviouslyReported_descriptions },
   { reinterpret_cast<const void *>(MatchStatus_realm), RealmBase::dt_set, FieldTrait::ft_char, 3, MatchStatus_descriptions },
   { reinterpret_cast<const void *>(MatchType_realm), RealmBase::dt_set, FieldTrait::ft_string, 26, MatchType_descriptions },
   { reinterpret_cast<const void *>(OddLot_realm), RealmBase::dt_set, FieldTrait::ft_Boolean, 2, OddLot_descriptions },
   { reinterpret_cast<const void *>(ClearingInstruction_realm), RealmBase::dt_set, FieldTrait::ft_int, 14, ClearingInstruction_descriptions },
   { reinterpret_cast<const void *>(AccountType_realm), RealmBase::dt_set, FieldTrait::ft_int, 7, AccountType_descriptions },
   { reinterpret_cast<const void *>(CustOrderCapacity_realm), RealmBase::dt_set, FieldTrait::ft_int, 4, CustOrderCapacity_descriptions },
   { reinterpret_cast<const void *>(MassStatusReqType_realm), RealmBase::dt_set, FieldTrait::ft_int, 10, MassStatusReqType_descriptions },
   { reinterpret_cast<const void *>(DayBookingInst_realm), RealmBase::dt_set, FieldTrait::ft_char, 3, DayBookingInst_descriptions },
   { reinterpret_cast<const void *>(BookingUnit_realm), RealmBase::dt_set, FieldTrait::ft_char, 3, BookingUnit_descriptions },
   { reinterpret_cast<const void *>(PreallocMethod_realm), RealmBase::dt_set, FieldTrait::ft_char, 2, PreallocMethod_descriptions },
   { reinterpret_cast<const void *>(TradingSessionSubID_realm), RealmBase::dt_set, FieldTrait::ft_string, 7, TradingSessionSubID_descriptions },
   { reinterpret_cast<const void *>(AllocType_realm), RealmBase::dt_set, FieldTrait::ft_int, 14, AllocType_descriptions },
   { reinterpret_cast<const void *>(ClearingFeeIndicator_realm), RealmBase::dt_set, FieldTrait::ft_string, 14, ClearingFeeIndicator_descriptions },
   { reinterpret_cast<const void *>(WorkingIndicator_realm), RealmBase::dt_set, FieldTrait::ft_Boolean, 2, WorkingIndicator_descriptions },
   { reinterpret_cast<const void *>(PriorityIndicator_realm), RealmBase::dt_set, FieldTrait::ft_int, 2, PriorityIndicator_descriptions },
   { reinterpret_cast<const void *>(LegalConfirm_realm), RealmBase::dt_set, FieldTrait::ft_Boolean, 2, LegalConfirm_descriptions },
   { reinterpret_cast<const void *>(QuoteRequestRejectReason_realm), RealmBase::dt_set, FieldTrait::ft_int, 12, QuoteRequestRejectReason_descriptions },
   { reinterpret_cast<const void *>(AcctIDSource_realm), RealmBase::dt_set, FieldTrait::ft_int, 6, AcctIDSource_descriptions },
   { reinterpret_cast<const void *>(ConfirmStatus_realm), RealmBase::dt_set, FieldTrait::ft_int, 5, ConfirmStatus_descriptions },
   { reinterpret_cast<const void *>(ConfirmTransType_realm), RealmBase::dt_set, FieldTrait::ft_int, 3, ConfirmTransType_descriptions },
   { reinterpret_cast<const void *>(DeliveryForm_realm), RealmBase::dt_set, FieldTrait::ft_int, 2, DeliveryForm_descriptions },
   { reinterpret_cast<const void *>(LegSwapType_realm), RealmBase::dt_set, FieldTrait::ft_int, 4, LegSwapType_descriptions },
   { reinterpret_cast<const void *>(QuotePriceType_realm), RealmBase::dt_set, FieldTrait::ft_int, 10, QuotePriceType_descriptions },
   { reinterpret_cast<const void *>(QuoteRespType_realm), RealmBase::dt_set, FieldTrait::ft_int, 8, QuoteRespType_descriptions },
   { reinterpret_cast<const void *>(PosType_realm), RealmBase::dt_set, FieldTrait::ft_string, 27, PosType_descriptions },
   { reinterpret_cast<const void *>(PosQtyStatus_realm), RealmBase::dt_set, FieldTrait::ft_int, 3, PosQtyStatus_descriptions },
   { reinterpret_cast<const void *>(PosAmtType_realm), RealmBase::dt_set, FieldTrait::ft_string, 18, PosAmtType_descriptions },
   { reinterpret_cast<const void *>(PosTransType_realm), RealmBase::dt_set, FieldTrait::ft_int, 6, PosTransType_descriptions },
   { reinterpret_cast<const void *>(PosMaintAction_realm), RealmBase::dt_set, FieldTrait::ft_int, 4, PosMaintAction_descriptions },
   { reinterpret_cast<const void *>(SettlSessID_realm), RealmBase::dt_set, FieldTrait::ft_string, 4, SettlSessID_descriptions },
   { reinterpret_cast<const void *>(AdjustmentType_realm), RealmBase::dt_set, FieldTrait::ft_int, 4, AdjustmentType_descriptions },
   { reinterpret_cast<const void *>(PosMaintStatus_realm), RealmBase::dt_set, FieldTrait::ft_int, 5, PosMaintStatus_descriptions },
   { reinterpret_cast<const void *>(PosMaintResult_realm), RealmBase::dt_set, FieldTrait::ft_int, 3, PosMaintResult_descriptions },
   { reinterpret_cast<const void *>(PosReqType_realm), RealmBase::dt_set, FieldTrait::ft_int, 7, PosReqType_descriptions },
   { reinterpret_cast<const void *>(ResponseTransportType_realm), RealmBase::dt_set, FieldTrait::ft_int, 2, ResponseTransportType_descriptions },
   { reinterpret_cast<const void *>(PosReqResult_realm), RealmBase::dt_set, FieldTrait::ft_int, 6, PosReqResult_descriptions },
   { reinterpret_cast<const void *>(PosReqStatus_realm), RealmBase::dt_set, FieldTrait::ft_int, 3, PosReqStatus_descriptions },
   { reinterpret_cast<const void *>(SettlPriceType_realm), RealmBase::dt_set, FieldTrait::ft_int, 2, SettlPriceType_descriptions },
   { reinterpret_cast<const void *>(AssignmentMethod_realm), RealmBase::dt_set, FieldTrait::ft_char, 2, AssignmentMethod_descriptions },
   { reinterpret_cast<const void *>(ExerciseMethod_realm), RealmBase::dt_set, FieldTrait::ft_char, 2, ExerciseMethod_descriptions },
   { reinterpret_cast<const void *>(TradeRequestResult_realm), RealmBase::dt_set, FieldTrait::ft_int, 9, TradeRequestResult_descriptions },
   { reinterpret_cast<const void *>(TradeRequestStatus_realm), RealmBase::dt_set, FieldTrait::ft_int, 3, TradeRequestStatus_descriptions },
   { reinterpret_cast<const void *>(TradeReportRejectReason_realm), RealmBase::dt_set, FieldTrait::ft_int, 6, TradeReportRejectReason_descriptions },
   { reinterpret_cast<const void *>(SideMultiLegReportingType_realm), RealmBase::dt_set, FieldTrait::ft_int, 3, SideMultiLegReportingType_descriptions },
   { reinterpret_cast<const void *>(TrdRegTimestampType_realm), RealmBase::dt_set, FieldTrait::ft_int, 7, TrdRegTimestampType_descriptions },
   { reinterpret_cast<const void *>(ConfirmType_realm), RealmBase::dt_set, FieldTrait::ft_int, 3, ConfirmType_descriptions },
   { reinterpret_cast<const void *>(ConfirmRejReason_realm), RealmBase::dt_set, FieldTrait::ft_int, 3, ConfirmRejReason_descriptions },
   { reinterpret_cast<const void *>(BookingType_realm), RealmBase::dt_set, FieldTrait::ft_int, 3, BookingType_descriptions },
   { reinterpret_cast<const void *>(AllocSettlInstType_realm), RealmBase::dt_set, FieldTrait::ft_int, 5, AllocSettlInstType_descriptions },
   { reinterpret_cast<const void *>(DlvyInstType_realm), RealmBase::dt_set, FieldTrait::ft_char, 2, DlvyInstType_descriptions },
   { reinterpret_cast<const void *>(TerminationType_realm), RealmBase::dt_set, FieldTrait::ft_int, 4, TerminationType_descriptions },
   { reinterpret_cast<const void *>(SettlInstReqRejCode_realm), RealmBase::dt_set, FieldTrait::ft_int, 4, SettlInstReqRejCode_descriptions },
   { reinterpret_cast<const void *>(AllocReportType_realm), RealmBase::dt_set, FieldTrait::ft_int, 10, AllocReportType_descriptions },
   { reinterpret_cast<const void *>(AllocCancReplaceReason_realm), RealmBase::dt_set, FieldTrait::ft_int, 3, AllocCancReplaceReason_descriptions },
   { reinterpret_cast<const void *>(AllocAccountType_realm), RealmBase::dt_set, FieldTrait::ft_int, 7, AllocAccountType_descriptions },
   { reinterpret_cast<const void *>(PartySubIDType_realm), RealmBase::dt_set, FieldTrait::ft_int, 33, PartySubIDType_descriptions },
   { reinterpret_cast<const void *>(AllocIntermedReqType_realm), RealmBase::dt_set, FieldTrait::ft_int, 6, AllocIntermedReqType_descriptions },
   { reinterpret_cast<const void *>(ApplQueueResolution_realm), RealmBase::dt_set, FieldTrait::ft_int, 4, ApplQueueResolution_descriptions },
   { reinterpret_cast<const void *>(ApplQueueAction_realm), RealmBase::dt_set, FieldTrait::ft_int, 4, ApplQueueAction_descriptions },
   { reinterpret_cast<const void *>(AvgPxIndicator_realm), RealmBase::dt_set, FieldTrait::ft_int, 3, AvgPxIndicator_descriptions },
   { reinterpret_cast<const void *>(TradeAllocIndicator_realm), RealmBase::dt_set, FieldTrait::ft_int, 6, TradeAllocIndicator_descriptions },
   { reinterpret_cast<const void *>(ExpirationCycle_realm), RealmBase::dt_set, FieldTrait::ft_int, 3, ExpirationCycle_descriptions },
   { reinterpret_cast<const void *>(TrdType_realm), RealmBase::dt_set, FieldTrait::ft_int, 55, TrdType_descriptions },
   { reinterpret_cast<const void *>(TrdSubType_realm), RealmBase::dt_set, FieldTrait::ft_int, 38, TrdSubType_descriptions },
   { reinterpret_cast<const void *>(PegMoveType_realm), RealmBase::dt_set, FieldTrait::ft_int, 2, PegMoveType_descriptions },
   { reinterpret_cast<const void *>(PegOffsetType_realm), RealmBase::dt_set, FieldTrait::ft_int, 4, PegOffsetType_descriptions },
   { reinterpret_cast<const void *>(PegLimitType_realm), RealmBase::dt_set, FieldTrait::ft_int, 3, PegLimitType_descriptions },
   { reinterpret_cast<const void *>(PegRoundDirection_realm), RealmBase::dt_set, FieldTrait::ft_int, 2, PegRoundDirection_descriptions },
   { reinterpret_cast<const void *>(PegScope_realm), RealmBase::dt_set, FieldTrait::ft_int, 4, PegScope_descriptions },
   { reinterpret_cast<const void *>(DiscretionMoveType_realm), RealmBase::dt_set, FieldTrait::ft_int, 2, DiscretionMoveType_descriptions },
   { reinterpret_cast<const void *>(DiscretionOffsetType_realm), RealmBase::dt_set, FieldTrait::ft_int, 4, DiscretionOffsetType_descriptions },
   { reinterpret_cast<const void *>(DiscretionLimitType_realm), RealmBase::dt_set, FieldTrait::ft_int, 3, DiscretionLimitType_descriptions },
   { reinterpret_cast<const void *>(DiscretionRoundDirection_realm), RealmBase::dt_set, FieldTrait::ft_int, 2, DiscretionRoundDirection_descriptions },
   { reinterpret_cast<const void *>(DiscretionScope_realm), RealmBase::dt_set, FieldTrait::ft_int, 4, DiscretionScope_descriptions },
   { reinterpret_cast<const void *>(TargetStrategy_realm), RealmBase::dt_set, FieldTrait::ft_int, 3, TargetStrategy_descriptions },
   { reinterpret_cast<const void *>(LastLiquidityInd_realm), RealmBase::dt_set, FieldTrait::ft_int, 4, LastLiquidityInd_descriptions },
   { reinterpret_cast<const void *>(PublishTrdIndicator_realm), RealmBase::dt_set, FieldTrait::ft_Boolean, 2, PublishTrdIndicator_descriptions },
   { reinterpret_cast<const void *>(ShortSaleReason_realm), RealmBase::dt_set, FieldTrait::ft_int, 6, ShortSaleReason_descriptions },
   { reinterpret_cast<const void *>(QtyType_realm), RealmBase::dt_set, FieldTrait::ft_int, 3, QtyType_descriptions },
   { reinterpret_cast<const void *>(TradeReportType_realm), RealmBase::dt_set, FieldTrait::ft_int, 16, TradeReportType_descriptions },
   { reinterpret_cast<const void *>(AllocNoOrdersType_realm), RealmBase::dt_set, FieldTrait::ft_int, 2, AllocNoOrdersType_descriptions },
   { reinterpret_cast<const void *>(EventType_realm), RealmBase::dt_set, FieldTrait::ft_int, 20, EventType_descriptions },
   { reinterpret_cast<const void *>(InstrAttribType_realm), RealmBase::dt_set, FieldTrait::ft_int, 30, InstrAttribType_descriptions },
   { reinterpret_cast<const void *>(CPProgram_realm), RealmBase::dt_set, FieldTrait::ft_int, 3, CPProgram_descriptions },
   { reinterpret_cast<const void *>(MiscFeeBasis_realm), RealmBase::dt_set, FieldTrait::ft_int, 3, MiscFeeBasis_descriptions },
   { reinterpret_cast<const void *>(LastFragment_realm), RealmBase::dt_set, FieldTrait::ft_Boolean, 2, LastFragment_descriptions },
   { reinterpret_cast<const void *>(CollAsgnReason_realm), RealmBase::dt_set, FieldTrait::ft_int, 8, CollAsgnReason_descriptions },
   { reinterpret_cast<const void *>(CollInquiryQualifier_realm), RealmBase::dt_set, FieldTrait::ft_int, 8, CollInquiryQualifier_descriptions },
   { reinterpret_cast<const void *>(CollAsgnTransType_realm), RealmBase::dt_set, FieldTrait::ft_int, 5, CollAsgnTransType_descriptions },
   { reinterpret_cast<const void *>(CollAsgnRespType_realm), RealmBase::dt_set, FieldTrait::ft_int, 4, CollAsgnRespType_descriptions },
   { reinterpret_cast<const void *>(CollAsgnRejectReason_realm), RealmBase::dt_set, FieldTrait::ft_int, 7, CollAsgnRejectReason_descriptions },
   { reinterpret_cast<const void *>(CollStatus_realm), RealmBase::dt_set, FieldTrait::ft_int, 5, CollStatus_descriptions },
   { reinterpret_cast<const void *>(LastRptRequested_realm), RealmBase::dt_set, FieldTrait::ft_Boolean, 2, LastRptRequested_descriptions },
   { reinterpret_cast<const void *>(DeliveryType_realm), RealmBase::dt_set, FieldTrait::ft_int, 4, DeliveryType_descriptions },
   { reinterpret_cast<const void *>(UserRequestType_realm), RealmBase::dt_set, FieldTrait::ft_int, 4, UserRequestType_descriptions },
   { reinterpret_cast<const void *>(UserStatus_realm), RealmBase::dt_set, FieldTrait::ft_int, 8, UserStatus_descriptions },
   { reinterpret_cast<const void *>(StatusValue_realm), RealmBase::dt_set, FieldTrait::ft_int, 4, StatusValue_descriptions },
   { reinterpret_cast<const void *>(NetworkRequestType_realm), RealmBase::dt_set, FieldTrait::ft_int, 4, NetworkRequestType_descriptions },
   { reinterpret_cast<const void *>(NetworkStatusResponseType_realm), RealmBase::dt_set, FieldTrait::ft_int, 2, NetworkStatusResponseType_descriptions },
   { reinterpret_cast<const void *>(TrdRptStatus_realm), RealmBase::dt_set, FieldTrait::ft_int, 3, TrdRptStatus_descriptions },
   { reinterpret_cast<const void *>(AffirmStatus_realm), RealmBase::dt_set, FieldTrait::ft_int, 3, AffirmStatus_descriptions },
   { reinterpret_cast<const void *>(CollAction_realm), RealmBase::dt_set, FieldTrait::ft_int, 3, CollAction_descriptions },
   { reinterpret_cast<const void *>(CollInquiryStatus_realm), RealmBase::dt_set, FieldTrait::ft_int, 5, CollInquiryStatus_descriptions },
   { reinterpret_cast<const void *>(CollInquiryResult_realm), RealmBase::dt_set, FieldTrait::ft_int, 11, CollInquiryResult_descriptions },
   { reinterpret_cast<const void *>(StrategyParameterType_realm), RealmBase::dt_set, FieldTrait::ft_int, 29, StrategyParameterType_descriptions },
   { reinterpret_cast<const void *>(SecurityStatusID_realm), RealmBase::dt_set, FieldTrait::ft_string, 2, SecurityStatusID_descriptions },
   { reinterpret_cast<const void *>(UnderlyingCashType_realm), RealmBase::dt_set, FieldTrait::ft_string, 2, UnderlyingCashType_descriptions },
   { reinterpret_cast<const void *>(UnderlyingSettlementType_realm), RealmBase::dt_set, FieldTrait::ft_int, 3, UnderlyingSettlementType_descriptions },
   { reinterpret_cast<const void *>(SecurityUpdateAction_realm), RealmBase::dt_set, FieldTrait::ft_char, 3, SecurityUpdateAction_descriptions },
   { reinterpret_cast<const void *>(ExpirationQtyType_realm), RealmBase::dt_set, FieldTrait::ft_int, 5, ExpirationQtyType_descriptions },
   { reinterpret_cast<const void *>(IndividualAllocType_realm), RealmBase::dt_set, FieldTrait::ft_int, 2, IndividualAllocType_descriptions },
   { reinterpret_cast<const void *>(UnitOfMeasure_realm), RealmBase::dt_set, FieldTrait::ft_string, 13, UnitOfMeasure_descriptions },
   { reinterpret_cast<const void *>(TimeUnit_realm), RealmBase::dt_set, FieldTrait::ft_string, 7, TimeUnit_descriptions },
   { reinterpret_cast<const void *>(AllocMethod_realm), RealmBase::dt_set, FieldTrait::ft_int, 3, AllocMethod_descriptions },
   { reinterpret_cast<const void *>(AsOfIndicator_realm), RealmBase::dt_set, FieldTrait::ft_char, 2, AsOfIndicator_descriptions },
   { reinterpret_cast<const void *>(MDBookType_realm), RealmBase::dt_set, FieldTrait::ft_int, 3, MDBookType_descriptions },
   { reinterpret_cast<const void *>(MDOriginType_realm), RealmBase::dt_set, FieldTrait::ft_int, 3, MDOriginType_descriptions },
   { reinterpret_cast<const void *>(CustOrderHandlingInst_realm), RealmBase::dt_set, FieldTrait::ft_MultipleStringValue, 24, CustOrderHandlingInst_descriptions },
   { reinterpret_cast<const void *>(OrderHandlingInstSource_realm), RealmBase::dt_set, FieldTrait::ft_int, 1, OrderHandlingInstSource_descriptions },
   { reinterpret_cast<const void *>(DeskType_realm), RealmBase::dt_set, FieldTrait::ft_string, 11, DeskType_descriptions },
   { reinterpret_cast<const void *>(DeskTypeSource_realm), RealmBase::dt_set, FieldTrait::ft_int, 1, DeskTypeSource_descriptions },
   { reinterpret_cast<const void *>(DeskOrderHandlingInst_realm), RealmBase::dt_set, FieldTrait::ft_MultipleStringValue, 24, DeskOrderHandlingInst_descriptions },
   { reinterpret_cast<const void *>(ExecAckStatus_realm), RealmBase::dt_set, FieldTrait::ft_char, 3, ExecAckStatus_descriptions },
   { reinterpret_cast<const void *>(CollApplType_realm), RealmBase::dt_set, FieldTrait::ft_int, 2, CollApplType_descriptions },
   { reinterpret_cast<const void *>(UnderlyingFXRateCalc_realm), RealmBase::dt_set, FieldTrait::ft_char, 2, UnderlyingFXRateCalc_descriptions },
   { reinterpret_cast<const void *>(AllocPositionEffect_realm), RealmBase::dt_set, FieldTrait::ft_char, 4, AllocPositionEffect_descriptions },
   { reinterpret_cast<const void *>(DealingCapacity_realm), RealmBase::dt_set, FieldTrait::ft_char, 3, DealingCapacity_descriptions },
   { reinterpret_cast<const void *>(AggressorIndicator_realm), RealmBase::dt_set, FieldTrait::ft_Boolean, 2, AggressorIndicator_descriptions },
   { reinterpret_cast<const void *>(MDQuoteType_realm), RealmBase::dt_set, FieldTrait::ft_int, 5, MDQuoteType_descriptions },
   { reinterpret_cast<const void *>(RefOrderIDSource_realm), RealmBase::dt_set, FieldTrait::ft_char, 5, RefOrderIDSource_descriptions },
   { reinterpret_cast<const void *>(DisplayWhen_realm), RealmBase::dt_set, FieldTrait::ft_char, 2, DisplayWhen_descriptions },
   { reinterpret_cast<const void *>(DisplayMethod_realm), RealmBase::dt_set, FieldTrait::ft_char, 4, DisplayMethod_descriptions },
   { reinterpret_cast<const void *>(PriceProtectionScope_realm), RealmBase::dt_set, FieldTrait::ft_char, 4, PriceProtectionScope_descriptions },
   { reinterpret_cast<const void *>(LotType_realm), RealmBase::dt_set, FieldTrait::ft_char, 4, LotType_descriptions },
   { reinterpret_cast<const void *>(PegPriceType_realm), RealmBase::dt_set, FieldTrait::ft_int, 8, PegPriceType_descriptions },
   { reinterpret_cast<const void *>(TriggerType_realm), RealmBase::dt_set, FieldTrait::ft_char, 4, TriggerType_descriptions },
   { reinterpret_cast<const void *>(TriggerAction_realm), RealmBase::dt_set, FieldTrait::ft_char, 3, TriggerAction_descriptions },
   { reinterpret_cast<const void *>(TriggerPriceType_realm), RealmBase::dt_set, FieldTrait::ft_char, 6, TriggerPriceType_descriptions },
   { reinterpret_cast<const void *>(TriggerPriceTypeScope_realm), RealmBase::dt_set, FieldTrait::ft_char, 4, TriggerPriceTypeScope_descriptions },
   { reinterpret_cast<const void *>(TriggerPriceDirection_realm), RealmBase::dt_set, FieldTrait::ft_char, 2, TriggerPriceDirection_descriptions },
   { reinterpret_cast<const void *>(TriggerOrderType_realm), RealmBase::dt_set, FieldTrait::ft_char, 2, TriggerOrderType_descriptions },
   { reinterpret_cast<const void *>(OrderCategory_realm), RealmBase::dt_set, FieldTrait::ft_char, 9, OrderCategory_descriptions },
   { reinterpret_cast<const void *>(TradeHandlingInstr_realm), RealmBase::dt_set, FieldTrait::ft_char, 6, TradeHandlingInstr_descriptions },
   { reinterpret_cast<const void *>(ApplVerID_realm), RealmBase::dt_set, FieldTrait::ft_string, 10, ApplVerID_descriptions },
   { reinterpret_cast<const void *>(ExDestinationIDSource_realm), RealmBase::dt_set, FieldTrait::ft_char, 5, ExDestinationIDSource_descriptions },
   { reinterpret_cast<const void *>(DefaultApplVerID_realm), RealmBase::dt_set, FieldTrait::ft_string, 10, DefaultApplVerID_descriptions },
   { reinterpret_cast<const void *>(ImpliedMarketIndicator_realm), RealmBase::dt_set, FieldTrait::ft_int, 4, ImpliedMarketIndicator_descriptions },
   { reinterpret_cast<const void *>(SettlObligMode_realm), RealmBase::dt_set, FieldTrait::ft_int, 2, SettlObligMode_descriptions },
   { reinterpret_cast<const void *>(SettlObligTransType_realm), RealmBase::dt_set, FieldTrait::ft_char, 4, SettlObligTransType_descriptions },
   { reinterpret_cast<const void *>(SettlObligSource_realm), RealmBase::dt_set, FieldTrait::ft_char, 3, SettlObligSource_descriptions },
   { reinterpret_cast<const void *>(QuoteEntryStatus_realm), RealmBase::dt_set, FieldTrait::ft_int, 9, QuoteEntryStatus_descriptions },
   { reinterpret_cast<const void *>(RespondentType_realm), RealmBase::dt_set, FieldTrait::ft_int, 4, RespondentType_descriptions },
   { reinterpret_cast<const void *>(SecurityTradingEvent_realm), RealmBase::dt_set, FieldTrait::ft_int, 8, SecurityTradingEvent_descriptions },
   { reinterpret_cast<const void *>(StatsType_realm), RealmBase::dt_set, FieldTrait::ft_int, 4, StatsType_descriptions },
   { reinterpret_cast<const void *>(MDSecSizeType_realm), RealmBase::dt_set, FieldTrait::ft_int, 1, MDSecSizeType_descriptions },
   { reinterpret_cast<const void *>(SettlMethod_realm), RealmBase::dt_set, FieldTrait::ft_char, 2, SettlMethod_descriptions },
   { reinterpret_cast<const void *>(ExerciseStyle_realm), RealmBase::dt_set, FieldTrait::ft_int, 3, ExerciseStyle_descriptions },
   { reinterpret_cast<const void *>(PriceQuoteMethod_realm), RealmBase::dt_set, FieldTrait::ft_string, 4, PriceQuoteMethod_descriptions },
   { reinterpret_cast<const void *>(ValuationMethod_realm), RealmBase::dt_set, FieldTrait::ft_string, 5, ValuationMethod_descriptions },
   { reinterpret_cast<const void *>(ListMethod_realm), RealmBase::dt_set, FieldTrait::ft_int, 2, ListMethod_descriptions },
   { reinterpret_cast<const void *>(TickRuleType_realm), RealmBase::dt_set, FieldTrait::ft_int, 5, TickRuleType_descriptions },
   { reinterpret_cast<const void *>(MaturityMonthYearIncrementUnits_realm), RealmBase::dt_set, FieldTrait::ft_int, 4, MaturityMonthYearIncrementUnits_descriptions },
   { reinterpret_cast<const void *>(MaturityMonthYearFormat_realm), RealmBase::dt_set, FieldTrait::ft_int, 3, MaturityMonthYearFormat_descriptions },
   { reinterpret_cast<const void *>(PriceLimitType_realm), RealmBase::dt_set, FieldTrait::ft_int, 3, PriceLimitType_descriptions },
   { reinterpret_cast<const void *>(ApplReqType_realm), RealmBase::dt_set, FieldTrait::ft_int, 7, ApplReqType_descriptions },
   { reinterpret_cast<const void *>(ApplResponseType_realm), RealmBase::dt_set, FieldTrait::ft_int, 3, ApplResponseType_descriptions },
   { reinterpret_cast<const void *>(ApplResponseError_realm), RealmBase::dt_set, FieldTrait::ft_int, 3, ApplResponseError_descriptions },
   { reinterpret_cast<const void *>(TradSesEvent_realm), RealmBase::dt_set, FieldTrait::ft_int, 4, TradSesEvent_descriptions },
   { reinterpret_cast<const void *>(MassActionType_realm), RealmBase::dt_set, FieldTrait::ft_int, 3, MassActionType_descriptions },
   { reinterpret_cast<const void *>(MassActionScope_realm), RealmBase::dt_set, FieldTrait::ft_int, 12, MassActionScope_descriptions },
   { reinterpret_cast<const void *>(MassActionResponse_realm), RealmBase::dt_set, FieldTrait::ft_int, 2, MassActionResponse_descriptions },
   { reinterpret_cast<const void *>(MassActionRejectReason_realm), RealmBase::dt_set, FieldTrait::ft_int, 13, MassActionRejectReason_descriptions },
   { reinterpret_cast<const void *>(MultilegModel_realm), RealmBase::dt_set, FieldTrait::ft_int, 3, MultilegModel_descriptions },
   { reinterpret_cast<const void *>(MultilegPriceMethod_realm), RealmBase::dt_set, FieldTrait::ft_int, 6, MultilegPriceMethod_descriptions },
   { reinterpret_cast<const void *>(ContingencyType_realm), RealmBase::dt_set, FieldTrait::ft_int, 4, ContingencyType_descriptions },
   { reinterpret_cast<const void *>(ListRejectReason_realm), RealmBase::dt_set, FieldTrait::ft_int, 7, ListRejectReason_descriptions },
   { reinterpret_cast<const void *>(TradePublishIndicator_realm), RealmBase::dt_set, FieldTrait::ft_int, 3, TradePublishIndicator_descriptions },
   { reinterpret_cast<const void *>(MarketUpdateAction_realm), RealmBase::dt_set, FieldTrait::ft_char, 3, MarketUpdateAction_descriptions },
   { reinterpret_cast<const void *>(ApplReportType_realm), RealmBase::dt_set, FieldTrait::ft_int, 4, ApplReportType_descriptions },
   { reinterpret_cast<const void *>(OrderDelayUnit_realm), RealmBase::dt_set, FieldTrait::ft_int, 12, OrderDelayUnit_descriptions },
   { reinterpret_cast<const void *>(VenueType_realm), RealmBase::dt_set, FieldTrait::ft_char, 3, VenueType_descriptions },
   { reinterpret_cast<const void *>(RefOrdIDReason_realm), RealmBase::dt_set, FieldTrait::ft_int, 3, RefOrdIDReason_descriptions },
   { reinterpret_cast<const void *>(OrigCustOrderCapacity_realm), RealmBase::dt_set, FieldTrait::ft_int, 4, OrigCustOrderCapacity_descriptions },
   { reinterpret_cast<const void *>(ModelType_realm), RealmBase::dt_set, FieldTrait::ft_int, 2, ModelType_descriptions },
   { reinterpret_cast<const void *>(ContractMultiplierUnit_realm), RealmBase::dt_set, FieldTrait::ft_int, 3, ContractMultiplierUnit_descriptions },
   { reinterpret_cast<const void *>(FlowScheduleType_realm), RealmBase::dt_set, FieldTrait::ft_int, 5, FlowScheduleType_descriptions },
   { reinterpret_cast<const void *>(RateSource_realm), RealmBase::dt_set, FieldTrait::ft_int, 4, RateSource_descriptions },
   { reinterpret_cast<const void *>(RateSourceType_realm), RealmBase::dt_set, FieldTrait::ft_int, 2, RateSourceType_descriptions },
   { reinterpret_cast<const void *>(RestructuringType_realm), RealmBase::dt_set, FieldTrait::ft_string, 4, RestructuringType_descriptions },
   { reinterpret_cast<const void *>(Seniority_realm), RealmBase::dt_set, FieldTrait::ft_string, 3, Seniority_descriptions },
   { reinterpret_cast<const void *>(SecurityListType_realm), RealmBase::dt_set, FieldTrait::ft_int, 4, SecurityListType_descriptions },
   { reinterpret_cast<const void *>(SecurityListTypeSource_realm), RealmBase::dt_set, FieldTrait::ft_int, 3, SecurityListTypeSource_descriptions },
   { reinterpret_cast<const void *>(NewsCategory_realm), RealmBase::dt_set, FieldTrait::ft_int, 5, NewsCategory_descriptions },
   { reinterpret_cast<const void *>(NewsRefType_realm), RealmBase::dt_set, FieldTrait::ft_int, 3, NewsRefType_descriptions },
   { reinterpret_cast<const void *>(StrikePriceDeterminationMethod_realm), RealmBase::dt_set, FieldTrait::ft_int, 4, StrikePriceDeterminationMethod_descriptions },
   { reinterpret_cast<const void *>(StrikePriceBoundaryMethod_realm), RealmBase::dt_set, FieldTrait::ft_int, 5, StrikePriceBoundaryMethod_descriptions },
   { reinterpret_cast<const void *>(UnderlyingPriceDeterminationMethod_realm), RealmBase::dt_set, FieldTrait::ft_int, 4, UnderlyingPriceDeterminationMethod_descriptions },
   { reinterpret_cast<const void *>(OptPayoutType_realm), RealmBase::dt_set, FieldTrait::ft_int, 3, OptPayoutType_descriptions },
   { reinterpret_cast<const void *>(ComplexEventType_realm), RealmBase::dt_set, FieldTrait::ft_int, 9, ComplexEventType_descriptions },
   { reinterpret_cast<const void *>(ComplexEventPriceBoundaryMethod_realm), RealmBase::dt_set, FieldTrait::ft_int, 5, ComplexEventPriceBoundaryMethod_descriptions },
   { reinterpret_cast<const void *>(ComplexEventPriceTimeType_realm), RealmBase::dt_set, FieldTrait::ft_int, 3, ComplexEventPriceTimeType_descriptions },
   { reinterpret_cast<const void *>(ComplexEventCondition_realm), RealmBase::dt_set, FieldTrait::ft_int, 2, ComplexEventCondition_descriptions },
   { reinterpret_cast<const void *>(StreamAsgnReqType_realm), RealmBase::dt_set, FieldTrait::ft_int, 2, StreamAsgnReqType_descriptions },
   { reinterpret_cast<const void *>(StreamAsgnRejReason_realm), RealmBase::dt_set, FieldTrait::ft_int, 5, StreamAsgnRejReason_descriptions },
   { reinterpret_cast<const void *>(StreamAsgnAckType_realm), RealmBase::dt_set, FieldTrait::ft_int, 2, StreamAsgnAckType_descriptions },
   { reinterpret_cast<const void *>(PartyListResponseType_realm), RealmBase::dt_set, FieldTrait::ft_int, 4, PartyListResponseType_descriptions },
   { reinterpret_cast<const void *>(PartyDetailsRequestResult_realm), RealmBase::dt_set, FieldTrait::ft_int, 8, PartyDetailsRequestResult_descriptions },
   { reinterpret_cast<const void *>(PartyRelationship_realm), RealmBase::dt_set, FieldTrait::ft_int, 37, PartyRelationship_descriptions },
   { reinterpret_cast<const void *>(RiskLimitType_realm), RealmBase::dt_set, FieldTrait::ft_int, 5, RiskLimitType_descriptions },
   { reinterpret_cast<const void *>(RiskInstrumentOperator_realm), RealmBase::dt_set, FieldTrait::ft_int, 2, RiskInstrumentOperator_descriptions },
   { reinterpret_cast<const void *>(StreamAsgnType_realm), RealmBase::dt_set, FieldTrait::ft_int, 3, StreamAsgnType_descriptions },
};

//-------------------------------------------------------------------------------------------------

} // namespace

//-------------------------------------------------------------------------------------------------
extern const Myfix_BaseEntry::Pair fldpairs[];
const Myfix_BaseEntry::Pair fldpairs[] 
{
   { 1, { Type2Type<TEX::Account>(), "Account", 1 } },
   { 2, { Type2Type<TEX::AdvId>(), "AdvId", 2 } },
   { 3, { Type2Type<TEX::AdvRefID>(), "AdvRefID", 3 } },
   { 4, { Type2Type<TEX::AdvSide, char>(), "AdvSide", 4, &TEX::realmbases[0] } },
   { 5, { Type2Type<TEX::AdvTransType, f8String>(), "AdvTransType", 5, &TEX::realmbases[1] } },
   { 6, { Type2Type<TEX::AvgPx>(), "AvgPx", 6 } },
   { 7, { Type2Type<TEX::BeginSeqNo>(), "BeginSeqNo", 7 } },
   { 8, { Type2Type<TEX::BeginString>(), "BeginString", 8 } },
   { 9, { Type2Type<TEX::BodyLength>(), "BodyLength", 9 } },
   { 10, { Type2Type<TEX::CheckSum>(), "CheckSum", 10 } },
   { 11, { Type2Type<TEX::ClOrdID>(), "ClOrdID", 11 } },
   { 12, { Type2Type<TEX::Commission>(), "Commission", 12 } },
   { 13, { Type2Type<TEX::CommType, char>(), "CommType", 13, &TEX::realmbases[2] } },
   { 14, { Type2Type<TEX::CumQty>(), "CumQty", 14 } },
   { 15, { Type2Type<TEX::Currency>(), "Currency", 15 } },
   { 16, { Type2Type<TEX::EndSeqNo>(), "EndSeqNo", 16 } },
   { 17, { Type2Type<TEX::ExecID>(), "ExecID", 17 } },
   { 18, { Type2Type<TEX::ExecInst, f8String>(), "ExecInst", 18, &TEX::realmbases[3] } },
   { 19, { Type2Type<TEX::ExecRefID>(), "ExecRefID", 19 } },
   { 21, { Type2Type<TEX::HandlInst, char>(), "HandlInst", 21, &TEX::realmbases[4] } },
   { 22, { Type2Type<TEX::SecurityIDSource, f8String>(), "SecurityIDSource", 22, &TEX::realmbases[5] } },
   { 23, { Type2Type<TEX::IOIID>(), "IOIID", 23 } },
   { 25, { Type2Type<TEX::IOIQltyInd, char>(), "IOIQltyInd", 25, &TEX::realmbases[6] } },
   { 26, { Type2Type<TEX::IOIRefID>(), "IOIRefID", 26 } },
   { 27, { Type2Type<TEX::IOIQty, f8String>(), "IOIQty", 27, &TEX::realmbases[7] } },
   { 28, { Type2Type<TEX::IOITransType, char>(), "IOITransType", 28, &TEX::realmbases[8] } },
   { 29, { Type2Type<TEX::LastCapacity, char>(), "LastCapacity", 29, &TEX::realmbases[9] } },
   { 30, { Type2Type<TEX::LastMkt>(), "LastMkt", 30 } },
   { 31, { Type2Type<TEX::LastPx>(), "LastPx", 31 } },
   { 32, { Type2Type<TEX::LastQty>(), "LastQty", 32 } },
   { 33, { Type2Type<TEX::NoLinesOfText>(), "NoLinesOfText", 33 } },
   { 34, { Type2Type<TEX::MsgSeqNum>(), "MsgSeqNum", 34 } },
   { 35, { Type2Type<TEX::MsgType, f8String>(), "MsgType", 35, &TEX::realmbases[10] } },
   { 36, { Type2Type<TEX::NewSeqNo>(), "NewSeqNo", 36 } },
   { 37, { Type2Type<TEX::OrderID>(), "OrderID", 37 } },
   { 38, { Type2Type<TEX::OrderQty>(), "OrderQty", 38 } },
   { 39, { Type2Type<TEX::OrdStatus, char>(), "OrdStatus", 39, &TEX::realmbases[11] } },
   { 40, { Type2Type<TEX::OrdType, char>(), "OrdType", 40, &TEX::realmbases[12] } },
   { 41, { Type2Type<TEX::OrigClOrdID>(), "OrigClOrdID", 41 } },
   { 42, { Type2Type<TEX::OrigTime>(), "OrigTime", 42 } },
   { 43, { Type2Type<TEX::PossDupFlag>(), "PossDupFlag", 43 } },
   { 44, { Type2Type<TEX::Price>(), "Price", 44 } },
   { 45, { Type2Type<TEX::RefSeqNum>(), "RefSeqNum", 45 } },
   { 48, { Type2Type<TEX::SecurityID>(), "SecurityID", 48 } },
   { 49, { Type2Type<TEX::SenderCompID>(), "SenderCompID", 49 } },
   { 50, { Type2Type<TEX::SenderSubID>(), "SenderSubID", 50 } },
   { 52, { Type2Type<TEX::SendingTime>(), "SendingTime", 52 } },
   { 53, { Type2Type<TEX::Quantity>(), "Quantity", 53 } },
   { 54, { Type2Type<TEX::Side, char>(), "Side", 54, &TEX::realmbases[13] } },
   { 55, { Type2Type<TEX::Symbol>(), "Symbol", 55 } },
   { 56, { Type2Type<TEX::TargetCompID>(), "TargetCompID", 56 } },
   { 57, { Type2Type<TEX::TargetSubID>(), "TargetSubID", 57 } },
   { 58, { Type2Type<TEX::Text>(), "Text", 58 } },
   { 59, { Type2Type<TEX::TimeInForce, char>(), "TimeInForce", 59, &TEX::realmbases[14] } },
   { 60, { Type2Type<TEX::TransactTime>(), "TransactTime", 60 } },
   { 61, { Type2Type<TEX::Urgency, char>(), "Urgency", 61, &TEX::realmbases[15] } },
   { 62, { Type2Type<TEX::ValidUntilTime>(), "ValidUntilTime", 62 } },
   { 63, { Type2Type<TEX::SettlType, f8String>(), "SettlType", 63, &TEX::realmbases[16] } },
   { 64, { Type2Type<TEX::SettlDate>(), "SettlDate", 64 } },
   { 65, { Type2Type<TEX::SymbolSfx, f8String>(), "SymbolSfx", 65, &TEX::realmbases[17] } },
   { 66, { Type2Type<TEX::ListID>(), "ListID", 66 } },
   { 67, { Type2Type<TEX::ListSeqNo>(), "ListSeqNo", 67 } },
   { 68, { Type2Type<TEX::TotNoOrders>(), "TotNoOrders", 68 } },
   { 69, { Type2Type<TEX::ListExecInst>(), "ListExecInst", 69 } },
   { 70, { Type2Type<TEX::AllocID>(), "AllocID", 70 } },
   { 71, { Type2Type<TEX::AllocTransType, char>(), "AllocTransType", 71, &TEX::realmbases[18] } },
   { 72, { Type2Type<TEX::RefAllocID>(), "RefAllocID", 72 } },
   { 73, { Type2Type<TEX::NoOrders>(), "NoOrders", 73 } },
   { 74, { Type2Type<TEX::AvgPxPrecision>(), "AvgPxPrecision", 74 } },
   { 75, { Type2Type<TEX::TradeDate>(), "TradeDate", 75 } },
   { 77, { Type2Type<TEX::PositionEffect, char>(), "PositionEffect", 77, &TEX::realmbases[19] } },
   { 78, { Type2Type<TEX::NoAllocs>(), "NoAllocs", 78 } },
   { 79, { Type2Type<TEX::AllocAccount>(), "AllocAccount", 79 } },
   { 80, { Type2Type<TEX::AllocQty>(), "AllocQty", 80 } },
   { 81, { Type2Type<TEX::ProcessCode, char>(), "ProcessCode", 81, &TEX::realmbases[20] } },
   { 82, { Type2Type<TEX::NoRpts>(), "NoRpts", 82 } },
   { 83, { Type2Type<TEX::RptSeq>(), "RptSeq", 83 } },
   { 84, { Type2Type<TEX::CxlQty>(), "CxlQty", 84 } },
   { 85, { Type2Type<TEX::NoDlvyInst>(), "NoDlvyInst", 85 } },
   { 87, { Type2Type<TEX::AllocStatus, int>(), "AllocStatus", 87, &TEX::realmbases[21] } },
   { 88, { Type2Type<TEX::AllocRejCode, int>(), "AllocRejCode", 88, &TEX::realmbases[22] } },
   { 89, { Type2Type<TEX::Signature>(), "Signature", 89 } },
   { 90, { Type2Type<TEX::SecureDataLen>(), "SecureDataLen", 90 } },
   { 91, { Type2Type<TEX::SecureData>(), "SecureData", 91 } },
   { 93, { Type2Type<TEX::SignatureLength>(), "SignatureLength", 93 } },
   { 94, { Type2Type<TEX::EmailType, char>(), "EmailType", 94, &TEX::realmbases[23] } },
   { 95, { Type2Type<TEX::RawDataLength>(), "RawDataLength", 95 } },
   { 96, { Type2Type<TEX::RawData>(), "RawData", 96 } },
   { 97, { Type2Type<TEX::PossResend>(), "PossResend", 97 } },
   { 98, { Type2Type<TEX::EncryptMethod, int>(), "EncryptMethod", 98, &TEX::realmbases[24] } },
   { 99, { Type2Type<TEX::StopPx>(), "StopPx", 99 } },
   { 100, { Type2Type<TEX::ExDestination>(), "ExDestination", 100 } },
   { 102, { Type2Type<TEX::CxlRejReason, int>(), "CxlRejReason", 102, &TEX::realmbases[25] } },
   { 103, { Type2Type<TEX::OrdRejReason, int>(), "OrdRejReason", 103, &TEX::realmbases[26] } },
   { 104, { Type2Type<TEX::IOIQualifier, char>(), "IOIQualifier", 104, &TEX::realmbases[27] } },
   { 106, { Type2Type<TEX::Issuer>(), "Issuer", 106 } },
   { 107, { Type2Type<TEX::SecurityDesc>(), "SecurityDesc", 107 } },
   { 108, { Type2Type<TEX::HeartBtInt>(), "HeartBtInt", 108 } },
   { 110, { Type2Type<TEX::MinQty>(), "MinQty", 110 } },
   { 111, { Type2Type<TEX::MaxFloor>(), "MaxFloor", 111 } },
   { 112, { Type2Type<TEX::TestReqID>(), "TestReqID", 112 } },
   { 113, { Type2Type<TEX::ReportToExch, char>(), "ReportToExch", 113, &TEX::realmbases[28] } },
   { 114, { Type2Type<TEX::LocateReqd, char>(), "LocateReqd", 114, &TEX::realmbases[29] } },
   { 115, { Type2Type<TEX::OnBehalfOfCompID>(), "OnBehalfOfCompID", 115 } },
   { 116, { Type2Type<TEX::OnBehalfOfSubID>(), "OnBehalfOfSubID", 116 } },
   { 117, { Type2Type<TEX::QuoteID>(), "QuoteID", 117 } },
   { 118, { Type2Type<TEX::NetMoney>(), "NetMoney", 118 } },
   { 119, { Type2Type<TEX::SettlCurrAmt>(), "SettlCurrAmt", 119 } },
   { 120, { Type2Type<TEX::SettlCurrency>(), "SettlCurrency", 120 } },
   { 121, { Type2Type<TEX::ForexReq, char>(), "ForexReq", 121, &TEX::realmbases[30] } },
   { 122, { Type2Type<TEX::OrigSendingTime>(), "OrigSendingTime", 122 } },
   { 123, { Type2Type<TEX::GapFillFlag>(), "GapFillFlag", 123 } },
   { 124, { Type2Type<TEX::NoExecs>(), "NoExecs", 124 } },
   { 126, { Type2Type<TEX::ExpireTime>(), "ExpireTime", 126 } },
   { 127, { Type2Type<TEX::DKReason, char>(), "DKReason", 127, &TEX::realmbases[31] } },
   { 128, { Type2Type<TEX::DeliverToCompID>(), "DeliverToCompID", 128 } },
   { 129, { Type2Type<TEX::DeliverToSubID>(), "DeliverToSubID", 129 } },
   { 130, { Type2Type<TEX::IOINaturalFlag, char>(), "IOINaturalFlag", 130, &TEX::realmbases[32] } },
   { 131, { Type2Type<TEX::QuoteReqID>(), "QuoteReqID", 131 } },
   { 132, { Type2Type<TEX::BidPx>(), "BidPx", 132 } },
   { 133, { Type2Type<TEX::OfferPx>(), "OfferPx", 133 } },
   { 134, { Type2Type<TEX::BidSize>(), "BidSize", 134 } },
   { 135, { Type2Type<TEX::OfferSize>(), "OfferSize", 135 } },
   { 136, { Type2Type<TEX::NoMiscFees>(), "NoMiscFees", 136 } },
   { 137, { Type2Type<TEX::MiscFeeAmt>(), "MiscFeeAmt", 137 } },
   { 138, { Type2Type<TEX::MiscFeeCurr>(), "MiscFeeCurr", 138 } },
   { 139, { Type2Type<TEX::MiscFeeType, f8String>(), "MiscFeeType", 139, &TEX::realmbases[33] } },
   { 140, { Type2Type<TEX::PrevClosePx>(), "PrevClosePx", 140 } },
   { 141, { Type2Type<TEX::ResetSeqNumFlag>(), "ResetSeqNumFlag", 141 } },
   { 142, { Type2Type<TEX::SenderLocationID>(), "SenderLocationID", 142 } },
   { 143, { Type2Type<TEX::TargetLocationID>(), "TargetLocationID", 143 } },
   { 144, { Type2Type<TEX::OnBehalfOfLocationID>(), "OnBehalfOfLocationID", 144 } },
   { 145, { Type2Type<TEX::DeliverToLocationID>(), "DeliverToLocationID", 145 } },
   { 146, { Type2Type<TEX::NoRelatedSym>(), "NoRelatedSym", 146 } },
   { 147, { Type2Type<TEX::Subject>(), "Subject", 147 } },
   { 148, { Type2Type<TEX::Headline>(), "Headline", 148 } },
   { 149, { Type2Type<TEX::URLLink>(), "URLLink", 149 } },
   { 150, { Type2Type<TEX::ExecType, char>(), "ExecType", 150, &TEX::realmbases[34] } },
   { 151, { Type2Type<TEX::LeavesQty>(), "LeavesQty", 151 } },
   { 152, { Type2Type<TEX::CashOrderQty>(), "CashOrderQty", 152 } },
   { 153, { Type2Type<TEX::AllocAvgPx>(), "AllocAvgPx", 153 } },
   { 154, { Type2Type<TEX::AllocNetMoney>(), "AllocNetMoney", 154 } },
   { 155, { Type2Type<TEX::SettlCurrFxRate>(), "SettlCurrFxRate", 155 } },
   { 156, { Type2Type<TEX::SettlCurrFxRateCalc, char>(), "SettlCurrFxRateCalc", 156, &TEX::realmbases[35] } },
   { 157, { Type2Type<TEX::NumDaysInterest>(), "NumDaysInterest", 157 } },
   { 158, { Type2Type<TEX::AccruedInterestRate>(), "AccruedInterestRate", 158 } },
   { 159, { Type2Type<TEX::AccruedInterestAmt>(), "AccruedInterestAmt", 159 } },
   { 160, { Type2Type<TEX::SettlInstMode, char>(), "SettlInstMode", 160, &TEX::realmbases[36] } },
   { 161, { Type2Type<TEX::AllocText>(), "AllocText", 161 } },
   { 162, { Type2Type<TEX::SettlInstID>(), "SettlInstID", 162 } },
   { 163, { Type2Type<TEX::SettlInstTransType, char>(), "SettlInstTransType", 163, &TEX::realmbases[37] } },
   { 164, { Type2Type<TEX::EmailThreadID>(), "EmailThreadID", 164 } },
   { 165, { Type2Type<TEX::SettlInstSource, char>(), "SettlInstSource", 165, &TEX::realmbases[38] } },
   { 167, { Type2Type<TEX::SecurityType, f8String>(), "SecurityType", 167, &TEX::realmbases[39] } },
   { 168, { Type2Type<TEX::EffectiveTime>(), "EffectiveTime", 168 } },
   { 169, { Type2Type<TEX::StandInstDbType, int>(), "StandInstDbType", 169, &TEX::realmbases[40] } },
   { 170, { Type2Type<TEX::StandInstDbName>(), "StandInstDbName", 170 } },
   { 171, { Type2Type<TEX::StandInstDbID>(), "StandInstDbID", 171 } },
   { 172, { Type2Type<TEX::SettlDeliveryType, int>(), "SettlDeliveryType", 172, &TEX::realmbases[41] } },
   { 188, { Type2Type<TEX::BidSpotRate>(), "BidSpotRate", 188 } },
   { 189, { Type2Type<TEX::BidForwardPoints>(), "BidForwardPoints", 189 } },
   { 190, { Type2Type<TEX::OfferSpotRate>(), "OfferSpotRate", 190 } },
   { 191, { Type2Type<TEX::OfferForwardPoints>(), "OfferForwardPoints", 191 } },
   { 192, { Type2Type<TEX::OrderQty2>(), "OrderQty2", 192 } },
   { 193, { Type2Type<TEX::SettlDate2>(), "SettlDate2", 193 } },
   { 194, { Type2Type<TEX::LastSpotRate>(), "LastSpotRate", 194 } },
   { 195, { Type2Type<TEX::LastForwardPoints>(), "LastForwardPoints", 195 } },
   { 196, { Type2Type<TEX::AllocLinkID>(), "AllocLinkID", 196 } },
   { 197, { Type2Type<TEX::AllocLinkType, int>(), "AllocLinkType", 197, &TEX::realmbases[42] } },
   { 198, { Type2Type<TEX::SecondaryOrderID>(), "SecondaryOrderID", 198 } },
   { 199, { Type2Type<TEX::NoIOIQualifiers>(), "NoIOIQualifiers", 199 } },
   { 200, { Type2Type<TEX::MaturityMonthYear>(), "MaturityMonthYear", 200 } },
   { 201, { Type2Type<TEX::PutOrCall, int>(), "PutOrCall", 201, &TEX::realmbases[43] } },
   { 202, { Type2Type<TEX::StrikePrice>(), "StrikePrice", 202 } },
   { 203, { Type2Type<TEX::CoveredOrUncovered, int>(), "CoveredOrUncovered", 203, &TEX::realmbases[44] } },
   { 206, { Type2Type<TEX::OptAttribute>(), "OptAttribute", 206 } },
   { 207, { Type2Type<TEX::SecurityExchange>(), "SecurityExchange", 207 } },
   { 208, { Type2Type<TEX::NotifyBrokerOfCredit, char>(), "NotifyBrokerOfCredit", 208, &TEX::realmbases[45] } },
   { 209, { Type2Type<TEX::AllocHandlInst, int>(), "AllocHandlInst", 209, &TEX::realmbases[46] } },
   { 210, { Type2Type<TEX::MaxShow>(), "MaxShow", 210 } },
   { 211, { Type2Type<TEX::PegOffsetValue>(), "PegOffsetValue", 211 } },
   { 212, { Type2Type<TEX::XmlDataLen>(), "XmlDataLen", 212 } },
   { 213, { Type2Type<TEX::XmlData>(), "XmlData", 213 } },
   { 214, { Type2Type<TEX::SettlInstRefID>(), "SettlInstRefID", 214 } },
   { 215, { Type2Type<TEX::NoRoutingIDs>(), "NoRoutingIDs", 215 } },
   { 216, { Type2Type<TEX::RoutingType, int>(), "RoutingType", 216, &TEX::realmbases[47] } },
   { 217, { Type2Type<TEX::RoutingID>(), "RoutingID", 217 } },
   { 218, { Type2Type<TEX::Spread>(), "Spread", 218 } },
   { 220, { Type2Type<TEX::BenchmarkCurveCurrency>(), "BenchmarkCurveCurrency", 220 } },
   { 221, { Type2Type<TEX::BenchmarkCurveName, f8String>(), "BenchmarkCurveName", 221, &TEX::realmbases[48] } },
   { 222, { Type2Type<TEX::BenchmarkCurvePoint>(), "BenchmarkCurvePoint", 222 } },
   { 223, { Type2Type<TEX::CouponRate>(), "CouponRate", 223 } },
   { 224, { Type2Type<TEX::CouponPaymentDate>(), "CouponPaymentDate", 224 } },
   { 225, { Type2Type<TEX::IssueDate>(), "IssueDate", 225 } },
   { 226, { Type2Type<TEX::RepurchaseTerm>(), "RepurchaseTerm", 226 } },
   { 227, { Type2Type<TEX::RepurchaseRate>(), "RepurchaseRate", 227 } },
   { 228, { Type2Type<TEX::Factor>(), "Factor", 228 } },
   { 229, { Type2Type<TEX::TradeOriginationDate>(), "TradeOriginationDate", 229 } },
   { 230, { Type2Type<TEX::ExDate>(), "ExDate", 230 } },
   { 231, { Type2Type<TEX::ContractMultiplier>(), "ContractMultiplier", 231 } },
   { 232, { Type2Type<TEX::NoStipulations>(), "NoStipulations", 232 } },
   { 233, { Type2Type<TEX::StipulationType, f8String>(), "StipulationType", 233, &TEX::realmbases[49] } },
   { 234, { Type2Type<TEX::StipulationValue>(), "StipulationValue", 234 } },
   { 235, { Type2Type<TEX::YieldType, f8String>(), "YieldType", 235, &TEX::realmbases[50] } },
   { 236, { Type2Type<TEX::Yield>(), "Yield", 236 } },
   { 237, { Type2Type<TEX::TotalTakedown>(), "TotalTakedown", 237 } },
   { 238, { Type2Type<TEX::Concession>(), "Concession", 238 } },
   { 239, { Type2Type<TEX::RepoCollateralSecurityType>(), "RepoCollateralSecurityType", 239 } },
   { 240, { Type2Type<TEX::RedemptionDate>(), "RedemptionDate", 240 } },
   { 241, { Type2Type<TEX::UnderlyingCouponPaymentDate>(), "UnderlyingCouponPaymentDate", 241 } },
   { 242, { Type2Type<TEX::UnderlyingIssueDate>(), "UnderlyingIssueDate", 242 } },
   { 243, { Type2Type<TEX::UnderlyingRepoCollateralSecurityType>(), "UnderlyingRepoCollateralSecurityType", 243 } },
   { 244, { Type2Type<TEX::UnderlyingRepurchaseTerm>(), "UnderlyingRepurchaseTerm", 244 } },
   { 245, { Type2Type<TEX::UnderlyingRepurchaseRate>(), "UnderlyingRepurchaseRate", 245 } },
   { 246, { Type2Type<TEX::UnderlyingFactor>(), "UnderlyingFactor", 246 } },
   { 247, { Type2Type<TEX::UnderlyingRedemptionDate>(), "UnderlyingRedemptionDate", 247 } },
   { 248, { Type2Type<TEX::LegCouponPaymentDate>(), "LegCouponPaymentDate", 248 } },
   { 249, { Type2Type<TEX::LegIssueDate>(), "LegIssueDate", 249 } },
   { 250, { Type2Type<TEX::LegRepoCollateralSecurityType>(), "LegRepoCollateralSecurityType", 250 } },
   { 251, { Type2Type<TEX::LegRepurchaseTerm>(), "LegRepurchaseTerm", 251 } },
   { 252, { Type2Type<TEX::LegRepurchaseRate>(), "LegRepurchaseRate", 252 } },
   { 253, { Type2Type<TEX::LegFactor>(), "LegFactor", 253 } },
   { 254, { Type2Type<TEX::LegRedemptionDate>(), "LegRedemptionDate", 254 } },
   { 255, { Type2Type<TEX::CreditRating>(), "CreditRating", 255 } },
   { 256, { Type2Type<TEX::UnderlyingCreditRating>(), "UnderlyingCreditRating", 256 } },
   { 257, { Type2Type<TEX::LegCreditRating>(), "LegCreditRating", 257 } },
   { 258, { Type2Type<TEX::TradedFlatSwitch, char>(), "TradedFlatSwitch", 258, &TEX::realmbases[51] } },
   { 259, { Type2Type<TEX::BasisFeatureDate>(), "BasisFeatureDate", 259 } },
   { 260, { Type2Type<TEX::BasisFeaturePrice>(), "BasisFeaturePrice", 260 } },
   { 262, { Type2Type<TEX::MDReqID>(), "MDReqID", 262 } },
   { 263, { Type2Type<TEX::SubscriptionRequestType, char>(), "SubscriptionRequestType", 263, &TEX::realmbases[52] } },
   { 264, { Type2Type<TEX::MarketDepth>(), "MarketDepth", 264 } },
   { 265, { Type2Type<TEX::MDUpdateType, int>(), "MDUpdateType", 265, &TEX::realmbases[53] } },
   { 266, { Type2Type<TEX::AggregatedBook, char>(), "AggregatedBook", 266, &TEX::realmbases[54] } },
   { 267, { Type2Type<TEX::NoMDEntryTypes>(), "NoMDEntryTypes", 267 } },
   { 268, { Type2Type<TEX::NoMDEntries>(), "NoMDEntries", 268 } },
   { 269, { Type2Type<TEX::MDEntryType, char>(), "MDEntryType", 269, &TEX::realmbases[55] } },
   { 270, { Type2Type<TEX::MDEntryPx>(), "MDEntryPx", 270 } },
   { 271, { Type2Type<TEX::MDEntrySize>(), "MDEntrySize", 271 } },
   { 272, { Type2Type<TEX::MDEntryDate>(), "MDEntryDate", 272 } },
   { 273, { Type2Type<TEX::MDEntryTime>(), "MDEntryTime", 273 } },
   { 274, { Type2Type<TEX::TickDirection, char>(), "TickDirection", 274, &TEX::realmbases[56] } },
   { 275, { Type2Type<TEX::MDMkt>(), "MDMkt", 275 } },
   { 276, { Type2Type<TEX::QuoteCondition, f8String>(), "QuoteCondition", 276, &TEX::realmbases[57] } },
   { 277, { Type2Type<TEX::TradeCondition, f8String>(), "TradeCondition", 277, &TEX::realmbases[58] } },
   { 278, { Type2Type<TEX::MDEntryID>(), "MDEntryID", 278 } },
   { 279, { Type2Type<TEX::MDUpdateAction, char>(), "MDUpdateAction", 279, &TEX::realmbases[59] } },
   { 280, { Type2Type<TEX::MDEntryRefID>(), "MDEntryRefID", 280 } },
   { 281, { Type2Type<TEX::MDReqRejReason, char>(), "MDReqRejReason", 281, &TEX::realmbases[60] } },
   { 282, { Type2Type<TEX::MDEntryOriginator>(), "MDEntryOriginator", 282 } },
   { 283, { Type2Type<TEX::LocationID>(), "LocationID", 283 } },
   { 284, { Type2Type<TEX::DeskID>(), "DeskID", 284 } },
   { 285, { Type2Type<TEX::DeleteReason, char>(), "DeleteReason", 285, &TEX::realmbases[61] } },
   { 286, { Type2Type<TEX::OpenCloseSettlFlag, f8String>(), "OpenCloseSettlFlag", 286, &TEX::realmbases[62] } },
   { 287, { Type2Type<TEX::SellerDays>(), "SellerDays", 287 } },
   { 288, { Type2Type<TEX::MDEntryBuyer>(), "MDEntryBuyer", 288 } },
   { 289, { Type2Type<TEX::MDEntrySeller>(), "MDEntrySeller", 289 } },
   { 290, { Type2Type<TEX::MDEntryPositionNo>(), "MDEntryPositionNo", 290 } },
   { 291, { Type2Type<TEX::FinancialStatus, f8String>(), "FinancialStatus", 291, &TEX::realmbases[63] } },
   { 292, { Type2Type<TEX::CorporateAction, f8String>(), "CorporateAction", 292, &TEX::realmbases[64] } },
   { 293, { Type2Type<TEX::DefBidSize>(), "DefBidSize", 293 } },
   { 294, { Type2Type<TEX::DefOfferSize>(), "DefOfferSize", 294 } },
   { 295, { Type2Type<TEX::NoQuoteEntries>(), "NoQuoteEntries", 295 } },
   { 296, { Type2Type<TEX::NoQuoteSets>(), "NoQuoteSets", 296 } },
   { 297, { Type2Type<TEX::QuoteStatus, int>(), "QuoteStatus", 297, &TEX::realmbases[65] } },
   { 298, { Type2Type<TEX::QuoteCancelType, int>(), "QuoteCancelType", 298, &TEX::realmbases[66] } },
   { 299, { Type2Type<TEX::QuoteEntryID>(), "QuoteEntryID", 299 } },
   { 300, { Type2Type<TEX::QuoteRejectReason, int>(), "QuoteRejectReason", 300, &TEX::realmbases[67] } },
   { 301, { Type2Type<TEX::QuoteResponseLevel, int>(), "QuoteResponseLevel", 301, &TEX::realmbases[68] } },
   { 302, { Type2Type<TEX::QuoteSetID>(), "QuoteSetID", 302 } },
   { 303, { Type2Type<TEX::QuoteRequestType, int>(), "QuoteRequestType", 303, &TEX::realmbases[69] } },
   { 304, { Type2Type<TEX::TotNoQuoteEntries>(), "TotNoQuoteEntries", 304 } },
   { 305, { Type2Type<TEX::UnderlyingSecurityIDSource>(), "UnderlyingSecurityIDSource", 305 } },
   { 306, { Type2Type<TEX::UnderlyingIssuer>(), "UnderlyingIssuer", 306 } },
   { 307, { Type2Type<TEX::UnderlyingSecurityDesc>(), "UnderlyingSecurityDesc", 307 } },
   { 308, { Type2Type<TEX::UnderlyingSecurityExchange>(), "UnderlyingSecurityExchange", 308 } },
   { 309, { Type2Type<TEX::UnderlyingSecurityID>(), "UnderlyingSecurityID", 309 } },
   { 310, { Type2Type<TEX::UnderlyingSecurityType>(), "UnderlyingSecurityType", 310 } },
   { 311, { Type2Type<TEX::UnderlyingSymbol>(), "UnderlyingSymbol", 311 } },
   { 312, { Type2Type<TEX::UnderlyingSymbolSfx>(), "UnderlyingSymbolSfx", 312 } },
   { 313, { Type2Type<TEX::UnderlyingMaturityMonthYear>(), "UnderlyingMaturityMonthYear", 313 } },
   { 315, { Type2Type<TEX::UnderlyingPutOrCall>(), "UnderlyingPutOrCall", 315 } },
   { 316, { Type2Type<TEX::UnderlyingStrikePrice>(), "UnderlyingStrikePrice", 316 } },
   { 317, { Type2Type<TEX::UnderlyingOptAttribute>(), "UnderlyingOptAttribute", 317 } },
   { 318, { Type2Type<TEX::UnderlyingCurrency>(), "UnderlyingCurrency", 318 } },
   { 320, { Type2Type<TEX::SecurityReqID>(), "SecurityReqID", 320 } },
   { 321, { Type2Type<TEX::SecurityRequestType, int>(), "SecurityRequestType", 321, &TEX::realmbases[70] } },
   { 322, { Type2Type<TEX::SecurityResponseID>(), "SecurityResponseID", 322 } },
   { 323, { Type2Type<TEX::SecurityResponseType, int>(), "SecurityResponseType", 323, &TEX::realmbases[71] } },
   { 324, { Type2Type<TEX::SecurityStatusReqID>(), "SecurityStatusReqID", 324 } },
   { 325, { Type2Type<TEX::UnsolicitedIndicator, char>(), "UnsolicitedIndicator", 325, &TEX::realmbases[72] } },
   { 326, { Type2Type<TEX::SecurityTradingStatus, int>(), "SecurityTradingStatus", 326, &TEX::realmbases[73] } },
   { 327, { Type2Type<TEX::HaltReasonInt, int>(), "HaltReasonInt", 327, &TEX::realmbases[74] } },
   { 328, { Type2Type<TEX::InViewOfCommon, char>(), "InViewOfCommon", 328, &TEX::realmbases[75] } },
   { 329, { Type2Type<TEX::DueToRelated, char>(), "DueToRelated", 329, &TEX::realmbases[76] } },
   { 330, { Type2Type<TEX::BuyVolume>(), "BuyVolume", 330 } },
   { 331, { Type2Type<TEX::SellVolume>(), "SellVolume", 331 } },
   { 332, { Type2Type<TEX::HighPx>(), "HighPx", 332 } },
   { 333, { Type2Type<TEX::LowPx>(), "LowPx", 333 } },
   { 334, { Type2Type<TEX::Adjustment, int>(), "Adjustment", 334, &TEX::realmbases[77] } },
   { 335, { Type2Type<TEX::TradSesReqID>(), "TradSesReqID", 335 } },
   { 336, { Type2Type<TEX::TradingSessionID, f8String>(), "TradingSessionID", 336, &TEX::realmbases[78] } },
   { 337, { Type2Type<TEX::ContraTrader>(), "ContraTrader", 337 } },
   { 338, { Type2Type<TEX::TradSesMethod, int>(), "TradSesMethod", 338, &TEX::realmbases[79] } },
   { 339, { Type2Type<TEX::TradSesMode, int>(), "TradSesMode", 339, &TEX::realmbases[80] } },
   { 340, { Type2Type<TEX::TradSesStatus, int>(), "TradSesStatus", 340, &TEX::realmbases[81] } },
   { 341, { Type2Type<TEX::TradSesStartTime>(), "TradSesStartTime", 341 } },
   { 342, { Type2Type<TEX::TradSesOpenTime>(), "TradSesOpenTime", 342 } },
   { 343, { Type2Type<TEX::TradSesPreCloseTime>(), "TradSesPreCloseTime", 343 } },
   { 344, { Type2Type<TEX::TradSesCloseTime>(), "TradSesCloseTime", 344 } },
   { 345, { Type2Type<TEX::TradSesEndTime>(), "TradSesEndTime", 345 } },
   { 346, { Type2Type<TEX::NumberOfOrders>(), "NumberOfOrders", 346 } },
   { 347, { Type2Type<TEX::MessageEncoding, f8String>(), "MessageEncoding", 347, &TEX::realmbases[82] } },
   { 348, { Type2Type<TEX::EncodedIssuerLen>(), "EncodedIssuerLen", 348 } },
   { 349, { Type2Type<TEX::EncodedIssuer>(), "EncodedIssuer", 349 } },
   { 350, { Type2Type<TEX::EncodedSecurityDescLen>(), "EncodedSecurityDescLen", 350 } },
   { 351, { Type2Type<TEX::EncodedSecurityDesc>(), "EncodedSecurityDesc", 351 } },
   { 352, { Type2Type<TEX::EncodedListExecInstLen>(), "EncodedListExecInstLen", 352 } },
   { 353, { Type2Type<TEX::EncodedListExecInst>(), "EncodedListExecInst", 353 } },
   { 354, { Type2Type<TEX::EncodedTextLen>(), "EncodedTextLen", 354 } },
   { 355, { Type2Type<TEX::EncodedText>(), "EncodedText", 355 } },
   { 356, { Type2Type<TEX::EncodedSubjectLen>(), "EncodedSubjectLen", 356 } },
   { 357, { Type2Type<TEX::EncodedSubject>(), "EncodedSubject", 357 } },
   { 358, { Type2Type<TEX::EncodedHeadlineLen>(), "EncodedHeadlineLen", 358 } },
   { 359, { Type2Type<TEX::EncodedHeadline>(), "EncodedHeadline", 359 } },
   { 360, { Type2Type<TEX::EncodedAllocTextLen>(), "EncodedAllocTextLen", 360 } },
   { 361, { Type2Type<TEX::EncodedAllocText>(), "EncodedAllocText", 361 } },
   { 362, { Type2Type<TEX::EncodedUnderlyingIssuerLen>(), "EncodedUnderlyingIssuerLen", 362 } },
   { 363, { Type2Type<TEX::EncodedUnderlyingIssuer>(), "EncodedUnderlyingIssuer", 363 } },
   { 364, { Type2Type<TEX::EncodedUnderlyingSecurityDescLen>(), "EncodedUnderlyingSecurityDescLen", 364 } },
   { 365, { Type2Type<TEX::EncodedUnderlyingSecurityDesc>(), "EncodedUnderlyingSecurityDesc", 365 } },
   { 366, { Type2Type<TEX::AllocPrice>(), "AllocPrice", 366 } },
   { 367, { Type2Type<TEX::QuoteSetValidUntilTime>(), "QuoteSetValidUntilTime", 367 } },
   { 368, { Type2Type<TEX::QuoteEntryRejectReason>(), "QuoteEntryRejectReason", 368 } },
   { 369, { Type2Type<TEX::LastMsgSeqNumProcessed>(), "LastMsgSeqNumProcessed", 369 } },
   { 371, { Type2Type<TEX::RefTagID>(), "RefTagID", 371 } },
   { 372, { Type2Type<TEX::RefMsgType>(), "RefMsgType", 372 } },
   { 373, { Type2Type<TEX::SessionRejectReason, int>(), "SessionRejectReason", 373, &TEX::realmbases[83] } },
   { 374, { Type2Type<TEX::BidRequestTransType, char>(), "BidRequestTransType", 374, &TEX::realmbases[84] } },
   { 375, { Type2Type<TEX::ContraBroker>(), "ContraBroker", 375 } },
   { 376, { Type2Type<TEX::ComplianceID>(), "ComplianceID", 376 } },
   { 377, { Type2Type<TEX::SolicitedFlag, char>(), "SolicitedFlag", 377, &TEX::realmbases[85] } },
   { 378, { Type2Type<TEX::ExecRestatementReason, int>(), "ExecRestatementReason", 378, &TEX::realmbases[86] } },
   { 379, { Type2Type<TEX::BusinessRejectRefID>(), "BusinessRejectRefID", 379 } },
   { 380, { Type2Type<TEX::BusinessRejectReason, int>(), "BusinessRejectReason", 380, &TEX::realmbases[87] } },
   { 381, { Type2Type<TEX::GrossTradeAmt>(), "GrossTradeAmt", 381 } },
   { 382, { Type2Type<TEX::NoContraBrokers>(), "NoContraBrokers", 382 } },
   { 383, { Type2Type<TEX::MaxMessageSize>(), "MaxMessageSize", 383 } },
   { 384, { Type2Type<TEX::NoMsgTypes>(), "NoMsgTypes", 384 } },
   { 385, { Type2Type<TEX::MsgDirection, char>(), "MsgDirection", 385, &TEX::realmbases[88] } },
   { 386, { Type2Type<TEX::NoTradingSessions>(), "NoTradingSessions", 386 } },
   { 387, { Type2Type<TEX::TotalVolumeTraded>(), "TotalVolumeTraded", 387 } },
   { 388, { Type2Type<TEX::DiscretionInst, char>(), "DiscretionInst", 388, &TEX::realmbases[89] } },
   { 389, { Type2Type<TEX::DiscretionOffsetValue>(), "DiscretionOffsetValue", 389 } },
   { 390, { Type2Type<TEX::BidID>(), "BidID", 390 } },
   { 391, { Type2Type<TEX::ClientBidID>(), "ClientBidID", 391 } },
   { 392, { Type2Type<TEX::ListName>(), "ListName", 392 } },
   { 393, { Type2Type<TEX::TotNoRelatedSym>(), "TotNoRelatedSym", 393 } },
   { 394, { Type2Type<TEX::BidType, int>(), "BidType", 394, &TEX::realmbases[90] } },
   { 395, { Type2Type<TEX::NumTickets>(), "NumTickets", 395 } },
   { 396, { Type2Type<TEX::SideValue1>(), "SideValue1", 396 } },
   { 397, { Type2Type<TEX::SideValue2>(), "SideValue2", 397 } },
   { 398, { Type2Type<TEX::NoBidDescriptors>(), "NoBidDescriptors", 398 } },
   { 399, { Type2Type<TEX::BidDescriptorType, int>(), "BidDescriptorType", 399, &TEX::realmbases[91] } },
   { 400, { Type2Type<TEX::BidDescriptor>(), "BidDescriptor", 400 } },
   { 401, { Type2Type<TEX::SideValueInd, int>(), "SideValueInd", 401, &TEX::realmbases[92] } },
   { 402, { Type2Type<TEX::LiquidityPctLow>(), "LiquidityPctLow", 402 } },
   { 403, { Type2Type<TEX::LiquidityPctHigh>(), "LiquidityPctHigh", 403 } },
   { 404, { Type2Type<TEX::LiquidityValue>(), "LiquidityValue", 404 } },
   { 405, { Type2Type<TEX::EFPTrackingError>(), "EFPTrackingError", 405 } },
   { 406, { Type2Type<TEX::FairValue>(), "FairValue", 406 } },
   { 407, { Type2Type<TEX::OutsideIndexPct>(), "OutsideIndexPct", 407 } },
   { 408, { Type2Type<TEX::ValueOfFutures>(), "ValueOfFutures", 408 } },
   { 409, { Type2Type<TEX::LiquidityIndType, int>(), "LiquidityIndType", 409, &TEX::realmbases[93] } },
   { 410, { Type2Type<TEX::WtAverageLiquidity>(), "WtAverageLiquidity", 410 } },
   { 411, { Type2Type<TEX::ExchangeForPhysical, char>(), "ExchangeForPhysical", 411, &TEX::realmbases[94] } },
   { 412, { Type2Type<TEX::OutMainCntryUIndex>(), "OutMainCntryUIndex", 412 } },
   { 413, { Type2Type<TEX::CrossPercent>(), "CrossPercent", 413 } },
   { 414, { Type2Type<TEX::ProgRptReqs, int>(), "ProgRptReqs", 414, &TEX::realmbases[95] } },
   { 415, { Type2Type<TEX::ProgPeriodInterval>(), "ProgPeriodInterval", 415 } },
   { 416, { Type2Type<TEX::IncTaxInd, int>(), "IncTaxInd", 416, &TEX::realmbases[96] } },
   { 417, { Type2Type<TEX::NumBidders>(), "NumBidders", 417 } },
   { 418, { Type2Type<TEX::BidTradeType, char>(), "BidTradeType", 418, &TEX::realmbases[97] } },
   { 419, { Type2Type<TEX::BasisPxType, char>(), "BasisPxType", 419, &TEX::realmbases[98] } },
   { 420, { Type2Type<TEX::NoBidComponents>(), "NoBidComponents", 420 } },
   { 421, { Type2Type<TEX::Country>(), "Country", 421 } },
   { 422, { Type2Type<TEX::TotNoStrikes>(), "TotNoStrikes", 422 } },
   { 423, { Type2Type<TEX::PriceType, int>(), "PriceType", 423, &TEX::realmbases[99] } },
   { 424, { Type2Type<TEX::DayOrderQty>(), "DayOrderQty", 424 } },
   { 425, { Type2Type<TEX::DayCumQty>(), "DayCumQty", 425 } },
   { 426, { Type2Type<TEX::DayAvgPx>(), "DayAvgPx", 426 } },
   { 427, { Type2Type<TEX::GTBookingInst, int>(), "GTBookingInst", 427, &TEX::realmbases[100] } },
   { 428, { Type2Type<TEX::NoStrikes>(), "NoStrikes", 428 } },
   { 429, { Type2Type<TEX::ListStatusType, int>(), "ListStatusType", 429, &TEX::realmbases[101] } },
   { 430, { Type2Type<TEX::NetGrossInd, int>(), "NetGrossInd", 430, &TEX::realmbases[102] } },
   { 431, { Type2Type<TEX::ListOrderStatus, int>(), "ListOrderStatus", 431, &TEX::realmbases[103] } },
   { 432, { Type2Type<TEX::ExpireDate>(), "ExpireDate", 432 } },
   { 433, { Type2Type<TEX::ListExecInstType, char>(), "ListExecInstType", 433, &TEX::realmbases[104] } },
   { 434, { Type2Type<TEX::CxlRejResponseTo, char>(), "CxlRejResponseTo", 434, &TEX::realmbases[105] } },
   { 435, { Type2Type<TEX::UnderlyingCouponRate>(), "UnderlyingCouponRate", 435 } },
   { 436, { Type2Type<TEX::UnderlyingContractMultiplier>(), "UnderlyingContractMultiplier", 436 } },
   { 437, { Type2Type<TEX::ContraTradeQty>(), "ContraTradeQty", 437 } },
   { 438, { Type2Type<TEX::ContraTradeTime>(), "ContraTradeTime", 438 } },
   { 441, { Type2Type<TEX::LiquidityNumSecurities>(), "LiquidityNumSecurities", 441 } },
   { 442, { Type2Type<TEX::MultiLegReportingType, char>(), "MultiLegReportingType", 442, &TEX::realmbases[106] } },
   { 443, { Type2Type<TEX::StrikeTime>(), "StrikeTime", 443 } },
   { 444, { Type2Type<TEX::ListStatusText>(), "ListStatusText", 444 } },
   { 445, { Type2Type<TEX::EncodedListStatusTextLen>(), "EncodedListStatusTextLen", 445 } },
   { 446, { Type2Type<TEX::EncodedListStatusText>(), "EncodedListStatusText", 446 } },
   { 447, { Type2Type<TEX::PartyIDSource, char>(), "PartyIDSource", 447, &TEX::realmbases[107] } },
   { 448, { Type2Type<TEX::PartyID>(), "PartyID", 448 } },
   { 451, { Type2Type<TEX::NetChgPrevDay>(), "NetChgPrevDay", 451 } },
   { 452, { Type2Type<TEX::PartyRole, int>(), "PartyRole", 452, &TEX::realmbases[108] } },
   { 453, { Type2Type<TEX::NoPartyIDs>(), "NoPartyIDs", 453 } },
   { 454, { Type2Type<TEX::NoSecurityAltID>(), "NoSecurityAltID", 454 } },
   { 455, { Type2Type<TEX::SecurityAltID>(), "SecurityAltID", 455 } },
   { 456, { Type2Type<TEX::SecurityAltIDSource>(), "SecurityAltIDSource", 456 } },
   { 457, { Type2Type<TEX::NoUnderlyingSecurityAltID>(), "NoUnderlyingSecurityAltID", 457 } },
   { 458, { Type2Type<TEX::UnderlyingSecurityAltID>(), "UnderlyingSecurityAltID", 458 } },
   { 459, { Type2Type<TEX::UnderlyingSecurityAltIDSource>(), "UnderlyingSecurityAltIDSource", 459 } },
   { 460, { Type2Type<TEX::Product, int>(), "Product", 460, &TEX::realmbases[109] } },
   { 461, { Type2Type<TEX::CFICode>(), "CFICode", 461 } },
   { 462, { Type2Type<TEX::UnderlyingProduct>(), "UnderlyingProduct", 462 } },
   { 463, { Type2Type<TEX::UnderlyingCFICode>(), "UnderlyingCFICode", 463 } },
   { 464, { Type2Type<TEX::TestMessageIndicator>(), "TestMessageIndicator", 464 } },
   { 466, { Type2Type<TEX::BookingRefID>(), "BookingRefID", 466 } },
   { 467, { Type2Type<TEX::IndividualAllocID>(), "IndividualAllocID", 467 } },
   { 468, { Type2Type<TEX::RoundingDirection, char>(), "RoundingDirection", 468, &TEX::realmbases[110] } },
   { 469, { Type2Type<TEX::RoundingModulus>(), "RoundingModulus", 469 } },
   { 470, { Type2Type<TEX::CountryOfIssue>(), "CountryOfIssue", 470 } },
   { 471, { Type2Type<TEX::StateOrProvinceOfIssue>(), "StateOrProvinceOfIssue", 471 } },
   { 472, { Type2Type<TEX::LocaleOfIssue>(), "LocaleOfIssue", 472 } },
   { 473, { Type2Type<TEX::NoRegistDtls>(), "NoRegistDtls", 473 } },
   { 474, { Type2Type<TEX::MailingDtls>(), "MailingDtls", 474 } },
   { 475, { Type2Type<TEX::InvestorCountryOfResidence>(), "InvestorCountryOfResidence", 475 } },
   { 476, { Type2Type<TEX::PaymentRef>(), "PaymentRef", 476 } },
   { 477, { Type2Type<TEX::DistribPaymentMethod, int>(), "DistribPaymentMethod", 477, &TEX::realmbases[111] } },
   { 478, { Type2Type<TEX::CashDistribCurr>(), "CashDistribCurr", 478 } },
   { 479, { Type2Type<TEX::CommCurrency>(), "CommCurrency", 479 } },
   { 480, { Type2Type<TEX::CancellationRights, char>(), "CancellationRights", 480, &TEX::realmbases[112] } },
   { 481, { Type2Type<TEX::MoneyLaunderingStatus, char>(), "MoneyLaunderingStatus", 481, &TEX::realmbases[113] } },
   { 482, { Type2Type<TEX::MailingInst>(), "MailingInst", 482 } },
   { 483, { Type2Type<TEX::TransBkdTime>(), "TransBkdTime", 483 } },
   { 484, { Type2Type<TEX::ExecPriceType, char>(), "ExecPriceType", 484, &TEX::realmbases[114] } },
   { 485, { Type2Type<TEX::ExecPriceAdjustment>(), "ExecPriceAdjustment", 485 } },
   { 486, { Type2Type<TEX::DateOfBirth>(), "DateOfBirth", 486 } },
   { 487, { Type2Type<TEX::TradeReportTransType, int>(), "TradeReportTransType", 487, &TEX::realmbases[115] } },
   { 488, { Type2Type<TEX::CardHolderName>(), "CardHolderName", 488 } },
   { 489, { Type2Type<TEX::CardNumber>(), "CardNumber", 489 } },
   { 490, { Type2Type<TEX::CardExpDate>(), "CardExpDate", 490 } },
   { 491, { Type2Type<TEX::CardIssNum>(), "CardIssNum", 491 } },
   { 492, { Type2Type<TEX::PaymentMethod, int>(), "PaymentMethod", 492, &TEX::realmbases[116] } },
   { 493, { Type2Type<TEX::RegistAcctType>(), "RegistAcctType", 493 } },
   { 494, { Type2Type<TEX::Designation>(), "Designation", 494 } },
   { 495, { Type2Type<TEX::TaxAdvantageType, int>(), "TaxAdvantageType", 495, &TEX::realmbases[117] } },
   { 496, { Type2Type<TEX::RegistRejReasonText>(), "RegistRejReasonText", 496 } },
   { 497, { Type2Type<TEX::FundRenewWaiv, char>(), "FundRenewWaiv", 497, &TEX::realmbases[118] } },
   { 498, { Type2Type<TEX::CashDistribAgentName>(), "CashDistribAgentName", 498 } },
   { 499, { Type2Type<TEX::CashDistribAgentCode>(), "CashDistribAgentCode", 499 } },
   { 500, { Type2Type<TEX::CashDistribAgentAcctNumber>(), "CashDistribAgentAcctNumber", 500 } },
   { 501, { Type2Type<TEX::CashDistribPayRef>(), "CashDistribPayRef", 501 } },
   { 502, { Type2Type<TEX::CashDistribAgentAcctName>(), "CashDistribAgentAcctName", 502 } },
   { 503, { Type2Type<TEX::CardStartDate>(), "CardStartDate", 503 } },
   { 504, { Type2Type<TEX::PaymentDate>(), "PaymentDate", 504 } },
   { 505, { Type2Type<TEX::PaymentRemitterID>(), "PaymentRemitterID", 505 } },
   { 506, { Type2Type<TEX::RegistStatus, char>(), "RegistStatus", 506, &TEX::realmbases[119] } },
   { 507, { Type2Type<TEX::RegistRejReasonCode, int>(), "RegistRejReasonCode", 507, &TEX::realmbases[120] } },
   { 508, { Type2Type<TEX::RegistRefID>(), "RegistRefID", 508 } },
   { 509, { Type2Type<TEX::RegistDtls>(), "RegistDtls", 509 } },
   { 510, { Type2Type<TEX::NoDistribInsts>(), "NoDistribInsts", 510 } },
   { 511, { Type2Type<TEX::RegistEmail>(), "RegistEmail", 511 } },
   { 512, { Type2Type<TEX::DistribPercentage>(), "DistribPercentage", 512 } },
   { 513, { Type2Type<TEX::RegistID>(), "RegistID", 513 } },
   { 514, { Type2Type<TEX::RegistTransType, char>(), "RegistTransType", 514, &TEX::realmbases[121] } },
   { 515, { Type2Type<TEX::ExecValuationPoint>(), "ExecValuationPoint", 515 } },
   { 516, { Type2Type<TEX::OrderPercent>(), "OrderPercent", 516 } },
   { 517, { Type2Type<TEX::OwnershipType, char>(), "OwnershipType", 517, &TEX::realmbases[122] } },
   { 518, { Type2Type<TEX::NoContAmts>(), "NoContAmts", 518 } },
   { 519, { Type2Type<TEX::ContAmtType, int>(), "ContAmtType", 519, &TEX::realmbases[123] } },
   { 520, { Type2Type<TEX::ContAmtValue>(), "ContAmtValue", 520 } },
   { 521, { Type2Type<TEX::ContAmtCurr>(), "ContAmtCurr", 521 } },
   { 522, { Type2Type<TEX::OwnerType, int>(), "OwnerType", 522, &TEX::realmbases[124] } },
   { 523, { Type2Type<TEX::PartySubID>(), "PartySubID", 523 } },
   { 524, { Type2Type<TEX::NestedPartyID>(), "NestedPartyID", 524 } },
   { 525, { Type2Type<TEX::NestedPartyIDSource>(), "NestedPartyIDSource", 525 } },
   { 526, { Type2Type<TEX::SecondaryClOrdID>(), "SecondaryClOrdID", 526 } },
   { 527, { Type2Type<TEX::SecondaryExecID>(), "SecondaryExecID", 527 } },
   { 528, { Type2Type<TEX::OrderCapacity, char>(), "OrderCapacity", 528, &TEX::realmbases[125] } },
   { 529, { Type2Type<TEX::OrderRestrictions, f8String>(), "OrderRestrictions", 529, &TEX::realmbases[126] } },
   { 530, { Type2Type<TEX::MassCancelRequestType, char>(), "MassCancelRequestType", 530, &TEX::realmbases[127] } },
   { 531, { Type2Type<TEX::MassCancelResponse, char>(), "MassCancelResponse", 531, &TEX::realmbases[128] } },
   { 532, { Type2Type<TEX::MassCancelRejectReason, int>(), "MassCancelRejectReason", 532, &TEX::realmbases[129] } },
   { 533, { Type2Type<TEX::TotalAffectedOrders>(), "TotalAffectedOrders", 533 } },
   { 534, { Type2Type<TEX::NoAffectedOrders>(), "NoAffectedOrders", 534 } },
   { 535, { Type2Type<TEX::AffectedOrderID>(), "AffectedOrderID", 535 } },
   { 536, { Type2Type<TEX::AffectedSecondaryOrderID>(), "AffectedSecondaryOrderID", 536 } },
   { 537, { Type2Type<TEX::QuoteType, int>(), "QuoteType", 537, &TEX::realmbases[130] } },
   { 538, { Type2Type<TEX::NestedPartyRole>(), "NestedPartyRole", 538 } },
   { 539, { Type2Type<TEX::NoNestedPartyIDs>(), "NoNestedPartyIDs", 539 } },
   { 540, { Type2Type<TEX::TotalAccruedInterestAmt>(), "TotalAccruedInterestAmt", 540 } },
   { 541, { Type2Type<TEX::MaturityDate>(), "MaturityDate", 541 } },
   { 542, { Type2Type<TEX::UnderlyingMaturityDate>(), "UnderlyingMaturityDate", 542 } },
   { 543, { Type2Type<TEX::InstrRegistry>(), "InstrRegistry", 543 } },
   { 544, { Type2Type<TEX::CashMargin, char>(), "CashMargin", 544, &TEX::realmbases[131] } },
   { 545, { Type2Type<TEX::NestedPartySubID>(), "NestedPartySubID", 545 } },
   { 546, { Type2Type<TEX::Scope, f8String>(), "Scope", 546, &TEX::realmbases[132] } },
   { 547, { Type2Type<TEX::MDImplicitDelete, char>(), "MDImplicitDelete", 547, &TEX::realmbases[133] } },
   { 548, { Type2Type<TEX::CrossID>(), "CrossID", 548 } },
   { 549, { Type2Type<TEX::CrossType, int>(), "CrossType", 549, &TEX::realmbases[134] } },
   { 550, { Type2Type<TEX::CrossPrioritization, int>(), "CrossPrioritization", 550, &TEX::realmbases[135] } },
   { 551, { Type2Type<TEX::OrigCrossID>(), "OrigCrossID", 551 } },
   { 552, { Type2Type<TEX::NoSides, int>(), "NoSides", 552, &TEX::realmbases[136] } },
   { 553, { Type2Type<TEX::Username>(), "Username", 553 } },
   { 554, { Type2Type<TEX::Password>(), "Password", 554 } },
   { 555, { Type2Type<TEX::NoLegs>(), "NoLegs", 555 } },
   { 556, { Type2Type<TEX::LegCurrency>(), "LegCurrency", 556 } },
   { 557, { Type2Type<TEX::TotNoSecurityTypes>(), "TotNoSecurityTypes", 557 } },
   { 558, { Type2Type<TEX::NoSecurityTypes>(), "NoSecurityTypes", 558 } },
   { 559, { Type2Type<TEX::SecurityListRequestType, int>(), "SecurityListRequestType", 559, &TEX::realmbases[137] } },
   { 560, { Type2Type<TEX::SecurityRequestResult, int>(), "SecurityRequestResult", 560, &TEX::realmbases[138] } },
   { 561, { Type2Type<TEX::RoundLot>(), "RoundLot", 561 } },
   { 562, { Type2Type<TEX::MinTradeVol>(), "MinTradeVol", 562 } },
   { 563, { Type2Type<TEX::MultiLegRptTypeReq, int>(), "MultiLegRptTypeReq", 563, &TEX::realmbases[139] } },
   { 564, { Type2Type<TEX::LegPositionEffect>(), "LegPositionEffect", 564 } },
   { 565, { Type2Type<TEX::LegCoveredOrUncovered>(), "LegCoveredOrUncovered", 565 } },
   { 566, { Type2Type<TEX::LegPrice>(), "LegPrice", 566 } },
   { 567, { Type2Type<TEX::TradSesStatusRejReason, int>(), "TradSesStatusRejReason", 567, &TEX::realmbases[140] } },
   { 568, { Type2Type<TEX::TradeRequestID>(), "TradeRequestID", 568 } },
   { 569, { Type2Type<TEX::TradeRequestType, int>(), "TradeRequestType", 569, &TEX::realmbases[141] } },
   { 570, { Type2Type<TEX::PreviouslyReported, char>(), "PreviouslyReported", 570, &TEX::realmbases[142] } },
   { 571, { Type2Type<TEX::TradeReportID>(), "TradeReportID", 571 } },
   { 572, { Type2Type<TEX::TradeReportRefID>(), "TradeReportRefID", 572 } },
   { 573, { Type2Type<TEX::MatchStatus, char>(), "MatchStatus", 573, &TEX::realmbases[143] } },
   { 574, { Type2Type<TEX::MatchType, f8String>(), "MatchType", 574, &TEX::realmbases[144] } },
   { 575, { Type2Type<TEX::OddLot, char>(), "OddLot", 575, &TEX::realmbases[145] } },
   { 576, { Type2Type<TEX::NoClearingInstructions>(), "NoClearingInstructions", 576 } },
   { 577, { Type2Type<TEX::ClearingInstruction, int>(), "ClearingInstruction", 577, &TEX::realmbases[146] } },
   { 578, { Type2Type<TEX::TradeInputSource>(), "TradeInputSource", 578 } },
   { 579, { Type2Type<TEX::TradeInputDevice>(), "TradeInputDevice", 579 } },
   { 580, { Type2Type<TEX::NoDates>(), "NoDates", 580 } },
   { 581, { Type2Type<TEX::AccountType, int>(), "AccountType", 581, &TEX::realmbases[147] } },
   { 582, { Type2Type<TEX::CustOrderCapacity, int>(), "CustOrderCapacity", 582, &TEX::realmbases[148] } },
   { 583, { Type2Type<TEX::ClOrdLinkID>(), "ClOrdLinkID", 583 } },
   { 584, { Type2Type<TEX::MassStatusReqID>(), "MassStatusReqID", 584 } },
   { 585, { Type2Type<TEX::MassStatusReqType, int>(), "MassStatusReqType", 585, &TEX::realmbases[149] } },
   { 586, { Type2Type<TEX::OrigOrdModTime>(), "OrigOrdModTime", 586 } },
   { 587, { Type2Type<TEX::LegSettlType>(), "LegSettlType", 587 } },
   { 588, { Type2Type<TEX::LegSettlDate>(), "LegSettlDate", 588 } },
   { 589, { Type2Type<TEX::DayBookingInst, char>(), "DayBookingInst", 589, &TEX::realmbases[150] } },
   { 590, { Type2Type<TEX::BookingUnit, char>(), "BookingUnit", 590, &TEX::realmbases[151] } },
   { 591, { Type2Type<TEX::PreallocMethod, char>(), "PreallocMethod", 591, &TEX::realmbases[152] } },
   { 592, { Type2Type<TEX::UnderlyingCountryOfIssue>(), "UnderlyingCountryOfIssue", 592 } },
   { 593, { Type2Type<TEX::UnderlyingStateOrProvinceOfIssue>(), "UnderlyingStateOrProvinceOfIssue", 593 } },
   { 594, { Type2Type<TEX::UnderlyingLocaleOfIssue>(), "UnderlyingLocaleOfIssue", 594 } },
   { 595, { Type2Type<TEX::UnderlyingInstrRegistry>(), "UnderlyingInstrRegistry", 595 } },
   { 596, { Type2Type<TEX::LegCountryOfIssue>(), "LegCountryOfIssue", 596 } },
   { 597, { Type2Type<TEX::LegStateOrProvinceOfIssue>(), "LegStateOrProvinceOfIssue", 597 } },
   { 598, { Type2Type<TEX::LegLocaleOfIssue>(), "LegLocaleOfIssue", 598 } },
   { 599, { Type2Type<TEX::LegInstrRegistry>(), "LegInstrRegistry", 599 } },
   { 600, { Type2Type<TEX::LegSymbol>(), "LegSymbol", 600 } },
   { 601, { Type2Type<TEX::LegSymbolSfx>(), "LegSymbolSfx", 601 } },
   { 602, { Type2Type<TEX::LegSecurityID>(), "LegSecurityID", 602 } },
   { 603, { Type2Type<TEX::LegSecurityIDSource>(), "LegSecurityIDSource", 603 } },
   { 604, { Type2Type<TEX::NoLegSecurityAltID>(), "NoLegSecurityAltID", 604 } },
   { 605, { Type2Type<TEX::LegSecurityAltID>(), "LegSecurityAltID", 605 } },
   { 606, { Type2Type<TEX::LegSecurityAltIDSource>(), "LegSecurityAltIDSource", 606 } },
   { 607, { Type2Type<TEX::LegProduct>(), "LegProduct", 607 } },
   { 608, { Type2Type<TEX::LegCFICode>(), "LegCFICode", 608 } },
   { 609, { Type2Type<TEX::LegSecurityType>(), "LegSecurityType", 609 } },
   { 610, { Type2Type<TEX::LegMaturityMonthYear>(), "LegMaturityMonthYear", 610 } },
   { 611, { Type2Type<TEX::LegMaturityDate>(), "LegMaturityDate", 611 } },
   { 612, { Type2Type<TEX::LegStrikePrice>(), "LegStrikePrice", 612 } },
   { 613, { Type2Type<TEX::LegOptAttribute>(), "LegOptAttribute", 613 } },
   { 614, { Type2Type<TEX::LegContractMultiplier>(), "LegContractMultiplier", 614 } },
   { 615, { Type2Type<TEX::LegCouponRate>(), "LegCouponRate", 615 } },
   { 616, { Type2Type<TEX::LegSecurityExchange>(), "LegSecurityExchange", 616 } },
   { 617, { Type2Type<TEX::LegIssuer>(), "LegIssuer", 617 } },
   { 618, { Type2Type<TEX::EncodedLegIssuerLen>(), "EncodedLegIssuerLen", 618 } },
   { 619, { Type2Type<TEX::EncodedLegIssuer>(), "EncodedLegIssuer", 619 } },
   { 620, { Type2Type<TEX::LegSecurityDesc>(), "LegSecurityDesc", 620 } },
   { 621, { Type2Type<TEX::EncodedLegSecurityDescLen>(), "EncodedLegSecurityDescLen", 621 } },
   { 622, { Type2Type<TEX::EncodedLegSecurityDesc>(), "EncodedLegSecurityDesc", 622 } },
   { 623, { Type2Type<TEX::LegRatioQty>(), "LegRatioQty", 623 } },
   { 624, { Type2Type<TEX::LegSide>(), "LegSide", 624 } },
   { 625, { Type2Type<TEX::TradingSessionSubID, f8String>(), "TradingSessionSubID", 625, &TEX::realmbases[153] } },
   { 626, { Type2Type<TEX::AllocType, int>(), "AllocType", 626, &TEX::realmbases[154] } },
   { 627, { Type2Type<TEX::NoHops>(), "NoHops", 627 } },
   { 628, { Type2Type<TEX::HopCompID>(), "HopCompID", 628 } },
   { 629, { Type2Type<TEX::HopSendingTime>(), "HopSendingTime", 629 } },
   { 630, { Type2Type<TEX::HopRefID>(), "HopRefID", 630 } },
   { 631, { Type2Type<TEX::MidPx>(), "MidPx", 631 } },
   { 632, { Type2Type<TEX::BidYield>(), "BidYield", 632 } },
   { 633, { Type2Type<TEX::MidYield>(), "MidYield", 633 } },
   { 634, { Type2Type<TEX::OfferYield>(), "OfferYield", 634 } },
   { 635, { Type2Type<TEX::ClearingFeeIndicator, f8String>(), "ClearingFeeIndicator", 635, &TEX::realmbases[155] } },
   { 636, { Type2Type<TEX::WorkingIndicator, char>(), "WorkingIndicator", 636, &TEX::realmbases[156] } },
   { 637, { Type2Type<TEX::LegLastPx>(), "LegLastPx", 637 } },
   { 638, { Type2Type<TEX::PriorityIndicator, int>(), "PriorityIndicator", 638, &TEX::realmbases[157] } },
   { 639, { Type2Type<TEX::PriceImprovement>(), "PriceImprovement", 639 } },
   { 640, { Type2Type<TEX::Price2>(), "Price2", 640 } },
   { 641, { Type2Type<TEX::LastForwardPoints2>(), "LastForwardPoints2", 641 } },
   { 642, { Type2Type<TEX::BidForwardPoints2>(), "BidForwardPoints2", 642 } },
   { 643, { Type2Type<TEX::OfferForwardPoints2>(), "OfferForwardPoints2", 643 } },
   { 644, { Type2Type<TEX::RFQReqID>(), "RFQReqID", 644 } },
   { 645, { Type2Type<TEX::MktBidPx>(), "MktBidPx", 645 } },
   { 646, { Type2Type<TEX::MktOfferPx>(), "MktOfferPx", 646 } },
   { 647, { Type2Type<TEX::MinBidSize>(), "MinBidSize", 647 } },
   { 648, { Type2Type<TEX::MinOfferSize>(), "MinOfferSize", 648 } },
   { 649, { Type2Type<TEX::QuoteStatusReqID>(), "QuoteStatusReqID", 649 } },
   { 650, { Type2Type<TEX::LegalConfirm, char>(), "LegalConfirm", 650, &TEX::realmbases[158] } },
   { 651, { Type2Type<TEX::UnderlyingLastPx>(), "UnderlyingLastPx", 651 } },
   { 652, { Type2Type<TEX::UnderlyingLastQty>(), "UnderlyingLastQty", 652 } },
   { 654, { Type2Type<TEX::LegRefID>(), "LegRefID", 654 } },
   { 655, { Type2Type<TEX::ContraLegRefID>(), "ContraLegRefID", 655 } },
   { 656, { Type2Type<TEX::SettlCurrBidFxRate>(), "SettlCurrBidFxRate", 656 } },
   { 657, { Type2Type<TEX::SettlCurrOfferFxRate>(), "SettlCurrOfferFxRate", 657 } },
   { 658, { Type2Type<TEX::QuoteRequestRejectReason, int>(), "QuoteRequestRejectReason", 658, &TEX::realmbases[159] } },
   { 659, { Type2Type<TEX::SideComplianceID>(), "SideComplianceID", 659 } },
   { 660, { Type2Type<TEX::AcctIDSource, int>(), "AcctIDSource", 660, &TEX::realmbases[160] } },
   { 661, { Type2Type<TEX::AllocAcctIDSource>(), "AllocAcctIDSource", 661 } },
   { 662, { Type2Type<TEX::BenchmarkPrice>(), "BenchmarkPrice", 662 } },
   { 663, { Type2Type<TEX::BenchmarkPriceType>(), "BenchmarkPriceType", 663 } },
   { 664, { Type2Type<TEX::ConfirmID>(), "ConfirmID", 664 } },
   { 665, { Type2Type<TEX::ConfirmStatus, int>(), "ConfirmStatus", 665, &TEX::realmbases[161] } },
   { 666, { Type2Type<TEX::ConfirmTransType, int>(), "ConfirmTransType", 666, &TEX::realmbases[162] } },
   { 667, { Type2Type<TEX::ContractSettlMonth>(), "ContractSettlMonth", 667 } },
   { 668, { Type2Type<TEX::DeliveryForm, int>(), "DeliveryForm", 668, &TEX::realmbases[163] } },
   { 669, { Type2Type<TEX::LastParPx>(), "LastParPx", 669 } },
   { 670, { Type2Type<TEX::NoLegAllocs>(), "NoLegAllocs", 670 } },
   { 671, { Type2Type<TEX::LegAllocAccount>(), "LegAllocAccount", 671 } },
   { 672, { Type2Type<TEX::LegIndividualAllocID>(), "LegIndividualAllocID", 672 } },
   { 673, { Type2Type<TEX::LegAllocQty>(), "LegAllocQty", 673 } },
   { 674, { Type2Type<TEX::LegAllocAcctIDSource>(), "LegAllocAcctIDSource", 674 } },
   { 675, { Type2Type<TEX::LegSettlCurrency>(), "LegSettlCurrency", 675 } },
   { 676, { Type2Type<TEX::LegBenchmarkCurveCurrency>(), "LegBenchmarkCurveCurrency", 676 } },
   { 677, { Type2Type<TEX::LegBenchmarkCurveName>(), "LegBenchmarkCurveName", 677 } },
   { 678, { Type2Type<TEX::LegBenchmarkCurvePoint>(), "LegBenchmarkCurvePoint", 678 } },
   { 679, { Type2Type<TEX::LegBenchmarkPrice>(), "LegBenchmarkPrice", 679 } },
   { 680, { Type2Type<TEX::LegBenchmarkPriceType>(), "LegBenchmarkPriceType", 680 } },
   { 681, { Type2Type<TEX::LegBidPx>(), "LegBidPx", 681 } },
   { 682, { Type2Type<TEX::LegIOIQty>(), "LegIOIQty", 682 } },
   { 683, { Type2Type<TEX::NoLegStipulations>(), "NoLegStipulations", 683 } },
   { 684, { Type2Type<TEX::LegOfferPx>(), "LegOfferPx", 684 } },
   { 685, { Type2Type<TEX::LegOrderQty>(), "LegOrderQty", 685 } },
   { 686, { Type2Type<TEX::LegPriceType>(), "LegPriceType", 686 } },
   { 687, { Type2Type<TEX::LegQty>(), "LegQty", 687 } },
   { 688, { Type2Type<TEX::LegStipulationType>(), "LegStipulationType", 688 } },
   { 689, { Type2Type<TEX::LegStipulationValue>(), "LegStipulationValue", 689 } },
   { 690, { Type2Type<TEX::LegSwapType, int>(), "LegSwapType", 690, &TEX::realmbases[164] } },
   { 691, { Type2Type<TEX::Pool>(), "Pool", 691 } },
   { 692, { Type2Type<TEX::QuotePriceType, int>(), "QuotePriceType", 692, &TEX::realmbases[165] } },
   { 693, { Type2Type<TEX::QuoteRespID>(), "QuoteRespID", 693 } },
   { 694, { Type2Type<TEX::QuoteRespType, int>(), "QuoteRespType", 694, &TEX::realmbases[166] } },
   { 695, { Type2Type<TEX::QuoteQualifier>(), "QuoteQualifier", 695 } },
   { 696, { Type2Type<TEX::YieldRedemptionDate>(), "YieldRedemptionDate", 696 } },
   { 697, { Type2Type<TEX::YieldRedemptionPrice>(), "YieldRedemptionPrice", 697 } },
   { 698, { Type2Type<TEX::YieldRedemptionPriceType>(), "YieldRedemptionPriceType", 698 } },
   { 699, { Type2Type<TEX::BenchmarkSecurityID>(), "BenchmarkSecurityID", 699 } },
   { 700, { Type2Type<TEX::ReversalIndicator>(), "ReversalIndicator", 700 } },
   { 701, { Type2Type<TEX::YieldCalcDate>(), "YieldCalcDate", 701 } },
   { 702, { Type2Type<TEX::NoPositions>(), "NoPositions", 702 } },
   { 703, { Type2Type<TEX::PosType, f8String>(), "PosType", 703, &TEX::realmbases[167] } },
   { 704, { Type2Type<TEX::LongQty>(), "LongQty", 704 } },
   { 705, { Type2Type<TEX::ShortQty>(), "ShortQty", 705 } },
   { 706, { Type2Type<TEX::PosQtyStatus, int>(), "PosQtyStatus", 706, &TEX::realmbases[168] } },
   { 707, { Type2Type<TEX::PosAmtType, f8String>(), "PosAmtType", 707, &TEX::realmbases[169] } },
   { 708, { Type2Type<TEX::PosAmt>(), "PosAmt", 708 } },
   { 709, { Type2Type<TEX::PosTransType, int>(), "PosTransType", 709, &TEX::realmbases[170] } },
   { 710, { Type2Type<TEX::PosReqID>(), "PosReqID", 710 } },
   { 711, { Type2Type<TEX::NoUnderlyings>(), "NoUnderlyings", 711 } },
   { 712, { Type2Type<TEX::PosMaintAction, int>(), "PosMaintAction", 712, &TEX::realmbases[171] } },
   { 713, { Type2Type<TEX::OrigPosReqRefID>(), "OrigPosReqRefID", 713 } },
   { 714, { Type2Type<TEX::PosMaintRptRefID>(), "PosMaintRptRefID", 714 } },
   { 715, { Type2Type<TEX::ClearingBusinessDate>(), "ClearingBusinessDate", 715 } },
   { 716, { Type2Type<TEX::SettlSessID, f8String>(), "SettlSessID", 716, &TEX::realmbases[172] } },
   { 717, { Type2Type<TEX::SettlSessSubID>(), "SettlSessSubID", 717 } },
   { 718, { Type2Type<TEX::AdjustmentType, int>(), "AdjustmentType", 718, &TEX::realmbases[173] } },
   { 719, { Type2Type<TEX::ContraryInstructionIndicator>(), "ContraryInstructionIndicator", 719 } },
   { 720, { Type2Type<TEX::PriorSpreadIndicator>(), "PriorSpreadIndicator", 720 } },
   { 721, { Type2Type<TEX::PosMaintRptID>(), "PosMaintRptID", 721 } },
   { 722, { Type2Type<TEX::PosMaintStatus, int>(), "PosMaintStatus", 722, &TEX::realmbases[174] } },
   { 723, { Type2Type<TEX::PosMaintResult, int>(), "PosMaintResult", 723, &TEX::realmbases[175] } },
   { 724, { Type2Type<TEX::PosReqType, int>(), "PosReqType", 724, &TEX::realmbases[176] } },
   { 725, { Type2Type<TEX::ResponseTransportType, int>(), "ResponseTransportType", 725, &TEX::realmbases[177] } },
   { 726, { Type2Type<TEX::ResponseDestination>(), "ResponseDestination", 726 } },
   { 727, { Type2Type<TEX::TotalNumPosReports>(), "TotalNumPosReports", 727 } },
   { 728, { Type2Type<TEX::PosReqResult, int>(), "PosReqResult", 728, &TEX::realmbases[178] } },
   { 729, { Type2Type<TEX::PosReqStatus, int>(), "PosReqStatus", 729, &TEX::realmbases[179] } },
   { 730, { Type2Type<TEX::SettlPrice>(), "SettlPrice", 730 } },
   { 731, { Type2Type<TEX::SettlPriceType, int>(), "SettlPriceType", 731, &TEX::realmbases[180] } },
   { 732, { Type2Type<TEX::UnderlyingSettlPrice>(), "UnderlyingSettlPrice", 732 } },
   { 733, { Type2Type<TEX::UnderlyingSettlPriceType>(), "UnderlyingSettlPriceType", 733 } },
   { 734, { Type2Type<TEX::PriorSettlPrice>(), "PriorSettlPrice", 734 } },
   { 735, { Type2Type<TEX::NoQuoteQualifiers>(), "NoQuoteQualifiers", 735 } },
   { 736, { Type2Type<TEX::AllocSettlCurrency>(), "AllocSettlCurrency", 736 } },
   { 737, { Type2Type<TEX::AllocSettlCurrAmt>(), "AllocSettlCurrAmt", 737 } },
   { 738, { Type2Type<TEX::InterestAtMaturity>(), "InterestAtMaturity", 738 } },
   { 739, { Type2Type<TEX::LegDatedDate>(), "LegDatedDate", 739 } },
   { 740, { Type2Type<TEX::LegPool>(), "LegPool", 740 } },
   { 741, { Type2Type<TEX::AllocInterestAtMaturity>(), "AllocInterestAtMaturity", 741 } },
   { 742, { Type2Type<TEX::AllocAccruedInterestAmt>(), "AllocAccruedInterestAmt", 742 } },
   { 743, { Type2Type<TEX::DeliveryDate>(), "DeliveryDate", 743 } },
   { 744, { Type2Type<TEX::AssignmentMethod, char>(), "AssignmentMethod", 744, &TEX::realmbases[181] } },
   { 745, { Type2Type<TEX::AssignmentUnit>(), "AssignmentUnit", 745 } },
   { 746, { Type2Type<TEX::OpenInterest>(), "OpenInterest", 746 } },
   { 747, { Type2Type<TEX::ExerciseMethod, char>(), "ExerciseMethod", 747, &TEX::realmbases[182] } },
   { 748, { Type2Type<TEX::TotNumTradeReports>(), "TotNumTradeReports", 748 } },
   { 749, { Type2Type<TEX::TradeRequestResult, int>(), "TradeRequestResult", 749, &TEX::realmbases[183] } },
   { 750, { Type2Type<TEX::TradeRequestStatus, int>(), "TradeRequestStatus", 750, &TEX::realmbases[184] } },
   { 751, { Type2Type<TEX::TradeReportRejectReason, int>(), "TradeReportRejectReason", 751, &TEX::realmbases[185] } },
   { 752, { Type2Type<TEX::SideMultiLegReportingType, int>(), "SideMultiLegReportingType", 752, &TEX::realmbases[186] } },
   { 753, { Type2Type<TEX::NoPosAmt>(), "NoPosAmt", 753 } },
   { 754, { Type2Type<TEX::AutoAcceptIndicator>(), "AutoAcceptIndicator", 754 } },
   { 755, { Type2Type<TEX::AllocReportID>(), "AllocReportID", 755 } },
   { 756, { Type2Type<TEX::NoNested2PartyIDs>(), "NoNested2PartyIDs", 756 } },
   { 757, { Type2Type<TEX::Nested2PartyID>(), "Nested2PartyID", 757 } },
   { 758, { Type2Type<TEX::Nested2PartyIDSource>(), "Nested2PartyIDSource", 758 } },
   { 759, { Type2Type<TEX::Nested2PartyRole>(), "Nested2PartyRole", 759 } },
   { 760, { Type2Type<TEX::Nested2PartySubID>(), "Nested2PartySubID", 760 } },
   { 761, { Type2Type<TEX::BenchmarkSecurityIDSource>(), "BenchmarkSecurityIDSource", 761 } },
   { 762, { Type2Type<TEX::SecuritySubType>(), "SecuritySubType", 762 } },
   { 763, { Type2Type<TEX::UnderlyingSecuritySubType>(), "UnderlyingSecuritySubType", 763 } },
   { 764, { Type2Type<TEX::LegSecuritySubType>(), "LegSecuritySubType", 764 } },
   { 765, { Type2Type<TEX::AllowableOneSidednessPct>(), "AllowableOneSidednessPct", 765 } },
   { 766, { Type2Type<TEX::AllowableOneSidednessValue>(), "AllowableOneSidednessValue", 766 } },
   { 767, { Type2Type<TEX::AllowableOneSidednessCurr>(), "AllowableOneSidednessCurr", 767 } },
   { 768, { Type2Type<TEX::NoTrdRegTimestamps>(), "NoTrdRegTimestamps", 768 } },
   { 769, { Type2Type<TEX::TrdRegTimestamp>(), "TrdRegTimestamp", 769 } },
   { 770, { Type2Type<TEX::TrdRegTimestampType, int>(), "TrdRegTimestampType", 770, &TEX::realmbases[187] } },
   { 771, { Type2Type<TEX::TrdRegTimestampOrigin>(), "TrdRegTimestampOrigin", 771 } },
   { 772, { Type2Type<TEX::ConfirmRefID>(), "ConfirmRefID", 772 } },
   { 773, { Type2Type<TEX::ConfirmType, int>(), "ConfirmType", 773, &TEX::realmbases[188] } },
   { 774, { Type2Type<TEX::ConfirmRejReason, int>(), "ConfirmRejReason", 774, &TEX::realmbases[189] } },
   { 775, { Type2Type<TEX::BookingType, int>(), "BookingType", 775, &TEX::realmbases[190] } },
   { 776, { Type2Type<TEX::IndividualAllocRejCode>(), "IndividualAllocRejCode", 776 } },
   { 777, { Type2Type<TEX::SettlInstMsgID>(), "SettlInstMsgID", 777 } },
   { 778, { Type2Type<TEX::NoSettlInst>(), "NoSettlInst", 778 } },
   { 779, { Type2Type<TEX::LastUpdateTime>(), "LastUpdateTime", 779 } },
   { 780, { Type2Type<TEX::AllocSettlInstType, int>(), "AllocSettlInstType", 780, &TEX::realmbases[191] } },
   { 781, { Type2Type<TEX::NoSettlPartyIDs>(), "NoSettlPartyIDs", 781 } },
   { 782, { Type2Type<TEX::SettlPartyID>(), "SettlPartyID", 782 } },
   { 783, { Type2Type<TEX::SettlPartyIDSource>(), "SettlPartyIDSource", 783 } },
   { 784, { Type2Type<TEX::SettlPartyRole>(), "SettlPartyRole", 784 } },
   { 785, { Type2Type<TEX::SettlPartySubID>(), "SettlPartySubID", 785 } },
   { 786, { Type2Type<TEX::SettlPartySubIDType>(), "SettlPartySubIDType", 786 } },
   { 787, { Type2Type<TEX::DlvyInstType, char>(), "DlvyInstType", 787, &TEX::realmbases[192] } },
   { 788, { Type2Type<TEX::TerminationType, int>(), "TerminationType", 788, &TEX::realmbases[193] } },
   { 789, { Type2Type<TEX::NextExpectedMsgSeqNum>(), "NextExpectedMsgSeqNum", 789 } },
   { 790, { Type2Type<TEX::OrdStatusReqID>(), "OrdStatusReqID", 790 } },
   { 791, { Type2Type<TEX::SettlInstReqID>(), "SettlInstReqID", 791 } },
   { 792, { Type2Type<TEX::SettlInstReqRejCode, int>(), "SettlInstReqRejCode", 792, &TEX::realmbases[194] } },
   { 793, { Type2Type<TEX::SecondaryAllocID>(), "SecondaryAllocID", 793 } },
   { 794, { Type2Type<TEX::AllocReportType, int>(), "AllocReportType", 794, &TEX::realmbases[195] } },
   { 795, { Type2Type<TEX::AllocReportRefID>(), "AllocReportRefID", 795 } },
   { 796, { Type2Type<TEX::AllocCancReplaceReason, int>(), "AllocCancReplaceReason", 796, &TEX::realmbases[196] } },
   { 797, { Type2Type<TEX::CopyMsgIndicator>(), "CopyMsgIndicator", 797 } },
   { 798, { Type2Type<TEX::AllocAccountType, int>(), "AllocAccountType", 798, &TEX::realmbases[197] } },
   { 799, { Type2Type<TEX::OrderAvgPx>(), "OrderAvgPx", 799 } },
   { 800, { Type2Type<TEX::OrderBookingQty>(), "OrderBookingQty", 800 } },
   { 801, { Type2Type<TEX::NoSettlPartySubIDs>(), "NoSettlPartySubIDs", 801 } },
   { 802, { Type2Type<TEX::NoPartySubIDs>(), "NoPartySubIDs", 802 } },
   { 803, { Type2Type<TEX::PartySubIDType, int>(), "PartySubIDType", 803, &TEX::realmbases[198] } },
   { 804, { Type2Type<TEX::NoNestedPartySubIDs>(), "NoNestedPartySubIDs", 804 } },
   { 805, { Type2Type<TEX::NestedPartySubIDType>(), "NestedPartySubIDType", 805 } },
   { 806, { Type2Type<TEX::NoNested2PartySubIDs>(), "NoNested2PartySubIDs", 806 } },
   { 807, { Type2Type<TEX::Nested2PartySubIDType>(), "Nested2PartySubIDType", 807 } },
   { 808, { Type2Type<TEX::AllocIntermedReqType, int>(), "AllocIntermedReqType", 808, &TEX::realmbases[199] } },
   { 810, { Type2Type<TEX::UnderlyingPx>(), "UnderlyingPx", 810 } },
   { 811, { Type2Type<TEX::PriceDelta>(), "PriceDelta", 811 } },
   { 812, { Type2Type<TEX::ApplQueueMax>(), "ApplQueueMax", 812 } },
   { 813, { Type2Type<TEX::ApplQueueDepth>(), "ApplQueueDepth", 813 } },
   { 814, { Type2Type<TEX::ApplQueueResolution, int>(), "ApplQueueResolution", 814, &TEX::realmbases[200] } },
   { 815, { Type2Type<TEX::ApplQueueAction, int>(), "ApplQueueAction", 815, &TEX::realmbases[201] } },
   { 816, { Type2Type<TEX::NoAltMDSource>(), "NoAltMDSource", 816 } },
   { 817, { Type2Type<TEX::AltMDSourceID>(), "AltMDSourceID", 817 } },
   { 818, { Type2Type<TEX::SecondaryTradeReportID>(), "SecondaryTradeReportID", 818 } },
   { 819, { Type2Type<TEX::AvgPxIndicator, int>(), "AvgPxIndicator", 819, &TEX::realmbases[202] } },
   { 820, { Type2Type<TEX::TradeLinkID>(), "TradeLinkID", 820 } },
   { 821, { Type2Type<TEX::OrderInputDevice>(), "OrderInputDevice", 821 } },
   { 822, { Type2Type<TEX::UnderlyingTradingSessionID>(), "UnderlyingTradingSessionID", 822 } },
   { 823, { Type2Type<TEX::UnderlyingTradingSessionSubID>(), "UnderlyingTradingSessionSubID", 823 } },
   { 824, { Type2Type<TEX::TradeLegRefID>(), "TradeLegRefID", 824 } },
   { 825, { Type2Type<TEX::ExchangeRule>(), "ExchangeRule", 825 } },
   { 826, { Type2Type<TEX::TradeAllocIndicator, int>(), "TradeAllocIndicator", 826, &TEX::realmbases[203] } },
   { 827, { Type2Type<TEX::ExpirationCycle, int>(), "ExpirationCycle", 827, &TEX::realmbases[204] } },
   { 828, { Type2Type<TEX::TrdType, int>(), "TrdType", 828, &TEX::realmbases[205] } },
   { 829, { Type2Type<TEX::TrdSubType, int>(), "TrdSubType", 829, &TEX::realmbases[206] } },
   { 830, { Type2Type<TEX::TransferReason>(), "TransferReason", 830 } },
   { 832, { Type2Type<TEX::TotNumAssignmentReports>(), "TotNumAssignmentReports", 832 } },
   { 833, { Type2Type<TEX::AsgnRptID>(), "AsgnRptID", 833 } },
   { 834, { Type2Type<TEX::ThresholdAmount>(), "ThresholdAmount", 834 } },
   { 835, { Type2Type<TEX::PegMoveType, int>(), "PegMoveType", 835, &TEX::realmbases[207] } },
   { 836, { Type2Type<TEX::PegOffsetType, int>(), "PegOffsetType", 836, &TEX::realmbases[208] } },
   { 837, { Type2Type<TEX::PegLimitType, int>(), "PegLimitType", 837, &TEX::realmbases[209] } },
   { 838, { Type2Type<TEX::PegRoundDirection, int>(), "PegRoundDirection", 838, &TEX::realmbases[210] } },
   { 839, { Type2Type<TEX::PeggedPrice>(), "PeggedPrice", 839 } },
   { 840, { Type2Type<TEX::PegScope, int>(), "PegScope", 840, &TEX::realmbases[211] } },
   { 841, { Type2Type<TEX::DiscretionMoveType, int>(), "DiscretionMoveType", 841, &TEX::realmbases[212] } },
   { 842, { Type2Type<TEX::DiscretionOffsetType, int>(), "DiscretionOffsetType", 842, &TEX::realmbases[213] } },
   { 843, { Type2Type<TEX::DiscretionLimitType, int>(), "DiscretionLimitType", 843, &TEX::realmbases[214] } },
   { 844, { Type2Type<TEX::DiscretionRoundDirection, int>(), "DiscretionRoundDirection", 844, &TEX::realmbases[215] } },
   { 845, { Type2Type<TEX::DiscretionPrice>(), "DiscretionPrice", 845 } },
   { 846, { Type2Type<TEX::DiscretionScope, int>(), "DiscretionScope", 846, &TEX::realmbases[216] } },
   { 847, { Type2Type<TEX::TargetStrategy, int>(), "TargetStrategy", 847, &TEX::realmbases[217] } },
   { 848, { Type2Type<TEX::TargetStrategyParameters>(), "TargetStrategyParameters", 848 } },
   { 849, { Type2Type<TEX::ParticipationRate>(), "ParticipationRate", 849 } },
   { 850, { Type2Type<TEX::TargetStrategyPerformance>(), "TargetStrategyPerformance", 850 } },
   { 851, { Type2Type<TEX::LastLiquidityInd, int>(), "LastLiquidityInd", 851, &TEX::realmbases[218] } },
   { 852, { Type2Type<TEX::PublishTrdIndicator, char>(), "PublishTrdIndicator", 852, &TEX::realmbases[219] } },
   { 853, { Type2Type<TEX::ShortSaleReason, int>(), "ShortSaleReason", 853, &TEX::realmbases[220] } },
   { 854, { Type2Type<TEX::QtyType, int>(), "QtyType", 854, &TEX::realmbases[221] } },
   { 855, { Type2Type<TEX::SecondaryTrdType>(), "SecondaryTrdType", 855 } },
   { 856, { Type2Type<TEX::TradeReportType, int>(), "TradeReportType", 856, &TEX::realmbases[222] } },
   { 857, { Type2Type<TEX::AllocNoOrdersType, int>(), "AllocNoOrdersType", 857, &TEX::realmbases[223] } },
   { 858, { Type2Type<TEX::SharedCommission>(), "SharedCommission", 858 } },
   { 859, { Type2Type<TEX::ConfirmReqID>(), "ConfirmReqID", 859 } },
   { 860, { Type2Type<TEX::AvgParPx>(), "AvgParPx", 860 } },
   { 861, { Type2Type<TEX::ReportedPx>(), "ReportedPx", 861 } },
   { 862, { Type2Type<TEX::NoCapacities>(), "NoCapacities", 862 } },
   { 863, { Type2Type<TEX::OrderCapacityQty>(), "OrderCapacityQty", 863 } },
   { 864, { Type2Type<TEX::NoEvents>(), "NoEvents", 864 } },
   { 865, { Type2Type<TEX::EventType, int>(), "EventType", 865, &TEX::realmbases[224] } },
   { 866, { Type2Type<TEX::EventDate>(), "EventDate", 866 } },
   { 867, { Type2Type<TEX::EventPx>(), "EventPx", 867 } },
   { 868, { Type2Type<TEX::EventText>(), "EventText", 868 } },
   { 869, { Type2Type<TEX::PctAtRisk>(), "PctAtRisk", 869 } },
   { 870, { Type2Type<TEX::NoInstrAttrib>(), "NoInstrAttrib", 870 } },
   { 871, { Type2Type<TEX::InstrAttribType, int>(), "InstrAttribType", 871, &TEX::realmbases[225] } },
   { 872, { Type2Type<TEX::InstrAttribValue>(), "InstrAttribValue", 872 } },
   { 873, { Type2Type<TEX::DatedDate>(), "DatedDate", 873 } },
   { 874, { Type2Type<TEX::InterestAccrualDate>(), "InterestAccrualDate", 874 } },
   { 875, { Type2Type<TEX::CPProgram, int>(), "CPProgram", 875, &TEX::realmbases[226] } },
   { 876, { Type2Type<TEX::CPRegType>(), "CPRegType", 876 } },
   { 877, { Type2Type<TEX::UnderlyingCPProgram>(), "UnderlyingCPProgram", 877 } },
   { 878, { Type2Type<TEX::UnderlyingCPRegType>(), "UnderlyingCPRegType", 878 } },
   { 879, { Type2Type<TEX::UnderlyingQty>(), "UnderlyingQty", 879 } },
   { 880, { Type2Type<TEX::TrdMatchID>(), "TrdMatchID", 880 } },
   { 881, { Type2Type<TEX::SecondaryTradeReportRefID>(), "SecondaryTradeReportRefID", 881 } },
   { 882, { Type2Type<TEX::UnderlyingDirtyPrice>(), "UnderlyingDirtyPrice", 882 } },
   { 883, { Type2Type<TEX::UnderlyingEndPrice>(), "UnderlyingEndPrice", 883 } },
   { 884, { Type2Type<TEX::UnderlyingStartValue>(), "UnderlyingStartValue", 884 } },
   { 885, { Type2Type<TEX::UnderlyingCurrentValue>(), "UnderlyingCurrentValue", 885 } },
   { 886, { Type2Type<TEX::UnderlyingEndValue>(), "UnderlyingEndValue", 886 } },
   { 887, { Type2Type<TEX::NoUnderlyingStips>(), "NoUnderlyingStips", 887 } },
   { 888, { Type2Type<TEX::UnderlyingStipType>(), "UnderlyingStipType", 888 } },
   { 889, { Type2Type<TEX::UnderlyingStipValue>(), "UnderlyingStipValue", 889 } },
   { 890, { Type2Type<TEX::MaturityNetMoney>(), "MaturityNetMoney", 890 } },
   { 891, { Type2Type<TEX::MiscFeeBasis, int>(), "MiscFeeBasis", 891, &TEX::realmbases[227] } },
   { 892, { Type2Type<TEX::TotNoAllocs>(), "TotNoAllocs", 892 } },
   { 893, { Type2Type<TEX::LastFragment, char>(), "LastFragment", 893, &TEX::realmbases[228] } },
   { 894, { Type2Type<TEX::CollReqID>(), "CollReqID", 894 } },
   { 895, { Type2Type<TEX::CollAsgnReason, int>(), "CollAsgnReason", 895, &TEX::realmbases[229] } },
   { 896, { Type2Type<TEX::CollInquiryQualifier, int>(), "CollInquiryQualifier", 896, &TEX::realmbases[230] } },
   { 897, { Type2Type<TEX::NoTrades>(), "NoTrades", 897 } },
   { 898, { Type2Type<TEX::MarginRatio>(), "MarginRatio", 898 } },
   { 899, { Type2Type<TEX::MarginExcess>(), "MarginExcess", 899 } },
   { 900, { Type2Type<TEX::TotalNetValue>(), "TotalNetValue", 900 } },
   { 901, { Type2Type<TEX::CashOutstanding>(), "CashOutstanding", 901 } },
   { 902, { Type2Type<TEX::CollAsgnID>(), "CollAsgnID", 902 } },
   { 903, { Type2Type<TEX::CollAsgnTransType, int>(), "CollAsgnTransType", 903, &TEX::realmbases[231] } },
   { 904, { Type2Type<TEX::CollRespID>(), "CollRespID", 904 } },
   { 905, { Type2Type<TEX::CollAsgnRespType, int>(), "CollAsgnRespType", 905, &TEX::realmbases[232] } },
   { 906, { Type2Type<TEX::CollAsgnRejectReason, int>(), "CollAsgnRejectReason", 906, &TEX::realmbases[233] } },
   { 907, { Type2Type<TEX::CollAsgnRefID>(), "CollAsgnRefID", 907 } },
   { 908, { Type2Type<TEX::CollRptID>(), "CollRptID", 908 } },
   { 909, { Type2Type<TEX::CollInquiryID>(), "CollInquiryID", 909 } },
   { 910, { Type2Type<TEX::CollStatus, int>(), "CollStatus", 910, &TEX::realmbases[234] } },
   { 911, { Type2Type<TEX::TotNumReports>(), "TotNumReports", 911 } },
   { 912, { Type2Type<TEX::LastRptRequested, char>(), "LastRptRequested", 912, &TEX::realmbases[235] } },
   { 913, { Type2Type<TEX::AgreementDesc>(), "AgreementDesc", 913 } },
   { 914, { Type2Type<TEX::AgreementID>(), "AgreementID", 914 } },
   { 915, { Type2Type<TEX::AgreementDate>(), "AgreementDate", 915 } },
   { 916, { Type2Type<TEX::StartDate>(), "StartDate", 916 } },
   { 917, { Type2Type<TEX::EndDate>(), "EndDate", 917 } },
   { 918, { Type2Type<TEX::AgreementCurrency>(), "AgreementCurrency", 918 } },
   { 919, { Type2Type<TEX::DeliveryType, int>(), "DeliveryType", 919, &TEX::realmbases[236] } },
   { 920, { Type2Type<TEX::EndAccruedInterestAmt>(), "EndAccruedInterestAmt", 920 } },
   { 921, { Type2Type<TEX::StartCash>(), "StartCash", 921 } },
   { 922, { Type2Type<TEX::EndCash>(), "EndCash", 922 } },
   { 923, { Type2Type<TEX::UserRequestID>(), "UserRequestID", 923 } },
   { 924, { Type2Type<TEX::UserRequestType, int>(), "UserRequestType", 924, &TEX::realmbases[237] } },
   { 925, { Type2Type<TEX::NewPassword>(), "NewPassword", 925 } },
   { 926, { Type2Type<TEX::UserStatus, int>(), "UserStatus", 926, &TEX::realmbases[238] } },
   { 927, { Type2Type<TEX::UserStatusText>(), "UserStatusText", 927 } },
   { 928, { Type2Type<TEX::StatusValue, int>(), "StatusValue", 928, &TEX::realmbases[239] } },
   { 929, { Type2Type<TEX::StatusText>(), "StatusText", 929 } },
   { 930, { Type2Type<TEX::RefCompID>(), "RefCompID", 930 } },
   { 931, { Type2Type<TEX::RefSubID>(), "RefSubID", 931 } },
   { 932, { Type2Type<TEX::NetworkResponseID>(), "NetworkResponseID", 932 } },
   { 933, { Type2Type<TEX::NetworkRequestID>(), "NetworkRequestID", 933 } },
   { 934, { Type2Type<TEX::LastNetworkResponseID>(), "LastNetworkResponseID", 934 } },
   { 935, { Type2Type<TEX::NetworkRequestType, int>(), "NetworkRequestType", 935, &TEX::realmbases[240] } },
   { 936, { Type2Type<TEX::NoCompIDs>(), "NoCompIDs", 936 } },
   { 937, { Type2Type<TEX::NetworkStatusResponseType, int>(), "NetworkStatusResponseType", 937, &TEX::realmbases[241] } },
   { 938, { Type2Type<TEX::NoCollInquiryQualifier>(), "NoCollInquiryQualifier", 938 } },
   { 939, { Type2Type<TEX::TrdRptStatus, int>(), "TrdRptStatus", 939, &TEX::realmbases[242] } },
   { 940, { Type2Type<TEX::AffirmStatus, int>(), "AffirmStatus", 940, &TEX::realmbases[243] } },
   { 941, { Type2Type<TEX::UnderlyingStrikeCurrency>(), "UnderlyingStrikeCurrency", 941 } },
   { 942, { Type2Type<TEX::LegStrikeCurrency>(), "LegStrikeCurrency", 942 } },
   { 943, { Type2Type<TEX::TimeBracket>(), "TimeBracket", 943 } },
   { 944, { Type2Type<TEX::CollAction, int>(), "CollAction", 944, &TEX::realmbases[244] } },
   { 945, { Type2Type<TEX::CollInquiryStatus, int>(), "CollInquiryStatus", 945, &TEX::realmbases[245] } },
   { 946, { Type2Type<TEX::CollInquiryResult, int>(), "CollInquiryResult", 946, &TEX::realmbases[246] } },
   { 947, { Type2Type<TEX::StrikeCurrency>(), "StrikeCurrency", 947 } },
   { 948, { Type2Type<TEX::NoNested3PartyIDs>(), "NoNested3PartyIDs", 948 } },
   { 949, { Type2Type<TEX::Nested3PartyID>(), "Nested3PartyID", 949 } },
   { 950, { Type2Type<TEX::Nested3PartyIDSource>(), "Nested3PartyIDSource", 950 } },
   { 951, { Type2Type<TEX::Nested3PartyRole>(), "Nested3PartyRole", 951 } },
   { 952, { Type2Type<TEX::NoNested3PartySubIDs>(), "NoNested3PartySubIDs", 952 } },
   { 953, { Type2Type<TEX::Nested3PartySubID>(), "Nested3PartySubID", 953 } },
   { 954, { Type2Type<TEX::Nested3PartySubIDType>(), "Nested3PartySubIDType", 954 } },
   { 955, { Type2Type<TEX::LegContractSettlMonth>(), "LegContractSettlMonth", 955 } },
   { 956, { Type2Type<TEX::LegInterestAccrualDate>(), "LegInterestAccrualDate", 956 } },
   { 957, { Type2Type<TEX::NoStrategyParameters>(), "NoStrategyParameters", 957 } },
   { 958, { Type2Type<TEX::StrategyParameterName>(), "StrategyParameterName", 958 } },
   { 959, { Type2Type<TEX::StrategyParameterType, int>(), "StrategyParameterType", 959, &TEX::realmbases[247] } },
   { 960, { Type2Type<TEX::StrategyParameterValue>(), "StrategyParameterValue", 960 } },
   { 961, { Type2Type<TEX::HostCrossID>(), "HostCrossID", 961 } },
   { 962, { Type2Type<TEX::SideTimeInForce>(), "SideTimeInForce", 962 } },
   { 963, { Type2Type<TEX::MDReportID>(), "MDReportID", 963 } },
   { 964, { Type2Type<TEX::SecurityReportID>(), "SecurityReportID", 964 } },
   { 965, { Type2Type<TEX::SecurityStatusID, f8String>(), "SecurityStatusID", 965, &TEX::realmbases[248] } },
   { 966, { Type2Type<TEX::SettleOnOpenFlag>(), "SettleOnOpenFlag", 966 } },
   { 967, { Type2Type<TEX::StrikeMultiplier>(), "StrikeMultiplier", 967 } },
   { 968, { Type2Type<TEX::StrikeValue>(), "StrikeValue", 968 } },
   { 969, { Type2Type<TEX::MinPriceIncrement>(), "MinPriceIncrement", 969 } },
   { 970, { Type2Type<TEX::PositionLimit>(), "PositionLimit", 970 } },
   { 971, { Type2Type<TEX::NTPositionLimit>(), "NTPositionLimit", 971 } },
   { 972, { Type2Type<TEX::UnderlyingAllocationPercent>(), "UnderlyingAllocationPercent", 972 } },
   { 973, { Type2Type<TEX::UnderlyingCashAmount>(), "UnderlyingCashAmount", 973 } },
   { 974, { Type2Type<TEX::UnderlyingCashType, f8String>(), "UnderlyingCashType", 974, &TEX::realmbases[249] } },
   { 975, { Type2Type<TEX::UnderlyingSettlementType, int>(), "UnderlyingSettlementType", 975, &TEX::realmbases[250] } },
   { 976, { Type2Type<TEX::QuantityDate>(), "QuantityDate", 976 } },
   { 977, { Type2Type<TEX::ContIntRptID>(), "ContIntRptID", 977 } },
   { 978, { Type2Type<TEX::LateIndicator>(), "LateIndicator", 978 } },
   { 979, { Type2Type<TEX::InputSource>(), "InputSource", 979 } },
   { 980, { Type2Type<TEX::SecurityUpdateAction, char>(), "SecurityUpdateAction", 980, &TEX::realmbases[251] } },
   { 981, { Type2Type<TEX::NoExpiration>(), "NoExpiration", 981 } },
   { 982, { Type2Type<TEX::ExpirationQtyType, int>(), "ExpirationQtyType", 982, &TEX::realmbases[252] } },
   { 983, { Type2Type<TEX::ExpQty>(), "ExpQty", 983 } },
   { 984, { Type2Type<TEX::NoUnderlyingAmounts>(), "NoUnderlyingAmounts", 984 } },
   { 985, { Type2Type<TEX::UnderlyingPayAmount>(), "UnderlyingPayAmount", 985 } },
   { 986, { Type2Type<TEX::UnderlyingCollectAmount>(), "UnderlyingCollectAmount", 986 } },
   { 987, { Type2Type<TEX::UnderlyingSettlementDate>(), "UnderlyingSettlementDate", 987 } },
   { 988, { Type2Type<TEX::UnderlyingSettlementStatus>(), "UnderlyingSettlementStatus", 988 } },
   { 989, { Type2Type<TEX::SecondaryIndividualAllocID>(), "SecondaryIndividualAllocID", 989 } },
   { 990, { Type2Type<TEX::LegReportID>(), "LegReportID", 990 } },
   { 991, { Type2Type<TEX::RndPx>(), "RndPx", 991 } },
   { 992, { Type2Type<TEX::IndividualAllocType, int>(), "IndividualAllocType", 992, &TEX::realmbases[253] } },
   { 993, { Type2Type<TEX::AllocCustomerCapacity>(), "AllocCustomerCapacity", 993 } },
   { 994, { Type2Type<TEX::TierCode>(), "TierCode", 994 } },
   { 996, { Type2Type<TEX::UnitOfMeasure, f8String>(), "UnitOfMeasure", 996, &TEX::realmbases[254] } },
   { 997, { Type2Type<TEX::TimeUnit, f8String>(), "TimeUnit", 997, &TEX::realmbases[255] } },
   { 998, { Type2Type<TEX::UnderlyingUnitOfMeasure>(), "UnderlyingUnitOfMeasure", 998 } },
   { 999, { Type2Type<TEX::LegUnitOfMeasure>(), "LegUnitOfMeasure", 999 } },
   { 1000, { Type2Type<TEX::UnderlyingTimeUnit>(), "UnderlyingTimeUnit", 1000 } },
   { 1001, { Type2Type<TEX::LegTimeUnit>(), "LegTimeUnit", 1001 } },
   { 1002, { Type2Type<TEX::AllocMethod, int>(), "AllocMethod", 1002, &TEX::realmbases[256] } },
   { 1003, { Type2Type<TEX::TradeID>(), "TradeID", 1003 } },
   { 1005, { Type2Type<TEX::SideTradeReportID>(), "SideTradeReportID", 1005 } },
   { 1006, { Type2Type<TEX::SideFillStationCd>(), "SideFillStationCd", 1006 } },
   { 1007, { Type2Type<TEX::SideReasonCd>(), "SideReasonCd", 1007 } },
   { 1008, { Type2Type<TEX::SideTrdSubTyp>(), "SideTrdSubTyp", 1008 } },
   { 1009, { Type2Type<TEX::SideLastQty>(), "SideLastQty", 1009 } },
   { 1011, { Type2Type<TEX::MessageEventSource>(), "MessageEventSource", 1011 } },
   { 1012, { Type2Type<TEX::SideTrdRegTimestamp>(), "SideTrdRegTimestamp", 1012 } },
   { 1013, { Type2Type<TEX::SideTrdRegTimestampType>(), "SideTrdRegTimestampType", 1013 } },
   { 1014, { Type2Type<TEX::SideTrdRegTimestampSrc>(), "SideTrdRegTimestampSrc", 1014 } },
   { 1015, { Type2Type<TEX::AsOfIndicator, char>(), "AsOfIndicator", 1015, &TEX::realmbases[257] } },
   { 1016, { Type2Type<TEX::NoSideTrdRegTS>(), "NoSideTrdRegTS", 1016 } },
   { 1017, { Type2Type<TEX::LegOptionRatio>(), "LegOptionRatio", 1017 } },
   { 1018, { Type2Type<TEX::NoInstrumentParties>(), "NoInstrumentParties", 1018 } },
   { 1019, { Type2Type<TEX::InstrumentPartyID>(), "InstrumentPartyID", 1019 } },
   { 1020, { Type2Type<TEX::TradeVolume>(), "TradeVolume", 1020 } },
   { 1021, { Type2Type<TEX::MDBookType, int>(), "MDBookType", 1021, &TEX::realmbases[258] } },
   { 1022, { Type2Type<TEX::MDFeedType>(), "MDFeedType", 1022 } },
   { 1023, { Type2Type<TEX::MDPriceLevel>(), "MDPriceLevel", 1023 } },
   { 1024, { Type2Type<TEX::MDOriginType, int>(), "MDOriginType", 1024, &TEX::realmbases[259] } },
   { 1025, { Type2Type<TEX::FirstPx>(), "FirstPx", 1025 } },
   { 1026, { Type2Type<TEX::MDEntrySpotRate>(), "MDEntrySpotRate", 1026 } },
   { 1027, { Type2Type<TEX::MDEntryForwardPoints>(), "MDEntryForwardPoints", 1027 } },
   { 1028, { Type2Type<TEX::ManualOrderIndicator>(), "ManualOrderIndicator", 1028 } },
   { 1029, { Type2Type<TEX::CustDirectedOrder>(), "CustDirectedOrder", 1029 } },
   { 1030, { Type2Type<TEX::ReceivedDeptID>(), "ReceivedDeptID", 1030 } },
   { 1031, { Type2Type<TEX::CustOrderHandlingInst, f8String>(), "CustOrderHandlingInst", 1031, &TEX::realmbases[260] } },
   { 1032, { Type2Type<TEX::OrderHandlingInstSource, int>(), "OrderHandlingInstSource", 1032, &TEX::realmbases[261] } },
   { 1033, { Type2Type<TEX::DeskType, f8String>(), "DeskType", 1033, &TEX::realmbases[262] } },
   { 1034, { Type2Type<TEX::DeskTypeSource, int>(), "DeskTypeSource", 1034, &TEX::realmbases[263] } },
   { 1035, { Type2Type<TEX::DeskOrderHandlingInst, f8String>(), "DeskOrderHandlingInst", 1035, &TEX::realmbases[264] } },
   { 1036, { Type2Type<TEX::ExecAckStatus, char>(), "ExecAckStatus", 1036, &TEX::realmbases[265] } },
   { 1037, { Type2Type<TEX::UnderlyingDeliveryAmount>(), "UnderlyingDeliveryAmount", 1037 } },
   { 1038, { Type2Type<TEX::UnderlyingCapValue>(), "UnderlyingCapValue", 1038 } },
   { 1039, { Type2Type<TEX::UnderlyingSettlMethod>(), "UnderlyingSettlMethod", 1039 } },
   { 1040, { Type2Type<TEX::SecondaryTradeID>(), "SecondaryTradeID", 1040 } },
   { 1041, { Type2Type<TEX::FirmTradeID>(), "FirmTradeID", 1041 } },
   { 1042, { Type2Type<TEX::SecondaryFirmTradeID>(), "SecondaryFirmTradeID", 1042 } },
   { 1043, { Type2Type<TEX::CollApplType, int>(), "CollApplType", 1043, &TEX::realmbases[266] } },
   { 1044, { Type2Type<TEX::UnderlyingAdjustedQuantity>(), "UnderlyingAdjustedQuantity", 1044 } },
   { 1045, { Type2Type<TEX::UnderlyingFXRate>(), "UnderlyingFXRate", 1045 } },
   { 1046, { Type2Type<TEX::UnderlyingFXRateCalc, char>(), "UnderlyingFXRateCalc", 1046, &TEX::realmbases[267] } },
   { 1047, { Type2Type<TEX::AllocPositionEffect, char>(), "AllocPositionEffect", 1047, &TEX::realmbases[268] } },
   { 1048, { Type2Type<TEX::DealingCapacity, char>(), "DealingCapacity", 1048, &TEX::realmbases[269] } },
   { 1049, { Type2Type<TEX::InstrmtAssignmentMethod>(), "InstrmtAssignmentMethod", 1049 } },
   { 1050, { Type2Type<TEX::InstrumentPartyIDSource>(), "InstrumentPartyIDSource", 1050 } },
   { 1051, { Type2Type<TEX::InstrumentPartyRole>(), "InstrumentPartyRole", 1051 } },
   { 1052, { Type2Type<TEX::NoInstrumentPartySubIDs>(), "NoInstrumentPartySubIDs", 1052 } },
   { 1053, { Type2Type<TEX::InstrumentPartySubID>(), "InstrumentPartySubID", 1053 } },
   { 1054, { Type2Type<TEX::InstrumentPartySubIDType>(), "InstrumentPartySubIDType", 1054 } },
   { 1055, { Type2Type<TEX::PositionCurrency>(), "PositionCurrency", 1055 } },
   { 1056, { Type2Type<TEX::CalculatedCcyLastQty>(), "CalculatedCcyLastQty", 1056 } },
   { 1057, { Type2Type<TEX::AggressorIndicator, char>(), "AggressorIndicator", 1057, &TEX::realmbases[270] } },
   { 1058, { Type2Type<TEX::NoUndlyInstrumentParties>(), "NoUndlyInstrumentParties", 1058 } },
   { 1059, { Type2Type<TEX::UnderlyingInstrumentPartyID>(), "UnderlyingInstrumentPartyID", 1059 } },
   { 1060, { Type2Type<TEX::UnderlyingInstrumentPartyIDSource>(), "UnderlyingInstrumentPartyIDSource", 1060 } },
   { 1061, { Type2Type<TEX::UnderlyingInstrumentPartyRole>(), "UnderlyingInstrumentPartyRole", 1061 } },
   { 1062, { Type2Type<TEX::NoUndlyInstrumentPartySubIDs>(), "NoUndlyInstrumentPartySubIDs", 1062 } },
   { 1063, { Type2Type<TEX::UnderlyingInstrumentPartySubID>(), "UnderlyingInstrumentPartySubID", 1063 } },
   { 1064, { Type2Type<TEX::UnderlyingInstrumentPartySubIDType>(), "UnderlyingInstrumentPartySubIDType", 1064 } },
   { 1065, { Type2Type<TEX::BidSwapPoints>(), "BidSwapPoints", 1065 } },
   { 1066, { Type2Type<TEX::OfferSwapPoints>(), "OfferSwapPoints", 1066 } },
   { 1067, { Type2Type<TEX::LegBidForwardPoints>(), "LegBidForwardPoints", 1067 } },
   { 1068, { Type2Type<TEX::LegOfferForwardPoints>(), "LegOfferForwardPoints", 1068 } },
   { 1069, { Type2Type<TEX::SwapPoints>(), "SwapPoints", 1069 } },
   { 1070, { Type2Type<TEX::MDQuoteType, int>(), "MDQuoteType", 1070, &TEX::realmbases[271] } },
   { 1071, { Type2Type<TEX::LastSwapPoints>(), "LastSwapPoints", 1071 } },
   { 1072, { Type2Type<TEX::SideGrossTradeAmt>(), "SideGrossTradeAmt", 1072 } },
   { 1073, { Type2Type<TEX::LegLastForwardPoints>(), "LegLastForwardPoints", 1073 } },
   { 1074, { Type2Type<TEX::LegCalculatedCcyLastQty>(), "LegCalculatedCcyLastQty", 1074 } },
   { 1075, { Type2Type<TEX::LegGrossTradeAmt>(), "LegGrossTradeAmt", 1075 } },
   { 1079, { Type2Type<TEX::MaturityTime>(), "MaturityTime", 1079 } },
   { 1080, { Type2Type<TEX::RefOrderID>(), "RefOrderID", 1080 } },
   { 1081, { Type2Type<TEX::RefOrderIDSource, char>(), "RefOrderIDSource", 1081, &TEX::realmbases[272] } },
   { 1082, { Type2Type<TEX::SecondaryDisplayQty>(), "SecondaryDisplayQty", 1082 } },
   { 1083, { Type2Type<TEX::DisplayWhen, char>(), "DisplayWhen", 1083, &TEX::realmbases[273] } },
   { 1084, { Type2Type<TEX::DisplayMethod, char>(), "DisplayMethod", 1084, &TEX::realmbases[274] } },
   { 1085, { Type2Type<TEX::DisplayLowQty>(), "DisplayLowQty", 1085 } },
   { 1086, { Type2Type<TEX::DisplayHighQty>(), "DisplayHighQty", 1086 } },
   { 1087, { Type2Type<TEX::DisplayMinIncr>(), "DisplayMinIncr", 1087 } },
   { 1088, { Type2Type<TEX::RefreshQty>(), "RefreshQty", 1088 } },
   { 1089, { Type2Type<TEX::MatchIncrement>(), "MatchIncrement", 1089 } },
   { 1090, { Type2Type<TEX::MaxPriceLevels>(), "MaxPriceLevels", 1090 } },
   { 1091, { Type2Type<TEX::PreTradeAnonymity>(), "PreTradeAnonymity", 1091 } },
   { 1092, { Type2Type<TEX::PriceProtectionScope, char>(), "PriceProtectionScope", 1092, &TEX::realmbases[275] } },
   { 1093, { Type2Type<TEX::LotType, char>(), "LotType", 1093, &TEX::realmbases[276] } },
   { 1094, { Type2Type<TEX::PegPriceType, int>(), "PegPriceType", 1094, &TEX::realmbases[277] } },
   { 1095, { Type2Type<TEX::PeggedRefPrice>(), "PeggedRefPrice", 1095 } },
   { 1096, { Type2Type<TEX::PegSecurityIDSource>(), "PegSecurityIDSource", 1096 } },
   { 1097, { Type2Type<TEX::PegSecurityID>(), "PegSecurityID", 1097 } },
   { 1098, { Type2Type<TEX::PegSymbol>(), "PegSymbol", 1098 } },
   { 1099, { Type2Type<TEX::PegSecurityDesc>(), "PegSecurityDesc", 1099 } },
   { 1100, { Type2Type<TEX::TriggerType, char>(), "TriggerType", 1100, &TEX::realmbases[278] } },
   { 1101, { Type2Type<TEX::TriggerAction, char>(), "TriggerAction", 1101, &TEX::realmbases[279] } },
   { 1102, { Type2Type<TEX::TriggerPrice>(), "TriggerPrice", 1102 } },
   { 1103, { Type2Type<TEX::TriggerSymbol>(), "TriggerSymbol", 1103 } },
   { 1104, { Type2Type<TEX::TriggerSecurityID>(), "TriggerSecurityID", 1104 } },
   { 1105, { Type2Type<TEX::TriggerSecurityIDSource>(), "TriggerSecurityIDSource", 1105 } },
   { 1106, { Type2Type<TEX::TriggerSecurityDesc>(), "TriggerSecurityDesc", 1106 } },
   { 1107, { Type2Type<TEX::TriggerPriceType, char>(), "TriggerPriceType", 1107, &TEX::realmbases[280] } },
   { 1108, { Type2Type<TEX::TriggerPriceTypeScope, char>(), "TriggerPriceTypeScope", 1108, &TEX::realmbases[281] } },
   { 1109, { Type2Type<TEX::TriggerPriceDirection, char>(), "TriggerPriceDirection", 1109, &TEX::realmbases[282] } },
   { 1110, { Type2Type<TEX::TriggerNewPrice>(), "TriggerNewPrice", 1110 } },
   { 1111, { Type2Type<TEX::TriggerOrderType, char>(), "TriggerOrderType", 1111, &TEX::realmbases[283] } },
   { 1112, { Type2Type<TEX::TriggerNewQty>(), "TriggerNewQty", 1112 } },
   { 1113, { Type2Type<TEX::TriggerTradingSessionID>(), "TriggerTradingSessionID", 1113 } },
   { 1114, { Type2Type<TEX::TriggerTradingSessionSubID>(), "TriggerTradingSessionSubID", 1114 } },
   { 1115, { Type2Type<TEX::OrderCategory, char>(), "OrderCategory", 1115, &TEX::realmbases[284] } },
   { 1116, { Type2Type<TEX::NoRootPartyIDs>(), "NoRootPartyIDs", 1116 } },
   { 1117, { Type2Type<TEX::RootPartyID>(), "RootPartyID", 1117 } },
   { 1118, { Type2Type<TEX::RootPartyIDSource>(), "RootPartyIDSource", 1118 } },
   { 1119, { Type2Type<TEX::RootPartyRole>(), "RootPartyRole", 1119 } },
   { 1120, { Type2Type<TEX::NoRootPartySubIDs>(), "NoRootPartySubIDs", 1120 } },
   { 1121, { Type2Type<TEX::RootPartySubID>(), "RootPartySubID", 1121 } },
   { 1122, { Type2Type<TEX::RootPartySubIDType>(), "RootPartySubIDType", 1122 } },
   { 1123, { Type2Type<TEX::TradeHandlingInstr, char>(), "TradeHandlingInstr", 1123, &TEX::realmbases[285] } },
   { 1124, { Type2Type<TEX::OrigTradeHandlingInstr>(), "OrigTradeHandlingInstr", 1124 } },
   { 1125, { Type2Type<TEX::OrigTradeDate>(), "OrigTradeDate", 1125 } },
   { 1126, { Type2Type<TEX::OrigTradeID>(), "OrigTradeID", 1126 } },
   { 1127, { Type2Type<TEX::OrigSecondaryTradeID>(), "OrigSecondaryTradeID", 1127 } },
   { 1128, { Type2Type<TEX::ApplVerID, f8String>(), "ApplVerID", 1128, &TEX::realmbases[286] } },
   { 1129, { Type2Type<TEX::CstmApplVerID>(), "CstmApplVerID", 1129 } },
   { 1130, { Type2Type<TEX::RefApplVerID>(), "RefApplVerID", 1130 } },
   { 1131, { Type2Type<TEX::RefCstmApplVerID>(), "RefCstmApplVerID", 1131 } },
   { 1132, { Type2Type<TEX::TZTransactTime>(), "TZTransactTime", 1132 } },
   { 1133, { Type2Type<TEX::ExDestinationIDSource, char>(), "ExDestinationIDSource", 1133, &TEX::realmbases[287] } },
   { 1134, { Type2Type<TEX::ReportedPxDiff>(), "ReportedPxDiff", 1134 } },
   { 1135, { Type2Type<TEX::RptSys>(), "RptSys", 1135 } },
   { 1136, { Type2Type<TEX::AllocClearingFeeIndicator>(), "AllocClearingFeeIndicator", 1136 } },
   { 1137, { Type2Type<TEX::DefaultApplVerID, f8String>(), "DefaultApplVerID", 1137, &TEX::realmbases[288] } },
   { 1138, { Type2Type<TEX::DisplayQty>(), "DisplayQty", 1138 } },
   { 1139, { Type2Type<TEX::ExchangeSpecialInstructions>(), "ExchangeSpecialInstructions", 1139 } },
   { 1140, { Type2Type<TEX::MaxTradeVol>(), "MaxTradeVol", 1140 } },
   { 1141, { Type2Type<TEX::NoMDFeedTypes>(), "NoMDFeedTypes", 1141 } },
   { 1142, { Type2Type<TEX::MatchAlgorithm>(), "MatchAlgorithm", 1142 } },
   { 1143, { Type2Type<TEX::MaxPriceVariation>(), "MaxPriceVariation", 1143 } },
   { 1144, { Type2Type<TEX::ImpliedMarketIndicator, int>(), "ImpliedMarketIndicator", 1144, &TEX::realmbases[289] } },
   { 1145, { Type2Type<TEX::EventTime>(), "EventTime", 1145 } },
   { 1146, { Type2Type<TEX::MinPriceIncrementAmount>(), "MinPriceIncrementAmount", 1146 } },
   { 1147, { Type2Type<TEX::UnitOfMeasureQty>(), "UnitOfMeasureQty", 1147 } },
   { 1148, { Type2Type<TEX::LowLimitPrice>(), "LowLimitPrice", 1148 } },
   { 1149, { Type2Type<TEX::HighLimitPrice>(), "HighLimitPrice", 1149 } },
   { 1150, { Type2Type<TEX::TradingReferencePrice>(), "TradingReferencePrice", 1150 } },
   { 1151, { Type2Type<TEX::SecurityGroup>(), "SecurityGroup", 1151 } },
   { 1152, { Type2Type<TEX::LegNumber>(), "LegNumber", 1152 } },
   { 1153, { Type2Type<TEX::SettlementCycleNo>(), "SettlementCycleNo", 1153 } },
   { 1154, { Type2Type<TEX::SideCurrency>(), "SideCurrency", 1154 } },
   { 1155, { Type2Type<TEX::SideSettlCurrency>(), "SideSettlCurrency", 1155 } },
   { 1157, { Type2Type<TEX::CcyAmt>(), "CcyAmt", 1157 } },
   { 1158, { Type2Type<TEX::NoSettlDetails>(), "NoSettlDetails", 1158 } },
   { 1159, { Type2Type<TEX::SettlObligMode, int>(), "SettlObligMode", 1159, &TEX::realmbases[290] } },
   { 1160, { Type2Type<TEX::SettlObligMsgID>(), "SettlObligMsgID", 1160 } },
   { 1161, { Type2Type<TEX::SettlObligID>(), "SettlObligID", 1161 } },
   { 1162, { Type2Type<TEX::SettlObligTransType, char>(), "SettlObligTransType", 1162, &TEX::realmbases[291] } },
   { 1163, { Type2Type<TEX::SettlObligRefID>(), "SettlObligRefID", 1163 } },
   { 1164, { Type2Type<TEX::SettlObligSource, char>(), "SettlObligSource", 1164, &TEX::realmbases[292] } },
   { 1165, { Type2Type<TEX::NoSettlOblig>(), "NoSettlOblig", 1165 } },
   { 1166, { Type2Type<TEX::QuoteMsgID>(), "QuoteMsgID", 1166 } },
   { 1167, { Type2Type<TEX::QuoteEntryStatus, int>(), "QuoteEntryStatus", 1167, &TEX::realmbases[293] } },
   { 1168, { Type2Type<TEX::TotNoCxldQuotes>(), "TotNoCxldQuotes", 1168 } },
   { 1169, { Type2Type<TEX::TotNoAccQuotes>(), "TotNoAccQuotes", 1169 } },
   { 1170, { Type2Type<TEX::TotNoRejQuotes>(), "TotNoRejQuotes", 1170 } },
   { 1171, { Type2Type<TEX::PrivateQuote>(), "PrivateQuote", 1171 } },
   { 1172, { Type2Type<TEX::RespondentType, int>(), "RespondentType", 1172, &TEX::realmbases[294] } },
   { 1173, { Type2Type<TEX::MDSubBookType>(), "MDSubBookType", 1173 } },
   { 1174, { Type2Type<TEX::SecurityTradingEvent, int>(), "SecurityTradingEvent", 1174, &TEX::realmbases[295] } },
   { 1175, { Type2Type<TEX::NoStatsIndicators>(), "NoStatsIndicators", 1175 } },
   { 1176, { Type2Type<TEX::StatsType, int>(), "StatsType", 1176, &TEX::realmbases[296] } },
   { 1177, { Type2Type<TEX::NoOfSecSizes>(), "NoOfSecSizes", 1177 } },
   { 1178, { Type2Type<TEX::MDSecSizeType, int>(), "MDSecSizeType", 1178, &TEX::realmbases[297] } },
   { 1179, { Type2Type<TEX::MDSecSize>(), "MDSecSize", 1179 } },
   { 1180, { Type2Type<TEX::ApplID>(), "ApplID", 1180 } },
   { 1181, { Type2Type<TEX::ApplSeqNum>(), "ApplSeqNum", 1181 } },
   { 1182, { Type2Type<TEX::ApplBegSeqNum>(), "ApplBegSeqNum", 1182 } },
   { 1183, { Type2Type<TEX::ApplEndSeqNum>(), "ApplEndSeqNum", 1183 } },
   { 1184, { Type2Type<TEX::SecurityXMLLen>(), "SecurityXMLLen", 1184 } },
   { 1185, { Type2Type<TEX::SecurityXML>(), "SecurityXML", 1185 } },
   { 1186, { Type2Type<TEX::SecurityXMLSchema>(), "SecurityXMLSchema", 1186 } },
   { 1187, { Type2Type<TEX::RefreshIndicator>(), "RefreshIndicator", 1187 } },
   { 1188, { Type2Type<TEX::Volatility>(), "Volatility", 1188 } },
   { 1189, { Type2Type<TEX::TimeToExpiration>(), "TimeToExpiration", 1189 } },
   { 1190, { Type2Type<TEX::RiskFreeRate>(), "RiskFreeRate", 1190 } },
   { 1191, { Type2Type<TEX::PriceUnitOfMeasure>(), "PriceUnitOfMeasure", 1191 } },
   { 1192, { Type2Type<TEX::PriceUnitOfMeasureQty>(), "PriceUnitOfMeasureQty", 1192 } },
   { 1193, { Type2Type<TEX::SettlMethod, char>(), "SettlMethod", 1193, &TEX::realmbases[298] } },
   { 1194, { Type2Type<TEX::ExerciseStyle, int>(), "ExerciseStyle", 1194, &TEX::realmbases[299] } },
   { 1195, { Type2Type<TEX::OptPayoutAmount>(), "OptPayoutAmount", 1195 } },
   { 1196, { Type2Type<TEX::PriceQuoteMethod, f8String>(), "PriceQuoteMethod", 1196, &TEX::realmbases[300] } },
   { 1197, { Type2Type<TEX::ValuationMethod, f8String>(), "ValuationMethod", 1197, &TEX::realmbases[301] } },
   { 1198, { Type2Type<TEX::ListMethod, int>(), "ListMethod", 1198, &TEX::realmbases[302] } },
   { 1199, { Type2Type<TEX::CapPrice>(), "CapPrice", 1199 } },
   { 1200, { Type2Type<TEX::FloorPrice>(), "FloorPrice", 1200 } },
   { 1201, { Type2Type<TEX::NoStrikeRules>(), "NoStrikeRules", 1201 } },
   { 1202, { Type2Type<TEX::StartStrikePxRange>(), "StartStrikePxRange", 1202 } },
   { 1203, { Type2Type<TEX::EndStrikePxRange>(), "EndStrikePxRange", 1203 } },
   { 1204, { Type2Type<TEX::StrikeIncrement>(), "StrikeIncrement", 1204 } },
   { 1205, { Type2Type<TEX::NoTickRules>(), "NoTickRules", 1205 } },
   { 1206, { Type2Type<TEX::StartTickPriceRange>(), "StartTickPriceRange", 1206 } },
   { 1207, { Type2Type<TEX::EndTickPriceRange>(), "EndTickPriceRange", 1207 } },
   { 1208, { Type2Type<TEX::TickIncrement>(), "TickIncrement", 1208 } },
   { 1209, { Type2Type<TEX::TickRuleType, int>(), "TickRuleType", 1209, &TEX::realmbases[303] } },
   { 1210, { Type2Type<TEX::NestedInstrAttribType>(), "NestedInstrAttribType", 1210 } },
   { 1211, { Type2Type<TEX::NestedInstrAttribValue>(), "NestedInstrAttribValue", 1211 } },
   { 1212, { Type2Type<TEX::LegMaturityTime>(), "LegMaturityTime", 1212 } },
   { 1213, { Type2Type<TEX::UnderlyingMaturityTime>(), "UnderlyingMaturityTime", 1213 } },
   { 1214, { Type2Type<TEX::DerivativeSymbol>(), "DerivativeSymbol", 1214 } },
   { 1215, { Type2Type<TEX::DerivativeSymbolSfx>(), "DerivativeSymbolSfx", 1215 } },
   { 1216, { Type2Type<TEX::DerivativeSecurityID>(), "DerivativeSecurityID", 1216 } },
   { 1217, { Type2Type<TEX::DerivativeSecurityIDSource>(), "DerivativeSecurityIDSource", 1217 } },
   { 1218, { Type2Type<TEX::NoDerivativeSecurityAltID>(), "NoDerivativeSecurityAltID", 1218 } },
   { 1219, { Type2Type<TEX::DerivativeSecurityAltID>(), "DerivativeSecurityAltID", 1219 } },
   { 1220, { Type2Type<TEX::DerivativeSecurityAltIDSource>(), "DerivativeSecurityAltIDSource", 1220 } },
   { 1221, { Type2Type<TEX::SecondaryLowLimitPrice>(), "SecondaryLowLimitPrice", 1221 } },
   { 1222, { Type2Type<TEX::MaturityRuleID>(), "MaturityRuleID", 1222 } },
   { 1223, { Type2Type<TEX::StrikeRuleID>(), "StrikeRuleID", 1223 } },
   { 1224, { Type2Type<TEX::LegUnitOfMeasureQty>(), "LegUnitOfMeasureQty", 1224 } },
   { 1225, { Type2Type<TEX::DerivativeOptPayAmount>(), "DerivativeOptPayAmount", 1225 } },
   { 1226, { Type2Type<TEX::EndMaturityMonthYear>(), "EndMaturityMonthYear", 1226 } },
   { 1227, { Type2Type<TEX::ProductComplex>(), "ProductComplex", 1227 } },
   { 1228, { Type2Type<TEX::DerivativeProductComplex>(), "DerivativeProductComplex", 1228 } },
   { 1229, { Type2Type<TEX::MaturityMonthYearIncrement>(), "MaturityMonthYearIncrement", 1229 } },
   { 1230, { Type2Type<TEX::SecondaryHighLimitPrice>(), "SecondaryHighLimitPrice", 1230 } },
   { 1231, { Type2Type<TEX::MinLotSize>(), "MinLotSize", 1231 } },
   { 1232, { Type2Type<TEX::NoExecInstRules>(), "NoExecInstRules", 1232 } },
   { 1234, { Type2Type<TEX::NoLotTypeRules>(), "NoLotTypeRules", 1234 } },
   { 1235, { Type2Type<TEX::NoMatchRules>(), "NoMatchRules", 1235 } },
   { 1236, { Type2Type<TEX::NoMaturityRules>(), "NoMaturityRules", 1236 } },
   { 1237, { Type2Type<TEX::NoOrdTypeRules>(), "NoOrdTypeRules", 1237 } },
   { 1239, { Type2Type<TEX::NoTimeInForceRules>(), "NoTimeInForceRules", 1239 } },
   { 1240, { Type2Type<TEX::SecondaryTradingReferencePrice>(), "SecondaryTradingReferencePrice", 1240 } },
   { 1241, { Type2Type<TEX::StartMaturityMonthYear>(), "StartMaturityMonthYear", 1241 } },
   { 1242, { Type2Type<TEX::FlexProductEligibilityIndicator>(), "FlexProductEligibilityIndicator", 1242 } },
   { 1243, { Type2Type<TEX::DerivFlexProductEligibilityIndicator>(), "DerivFlexProductEligibilityIndicator", 1243 } },
   { 1244, { Type2Type<TEX::FlexibleIndicator>(), "FlexibleIndicator", 1244 } },
   { 1245, { Type2Type<TEX::TradingCurrency>(), "TradingCurrency", 1245 } },
   { 1246, { Type2Type<TEX::DerivativeProduct>(), "DerivativeProduct", 1246 } },
   { 1247, { Type2Type<TEX::DerivativeSecurityGroup>(), "DerivativeSecurityGroup", 1247 } },
   { 1248, { Type2Type<TEX::DerivativeCFICode>(), "DerivativeCFICode", 1248 } },
   { 1249, { Type2Type<TEX::DerivativeSecurityType>(), "DerivativeSecurityType", 1249 } },
   { 1250, { Type2Type<TEX::DerivativeSecuritySubType>(), "DerivativeSecuritySubType", 1250 } },
   { 1251, { Type2Type<TEX::DerivativeMaturityMonthYear>(), "DerivativeMaturityMonthYear", 1251 } },
   { 1252, { Type2Type<TEX::DerivativeMaturityDate>(), "DerivativeMaturityDate", 1252 } },
   { 1253, { Type2Type<TEX::DerivativeMaturityTime>(), "DerivativeMaturityTime", 1253 } },
   { 1254, { Type2Type<TEX::DerivativeSettleOnOpenFlag>(), "DerivativeSettleOnOpenFlag", 1254 } },
   { 1255, { Type2Type<TEX::DerivativeInstrmtAssignmentMethod>(), "DerivativeInstrmtAssignmentMethod", 1255 } },
   { 1256, { Type2Type<TEX::DerivativeSecurityStatus>(), "DerivativeSecurityStatus", 1256 } },
   { 1257, { Type2Type<TEX::DerivativeInstrRegistry>(), "DerivativeInstrRegistry", 1257 } },
   { 1258, { Type2Type<TEX::DerivativeCountryOfIssue>(), "DerivativeCountryOfIssue", 1258 } },
   { 1259, { Type2Type<TEX::DerivativeStateOrProvinceOfIssue>(), "DerivativeStateOrProvinceOfIssue", 1259 } },
   { 1260, { Type2Type<TEX::DerivativeLocaleOfIssue>(), "DerivativeLocaleOfIssue", 1260 } },
   { 1261, { Type2Type<TEX::DerivativeStrikePrice>(), "DerivativeStrikePrice", 1261 } },
   { 1262, { Type2Type<TEX::DerivativeStrikeCurrency>(), "DerivativeStrikeCurrency", 1262 } },
   { 1263, { Type2Type<TEX::DerivativeStrikeMultiplier>(), "DerivativeStrikeMultiplier", 1263 } },
   { 1264, { Type2Type<TEX::DerivativeStrikeValue>(), "DerivativeStrikeValue", 1264 } },
   { 1265, { Type2Type<TEX::DerivativeOptAttribute>(), "DerivativeOptAttribute", 1265 } },
   { 1266, { Type2Type<TEX::DerivativeContractMultiplier>(), "DerivativeContractMultiplier", 1266 } },
   { 1267, { Type2Type<TEX::DerivativeMinPriceIncrement>(), "DerivativeMinPriceIncrement", 1267 } },
   { 1268, { Type2Type<TEX::DerivativeMinPriceIncrementAmount>(), "DerivativeMinPriceIncrementAmount", 1268 } },
   { 1269, { Type2Type<TEX::DerivativeUnitOfMeasure>(), "DerivativeUnitOfMeasure", 1269 } },
   { 1270, { Type2Type<TEX::DerivativeUnitOfMeasureQty>(), "DerivativeUnitOfMeasureQty", 1270 } },
   { 1271, { Type2Type<TEX::DerivativeTimeUnit>(), "DerivativeTimeUnit", 1271 } },
   { 1272, { Type2Type<TEX::DerivativeSecurityExchange>(), "DerivativeSecurityExchange", 1272 } },
   { 1273, { Type2Type<TEX::DerivativePositionLimit>(), "DerivativePositionLimit", 1273 } },
   { 1274, { Type2Type<TEX::DerivativeNTPositionLimit>(), "DerivativeNTPositionLimit", 1274 } },
   { 1275, { Type2Type<TEX::DerivativeIssuer>(), "DerivativeIssuer", 1275 } },
   { 1276, { Type2Type<TEX::DerivativeIssueDate>(), "DerivativeIssueDate", 1276 } },
   { 1277, { Type2Type<TEX::DerivativeEncodedIssuerLen>(), "DerivativeEncodedIssuerLen", 1277 } },
   { 1278, { Type2Type<TEX::DerivativeEncodedIssuer>(), "DerivativeEncodedIssuer", 1278 } },
   { 1279, { Type2Type<TEX::DerivativeSecurityDesc>(), "DerivativeSecurityDesc", 1279 } },
   { 1280, { Type2Type<TEX::DerivativeEncodedSecurityDescLen>(), "DerivativeEncodedSecurityDescLen", 1280 } },
   { 1281, { Type2Type<TEX::DerivativeEncodedSecurityDesc>(), "DerivativeEncodedSecurityDesc", 1281 } },
   { 1282, { Type2Type<TEX::DerivativeSecurityXMLLen>(), "DerivativeSecurityXMLLen", 1282 } },
   { 1283, { Type2Type<TEX::DerivativeSecurityXML>(), "DerivativeSecurityXML", 1283 } },
   { 1284, { Type2Type<TEX::DerivativeSecurityXMLSchema>(), "DerivativeSecurityXMLSchema", 1284 } },
   { 1285, { Type2Type<TEX::DerivativeContractSettlMonth>(), "DerivativeContractSettlMonth", 1285 } },
   { 1286, { Type2Type<TEX::NoDerivativeEvents>(), "NoDerivativeEvents", 1286 } },
   { 1287, { Type2Type<TEX::DerivativeEventType>(), "DerivativeEventType", 1287 } },
   { 1288, { Type2Type<TEX::DerivativeEventDate>(), "DerivativeEventDate", 1288 } },
   { 1289, { Type2Type<TEX::DerivativeEventTime>(), "DerivativeEventTime", 1289 } },
   { 1290, { Type2Type<TEX::DerivativeEventPx>(), "DerivativeEventPx", 1290 } },
   { 1291, { Type2Type<TEX::DerivativeEventText>(), "DerivativeEventText", 1291 } },
   { 1292, { Type2Type<TEX::NoDerivativeInstrumentParties>(), "NoDerivativeInstrumentParties", 1292 } },
   { 1293, { Type2Type<TEX::DerivativeInstrumentPartyID>(), "DerivativeInstrumentPartyID", 1293 } },
   { 1294, { Type2Type<TEX::DerivativeInstrumentPartyIDSource>(), "DerivativeInstrumentPartyIDSource", 1294 } },
   { 1295, { Type2Type<TEX::DerivativeInstrumentPartyRole>(), "DerivativeInstrumentPartyRole", 1295 } },
   { 1296, { Type2Type<TEX::NoDerivativeInstrumentPartySubIDs>(), "NoDerivativeInstrumentPartySubIDs", 1296 } },
   { 1297, { Type2Type<TEX::DerivativeInstrumentPartySubID>(), "DerivativeInstrumentPartySubID", 1297 } },
   { 1298, { Type2Type<TEX::DerivativeInstrumentPartySubIDType>(), "DerivativeInstrumentPartySubIDType", 1298 } },
   { 1299, { Type2Type<TEX::DerivativeExerciseStyle>(), "DerivativeExerciseStyle", 1299 } },
   { 1300, { Type2Type<TEX::MarketSegmentID>(), "MarketSegmentID", 1300 } },
   { 1301, { Type2Type<TEX::MarketID>(), "MarketID", 1301 } },
   { 1302, { Type2Type<TEX::MaturityMonthYearIncrementUnits, int>(), "MaturityMonthYearIncrementUnits", 1302, &TEX::realmbases[304] } },
   { 1303, { Type2Type<TEX::MaturityMonthYearFormat, int>(), "MaturityMonthYearFormat", 1303, &TEX::realmbases[305] } },
   { 1304, { Type2Type<TEX::StrikeExerciseStyle>(), "StrikeExerciseStyle", 1304 } },
   { 1305, { Type2Type<TEX::SecondaryPriceLimitType>(), "SecondaryPriceLimitType", 1305 } },
   { 1306, { Type2Type<TEX::PriceLimitType, int>(), "PriceLimitType", 1306, &TEX::realmbases[306] } },
   { 1308, { Type2Type<TEX::ExecInstValue>(), "ExecInstValue", 1308 } },
   { 1309, { Type2Type<TEX::NoTradingSessionRules>(), "NoTradingSessionRules", 1309 } },
   { 1310, { Type2Type<TEX::NoMarketSegments>(), "NoMarketSegments", 1310 } },
   { 1311, { Type2Type<TEX::NoDerivativeInstrAttrib>(), "NoDerivativeInstrAttrib", 1311 } },
   { 1312, { Type2Type<TEX::NoNestedInstrAttrib>(), "NoNestedInstrAttrib", 1312 } },
   { 1313, { Type2Type<TEX::DerivativeInstrAttribType>(), "DerivativeInstrAttribType", 1313 } },
   { 1314, { Type2Type<TEX::DerivativeInstrAttribValue>(), "DerivativeInstrAttribValue", 1314 } },
   { 1315, { Type2Type<TEX::DerivativePriceUnitOfMeasure>(), "DerivativePriceUnitOfMeasure", 1315 } },
   { 1316, { Type2Type<TEX::DerivativePriceUnitOfMeasureQty>(), "DerivativePriceUnitOfMeasureQty", 1316 } },
   { 1317, { Type2Type<TEX::DerivativeSettlMethod>(), "DerivativeSettlMethod", 1317 } },
   { 1318, { Type2Type<TEX::DerivativePriceQuoteMethod>(), "DerivativePriceQuoteMethod", 1318 } },
   { 1319, { Type2Type<TEX::DerivativeValuationMethod>(), "DerivativeValuationMethod", 1319 } },
   { 1320, { Type2Type<TEX::DerivativeListMethod>(), "DerivativeListMethod", 1320 } },
   { 1321, { Type2Type<TEX::DerivativeCapPrice>(), "DerivativeCapPrice", 1321 } },
   { 1322, { Type2Type<TEX::DerivativeFloorPrice>(), "DerivativeFloorPrice", 1322 } },
   { 1323, { Type2Type<TEX::DerivativePutOrCall>(), "DerivativePutOrCall", 1323 } },
   { 1324, { Type2Type<TEX::ListUpdateAction>(), "ListUpdateAction", 1324 } },
   { 1325, { Type2Type<TEX::ParentMktSegmID>(), "ParentMktSegmID", 1325 } },
   { 1326, { Type2Type<TEX::TradingSessionDesc>(), "TradingSessionDesc", 1326 } },
   { 1327, { Type2Type<TEX::TradSesUpdateAction>(), "TradSesUpdateAction", 1327 } },
   { 1328, { Type2Type<TEX::RejectText>(), "RejectText", 1328 } },
   { 1329, { Type2Type<TEX::FeeMultiplier>(), "FeeMultiplier", 1329 } },
   { 1330, { Type2Type<TEX::UnderlyingLegSymbol>(), "UnderlyingLegSymbol", 1330 } },
   { 1331, { Type2Type<TEX::UnderlyingLegSymbolSfx>(), "UnderlyingLegSymbolSfx", 1331 } },
   { 1332, { Type2Type<TEX::UnderlyingLegSecurityID>(), "UnderlyingLegSecurityID", 1332 } },
   { 1333, { Type2Type<TEX::UnderlyingLegSecurityIDSource>(), "UnderlyingLegSecurityIDSource", 1333 } },
   { 1334, { Type2Type<TEX::NoUnderlyingLegSecurityAltID>(), "NoUnderlyingLegSecurityAltID", 1334 } },
   { 1335, { Type2Type<TEX::UnderlyingLegSecurityAltID>(), "UnderlyingLegSecurityAltID", 1335 } },
   { 1336, { Type2Type<TEX::UnderlyingLegSecurityAltIDSource>(), "UnderlyingLegSecurityAltIDSource", 1336 } },
   { 1337, { Type2Type<TEX::UnderlyingLegSecurityType>(), "UnderlyingLegSecurityType", 1337 } },
   { 1338, { Type2Type<TEX::UnderlyingLegSecuritySubType>(), "UnderlyingLegSecuritySubType", 1338 } },
   { 1339, { Type2Type<TEX::UnderlyingLegMaturityMonthYear>(), "UnderlyingLegMaturityMonthYear", 1339 } },
   { 1340, { Type2Type<TEX::UnderlyingLegStrikePrice>(), "UnderlyingLegStrikePrice", 1340 } },
   { 1341, { Type2Type<TEX::UnderlyingLegSecurityExchange>(), "UnderlyingLegSecurityExchange", 1341 } },
   { 1342, { Type2Type<TEX::NoOfLegUnderlyings>(), "NoOfLegUnderlyings", 1342 } },
   { 1343, { Type2Type<TEX::UnderlyingLegPutOrCall>(), "UnderlyingLegPutOrCall", 1343 } },
   { 1344, { Type2Type<TEX::UnderlyingLegCFICode>(), "UnderlyingLegCFICode", 1344 } },
   { 1345, { Type2Type<TEX::UnderlyingLegMaturityDate>(), "UnderlyingLegMaturityDate", 1345 } },
   { 1346, { Type2Type<TEX::ApplReqID>(), "ApplReqID", 1346 } },
   { 1347, { Type2Type<TEX::ApplReqType, int>(), "ApplReqType", 1347, &TEX::realmbases[307] } },
   { 1348, { Type2Type<TEX::ApplResponseType, int>(), "ApplResponseType", 1348, &TEX::realmbases[308] } },
   { 1349, { Type2Type<TEX::ApplTotalMessageCount>(), "ApplTotalMessageCount", 1349 } },
   { 1350, { Type2Type<TEX::ApplLastSeqNum>(), "ApplLastSeqNum", 1350 } },
   { 1351, { Type2Type<TEX::NoApplIDs>(), "NoApplIDs", 1351 } },
   { 1352, { Type2Type<TEX::ApplResendFlag>(), "ApplResendFlag", 1352 } },
   { 1353, { Type2Type<TEX::ApplResponseID>(), "ApplResponseID", 1353 } },
   { 1354, { Type2Type<TEX::ApplResponseError, int>(), "ApplResponseError", 1354, &TEX::realmbases[309] } },
   { 1355, { Type2Type<TEX::RefApplID>(), "RefApplID", 1355 } },
   { 1356, { Type2Type<TEX::ApplReportID>(), "ApplReportID", 1356 } },
   { 1357, { Type2Type<TEX::RefApplLastSeqNum>(), "RefApplLastSeqNum", 1357 } },
   { 1358, { Type2Type<TEX::LegPutOrCall>(), "LegPutOrCall", 1358 } },
   { 1361, { Type2Type<TEX::TotNoFills>(), "TotNoFills", 1361 } },
   { 1362, { Type2Type<TEX::NoFills>(), "NoFills", 1362 } },
   { 1363, { Type2Type<TEX::FillExecID>(), "FillExecID", 1363 } },
   { 1364, { Type2Type<TEX::FillPx>(), "FillPx", 1364 } },
   { 1365, { Type2Type<TEX::FillQty>(), "FillQty", 1365 } },
   { 1366, { Type2Type<TEX::LegAllocID>(), "LegAllocID", 1366 } },
   { 1367, { Type2Type<TEX::LegAllocSettlCurrency>(), "LegAllocSettlCurrency", 1367 } },
   { 1368, { Type2Type<TEX::TradSesEvent, int>(), "TradSesEvent", 1368, &TEX::realmbases[310] } },
   { 1369, { Type2Type<TEX::MassActionReportID>(), "MassActionReportID", 1369 } },
   { 1370, { Type2Type<TEX::NoNotAffectedOrders>(), "NoNotAffectedOrders", 1370 } },
   { 1371, { Type2Type<TEX::NotAffectedOrderID>(), "NotAffectedOrderID", 1371 } },
   { 1372, { Type2Type<TEX::NotAffOrigClOrdID>(), "NotAffOrigClOrdID", 1372 } },
   { 1373, { Type2Type<TEX::MassActionType, int>(), "MassActionType", 1373, &TEX::realmbases[311] } },
   { 1374, { Type2Type<TEX::MassActionScope, int>(), "MassActionScope", 1374, &TEX::realmbases[312] } },
   { 1375, { Type2Type<TEX::MassActionResponse, int>(), "MassActionResponse", 1375, &TEX::realmbases[313] } },
   { 1376, { Type2Type<TEX::MassActionRejectReason, int>(), "MassActionRejectReason", 1376, &TEX::realmbases[314] } },
   { 1377, { Type2Type<TEX::MultilegModel, int>(), "MultilegModel", 1377, &TEX::realmbases[315] } },
   { 1378, { Type2Type<TEX::MultilegPriceMethod, int>(), "MultilegPriceMethod", 1378, &TEX::realmbases[316] } },
   { 1379, { Type2Type<TEX::LegVolatility>(), "LegVolatility", 1379 } },
   { 1380, { Type2Type<TEX::DividendYield>(), "DividendYield", 1380 } },
   { 1381, { Type2Type<TEX::LegDividendYield>(), "LegDividendYield", 1381 } },
   { 1382, { Type2Type<TEX::CurrencyRatio>(), "CurrencyRatio", 1382 } },
   { 1383, { Type2Type<TEX::LegCurrencyRatio>(), "LegCurrencyRatio", 1383 } },
   { 1384, { Type2Type<TEX::LegExecInst>(), "LegExecInst", 1384 } },
   { 1385, { Type2Type<TEX::ContingencyType, int>(), "ContingencyType", 1385, &TEX::realmbases[317] } },
   { 1386, { Type2Type<TEX::ListRejectReason, int>(), "ListRejectReason", 1386, &TEX::realmbases[318] } },
   { 1387, { Type2Type<TEX::NoTrdRepIndicators>(), "NoTrdRepIndicators", 1387 } },
   { 1388, { Type2Type<TEX::TrdRepPartyRole>(), "TrdRepPartyRole", 1388 } },
   { 1389, { Type2Type<TEX::TrdRepIndicator>(), "TrdRepIndicator", 1389 } },
   { 1390, { Type2Type<TEX::TradePublishIndicator, int>(), "TradePublishIndicator", 1390, &TEX::realmbases[319] } },
   { 1391, { Type2Type<TEX::UnderlyingLegOptAttribute>(), "UnderlyingLegOptAttribute", 1391 } },
   { 1392, { Type2Type<TEX::UnderlyingLegSecurityDesc>(), "UnderlyingLegSecurityDesc", 1392 } },
   { 1393, { Type2Type<TEX::MarketReqID>(), "MarketReqID", 1393 } },
   { 1394, { Type2Type<TEX::MarketReportID>(), "MarketReportID", 1394 } },
   { 1395, { Type2Type<TEX::MarketUpdateAction, char>(), "MarketUpdateAction", 1395, &TEX::realmbases[320] } },
   { 1396, { Type2Type<TEX::MarketSegmentDesc>(), "MarketSegmentDesc", 1396 } },
   { 1397, { Type2Type<TEX::EncodedMktSegmDescLen>(), "EncodedMktSegmDescLen", 1397 } },
   { 1398, { Type2Type<TEX::EncodedMktSegmDesc>(), "EncodedMktSegmDesc", 1398 } },
   { 1399, { Type2Type<TEX::ApplNewSeqNum>(), "ApplNewSeqNum", 1399 } },
   { 1400, { Type2Type<TEX::EncryptedPasswordMethod>(), "EncryptedPasswordMethod", 1400 } },
   { 1401, { Type2Type<TEX::EncryptedPasswordLen>(), "EncryptedPasswordLen", 1401 } },
   { 1402, { Type2Type<TEX::EncryptedPassword>(), "EncryptedPassword", 1402 } },
   { 1403, { Type2Type<TEX::EncryptedNewPasswordLen>(), "EncryptedNewPasswordLen", 1403 } },
   { 1404, { Type2Type<TEX::EncryptedNewPassword>(), "EncryptedNewPassword", 1404 } },
   { 1405, { Type2Type<TEX::UnderlyingLegMaturityTime>(), "UnderlyingLegMaturityTime", 1405 } },
   { 1406, { Type2Type<TEX::RefApplExtID>(), "RefApplExtID", 1406 } },
   { 1411, { Type2Type<TEX::Nested4PartySubIDType>(), "Nested4PartySubIDType", 1411 } },
   { 1412, { Type2Type<TEX::Nested4PartySubID>(), "Nested4PartySubID", 1412 } },
   { 1413, { Type2Type<TEX::NoNested4PartySubIDs>(), "NoNested4PartySubIDs", 1413 } },
   { 1414, { Type2Type<TEX::NoNested4PartyIDs>(), "NoNested4PartyIDs", 1414 } },
   { 1415, { Type2Type<TEX::Nested4PartyID>(), "Nested4PartyID", 1415 } },
   { 1416, { Type2Type<TEX::Nested4PartyIDSource>(), "Nested4PartyIDSource", 1416 } },
   { 1417, { Type2Type<TEX::Nested4PartyRole>(), "Nested4PartyRole", 1417 } },
   { 1418, { Type2Type<TEX::LegLastQty>(), "LegLastQty", 1418 } },
   { 1419, { Type2Type<TEX::UnderlyingExerciseStyle>(), "UnderlyingExerciseStyle", 1419 } },
   { 1420, { Type2Type<TEX::LegExerciseStyle>(), "LegExerciseStyle", 1420 } },
   { 1421, { Type2Type<TEX::LegPriceUnitOfMeasure>(), "LegPriceUnitOfMeasure", 1421 } },
   { 1422, { Type2Type<TEX::LegPriceUnitOfMeasureQty>(), "LegPriceUnitOfMeasureQty", 1422 } },
   { 1423, { Type2Type<TEX::UnderlyingUnitOfMeasureQty>(), "UnderlyingUnitOfMeasureQty", 1423 } },
   { 1424, { Type2Type<TEX::UnderlyingPriceUnitOfMeasure>(), "UnderlyingPriceUnitOfMeasure", 1424 } },
   { 1425, { Type2Type<TEX::UnderlyingPriceUnitOfMeasureQty>(), "UnderlyingPriceUnitOfMeasureQty", 1425 } },
   { 1426, { Type2Type<TEX::ApplReportType, int>(), "ApplReportType", 1426, &TEX::realmbases[321] } },
   { 1427, { Type2Type<TEX::SideExecID>(), "SideExecID", 1427 } },
   { 1428, { Type2Type<TEX::OrderDelay>(), "OrderDelay", 1428 } },
   { 1429, { Type2Type<TEX::OrderDelayUnit, int>(), "OrderDelayUnit", 1429, &TEX::realmbases[322] } },
   { 1430, { Type2Type<TEX::VenueType, char>(), "VenueType", 1430, &TEX::realmbases[323] } },
   { 1431, { Type2Type<TEX::RefOrdIDReason, int>(), "RefOrdIDReason", 1431, &TEX::realmbases[324] } },
   { 1432, { Type2Type<TEX::OrigCustOrderCapacity, int>(), "OrigCustOrderCapacity", 1432, &TEX::realmbases[325] } },
   { 1433, { Type2Type<TEX::RefApplReqID>(), "RefApplReqID", 1433 } },
   { 1434, { Type2Type<TEX::ModelType, int>(), "ModelType", 1434, &TEX::realmbases[326] } },
   { 1435, { Type2Type<TEX::ContractMultiplierUnit, int>(), "ContractMultiplierUnit", 1435, &TEX::realmbases[327] } },
   { 1436, { Type2Type<TEX::LegContractMultiplierUnit>(), "LegContractMultiplierUnit", 1436 } },
   { 1437, { Type2Type<TEX::UnderlyingContractMultiplierUnit>(), "UnderlyingContractMultiplierUnit", 1437 } },
   { 1438, { Type2Type<TEX::DerivativeContractMultiplierUnit>(), "DerivativeContractMultiplierUnit", 1438 } },
   { 1439, { Type2Type<TEX::FlowScheduleType, int>(), "FlowScheduleType", 1439, &TEX::realmbases[328] } },
   { 1440, { Type2Type<TEX::LegFlowScheduleType>(), "LegFlowScheduleType", 1440 } },
   { 1441, { Type2Type<TEX::UnderlyingFlowScheduleType>(), "UnderlyingFlowScheduleType", 1441 } },
   { 1442, { Type2Type<TEX::DerivativeFlowScheduleType>(), "DerivativeFlowScheduleType", 1442 } },
   { 1443, { Type2Type<TEX::FillLiquidityInd>(), "FillLiquidityInd", 1443 } },
   { 1444, { Type2Type<TEX::SideLiquidityInd>(), "SideLiquidityInd", 1444 } },
   { 1445, { Type2Type<TEX::NoRateSources>(), "NoRateSources", 1445 } },
   { 1446, { Type2Type<TEX::RateSource, int>(), "RateSource", 1446, &TEX::realmbases[329] } },
   { 1447, { Type2Type<TEX::RateSourceType, int>(), "RateSourceType", 1447, &TEX::realmbases[330] } },
   { 1448, { Type2Type<TEX::ReferencePage>(), "ReferencePage", 1448 } },
   { 1449, { Type2Type<TEX::RestructuringType, f8String>(), "RestructuringType", 1449, &TEX::realmbases[331] } },
   { 1450, { Type2Type<TEX::Seniority, f8String>(), "Seniority", 1450, &TEX::realmbases[332] } },
   { 1451, { Type2Type<TEX::NotionalPercentageOutstanding>(), "NotionalPercentageOutstanding", 1451 } },
   { 1452, { Type2Type<TEX::OriginalNotionalPercentageOutstanding>(), "OriginalNotionalPercentageOutstanding", 1452 } },
   { 1453, { Type2Type<TEX::UnderlyingRestructuringType>(), "UnderlyingRestructuringType", 1453 } },
   { 1454, { Type2Type<TEX::UnderlyingSeniority>(), "UnderlyingSeniority", 1454 } },
   { 1455, { Type2Type<TEX::UnderlyingNotionalPercentageOutstanding>(), "UnderlyingNotionalPercentageOutstanding", 1455 } },
   { 1456, { Type2Type<TEX::UnderlyingOriginalNotionalPercentageOutstanding>(), "UnderlyingOriginalNotionalPercentageOutstanding", 1456 } },
   { 1457, { Type2Type<TEX::AttachmentPoint>(), "AttachmentPoint", 1457 } },
   { 1458, { Type2Type<TEX::DetachmentPoint>(), "DetachmentPoint", 1458 } },
   { 1459, { Type2Type<TEX::UnderlyingAttachmentPoint>(), "UnderlyingAttachmentPoint", 1459 } },
   { 1460, { Type2Type<TEX::UnderlyingDetachmentPoint>(), "UnderlyingDetachmentPoint", 1460 } },
   { 1461, { Type2Type<TEX::NoTargetPartyIDs>(), "NoTargetPartyIDs", 1461 } },
   { 1462, { Type2Type<TEX::TargetPartyID>(), "TargetPartyID", 1462 } },
   { 1463, { Type2Type<TEX::TargetPartyIDSource>(), "TargetPartyIDSource", 1463 } },
   { 1464, { Type2Type<TEX::TargetPartyRole>(), "TargetPartyRole", 1464 } },
   { 1465, { Type2Type<TEX::SecurityListID>(), "SecurityListID", 1465 } },
   { 1466, { Type2Type<TEX::SecurityListRefID>(), "SecurityListRefID", 1466 } },
   { 1467, { Type2Type<TEX::SecurityListDesc>(), "SecurityListDesc", 1467 } },
   { 1468, { Type2Type<TEX::EncodedSecurityListDescLen>(), "EncodedSecurityListDescLen", 1468 } },
   { 1469, { Type2Type<TEX::EncodedSecurityListDesc>(), "EncodedSecurityListDesc", 1469 } },
   { 1470, { Type2Type<TEX::SecurityListType, int>(), "SecurityListType", 1470, &TEX::realmbases[333] } },
   { 1471, { Type2Type<TEX::SecurityListTypeSource, int>(), "SecurityListTypeSource", 1471, &TEX::realmbases[334] } },
   { 1472, { Type2Type<TEX::NewsID>(), "NewsID", 1472 } },
   { 1473, { Type2Type<TEX::NewsCategory, int>(), "NewsCategory", 1473, &TEX::realmbases[335] } },
   { 1474, { Type2Type<TEX::LanguageCode>(), "LanguageCode", 1474 } },
   { 1475, { Type2Type<TEX::NoNewsRefIDs>(), "NoNewsRefIDs", 1475 } },
   { 1476, { Type2Type<TEX::NewsRefID>(), "NewsRefID", 1476 } },
   { 1477, { Type2Type<TEX::NewsRefType, int>(), "NewsRefType", 1477, &TEX::realmbases[336] } },
   { 1478, { Type2Type<TEX::StrikePriceDeterminationMethod, int>(), "StrikePriceDeterminationMethod", 1478, &TEX::realmbases[337] } },
   { 1479, { Type2Type<TEX::StrikePriceBoundaryMethod, int>(), "StrikePriceBoundaryMethod", 1479, &TEX::realmbases[338] } },
   { 1480, { Type2Type<TEX::StrikePriceBoundaryPrecision>(), "StrikePriceBoundaryPrecision", 1480 } },
   { 1481, { Type2Type<TEX::UnderlyingPriceDeterminationMethod, int>(), "UnderlyingPriceDeterminationMethod", 1481, &TEX::realmbases[339] } },
   { 1482, { Type2Type<TEX::OptPayoutType, int>(), "OptPayoutType", 1482, &TEX::realmbases[340] } },
   { 1483, { Type2Type<TEX::NoComplexEvents>(), "NoComplexEvents", 1483 } },
   { 1484, { Type2Type<TEX::ComplexEventType, int>(), "ComplexEventType", 1484, &TEX::realmbases[341] } },
   { 1485, { Type2Type<TEX::ComplexOptPayoutAmount>(), "ComplexOptPayoutAmount", 1485 } },
   { 1486, { Type2Type<TEX::ComplexEventPrice>(), "ComplexEventPrice", 1486 } },
   { 1487, { Type2Type<TEX::ComplexEventPriceBoundaryMethod, int>(), "ComplexEventPriceBoundaryMethod", 1487, &TEX::realmbases[342] } },
   { 1488, { Type2Type<TEX::ComplexEventPriceBoundaryPrecision>(), "ComplexEventPriceBoundaryPrecision", 1488 } },
   { 1489, { Type2Type<TEX::ComplexEventPriceTimeType, int>(), "ComplexEventPriceTimeType", 1489, &TEX::realmbases[343] } },
   { 1490, { Type2Type<TEX::ComplexEventCondition, int>(), "ComplexEventCondition", 1490, &TEX::realmbases[344] } },
   { 1491, { Type2Type<TEX::NoComplexEventDates>(), "NoComplexEventDates", 1491 } },
   { 1492, { Type2Type<TEX::ComplexEventStartDate>(), "ComplexEventStartDate", 1492 } },
   { 1493, { Type2Type<TEX::ComplexEventEndDate>(), "ComplexEventEndDate", 1493 } },
   { 1494, { Type2Type<TEX::NoComplexEventTimes>(), "NoComplexEventTimes", 1494 } },
   { 1495, { Type2Type<TEX::ComplexEventStartTime>(), "ComplexEventStartTime", 1495 } },
   { 1496, { Type2Type<TEX::ComplexEventEndTime>(), "ComplexEventEndTime", 1496 } },
   { 1497, { Type2Type<TEX::StreamAsgnReqID>(), "StreamAsgnReqID", 1497 } },
   { 1498, { Type2Type<TEX::StreamAsgnReqType, int>(), "StreamAsgnReqType", 1498, &TEX::realmbases[345] } },
   { 1499, { Type2Type<TEX::NoAsgnReqs>(), "NoAsgnReqs", 1499 } },
   { 1500, { Type2Type<TEX::MDStreamID>(), "MDStreamID", 1500 } },
   { 1501, { Type2Type<TEX::StreamAsgnRptID>(), "StreamAsgnRptID", 1501 } },
   { 1502, { Type2Type<TEX::StreamAsgnRejReason, int>(), "StreamAsgnRejReason", 1502, &TEX::realmbases[346] } },
   { 1503, { Type2Type<TEX::StreamAsgnAckType, int>(), "StreamAsgnAckType", 1503, &TEX::realmbases[347] } },
   { 1504, { Type2Type<TEX::RelSymTransactTime>(), "RelSymTransactTime", 1504 } },
   { 1505, { Type2Type<TEX::PartyDetailsListRequestID>(), "PartyDetailsListRequestID", 1505 } },
   { 1506, { Type2Type<TEX::NoPartyListResponseTypes>(), "NoPartyListResponseTypes", 1506 } },
   { 1507, { Type2Type<TEX::PartyListResponseType, int>(), "PartyListResponseType", 1507, &TEX::realmbases[348] } },
   { 1508, { Type2Type<TEX::NoRequestedPartyRoles>(), "NoRequestedPartyRoles", 1508 } },
   { 1509, { Type2Type<TEX::RequestedPartyRole>(), "RequestedPartyRole", 1509 } },
   { 1510, { Type2Type<TEX::PartyDetailsListReportID>(), "PartyDetailsListReportID", 1510 } },
   { 1511, { Type2Type<TEX::PartyDetailsRequestResult, int>(), "PartyDetailsRequestResult", 1511, &TEX::realmbases[349] } },
   { 1512, { Type2Type<TEX::TotNoPartyList>(), "TotNoPartyList", 1512 } },
   { 1513, { Type2Type<TEX::NoPartyList>(), "NoPartyList", 1513 } },
   { 1514, { Type2Type<TEX::NoPartyRelationships>(), "NoPartyRelationships", 1514 } },
   { 1515, { Type2Type<TEX::PartyRelationship, int>(), "PartyRelationship", 1515, &TEX::realmbases[350] } },
   { 1516, { Type2Type<TEX::NoPartyAltIDs>(), "NoPartyAltIDs", 1516 } },
   { 1517, { Type2Type<TEX::PartyAltID>(), "PartyAltID", 1517 } },
   { 1518, { Type2Type<TEX::PartyAltIDSource>(), "PartyAltIDSource", 1518 } },
   { 1519, { Type2Type<TEX::NoPartyAltSubIDs>(), "NoPartyAltSubIDs", 1519 } },
   { 1520, { Type2Type<TEX::PartyAltSubID>(), "PartyAltSubID", 1520 } },
   { 1521, { Type2Type<TEX::PartyAltSubIDType>(), "PartyAltSubIDType", 1521 } },
   { 1522, { Type2Type<TEX::NoContextPartyIDs>(), "NoContextPartyIDs", 1522 } },
   { 1523, { Type2Type<TEX::ContextPartyID>(), "ContextPartyID", 1523 } },
   { 1524, { Type2Type<TEX::ContextPartyIDSource>(), "ContextPartyIDSource", 1524 } },
   { 1525, { Type2Type<TEX::ContextPartyRole>(), "ContextPartyRole", 1525 } },
   { 1526, { Type2Type<TEX::NoContextPartySubIDs>(), "NoContextPartySubIDs", 1526 } },
   { 1527, { Type2Type<TEX::ContextPartySubID>(), "ContextPartySubID", 1527 } },
   { 1528, { Type2Type<TEX::ContextPartySubIDType>(), "ContextPartySubIDType", 1528 } },
   { 1529, { Type2Type<TEX::NoRiskLimits>(), "NoRiskLimits", 1529 } },
   { 1530, { Type2Type<TEX::RiskLimitType, int>(), "RiskLimitType", 1530, &TEX::realmbases[351] } },
   { 1531, { Type2Type<TEX::RiskLimitAmount>(), "RiskLimitAmount", 1531 } },
   { 1532, { Type2Type<TEX::RiskLimitCurrency>(), "RiskLimitCurrency", 1532 } },
   { 1533, { Type2Type<TEX::RiskLimitPlatform>(), "RiskLimitPlatform", 1533 } },
   { 1534, { Type2Type<TEX::NoRiskInstruments>(), "NoRiskInstruments", 1534 } },
   { 1535, { Type2Type<TEX::RiskInstrumentOperator, int>(), "RiskInstrumentOperator", 1535, &TEX::realmbases[352] } },
   { 1536, { Type2Type<TEX::RiskSymbol>(), "RiskSymbol", 1536 } },
   { 1537, { Type2Type<TEX::RiskSymbolSfx>(), "RiskSymbolSfx", 1537 } },
   { 1538, { Type2Type<TEX::RiskSecurityID>(), "RiskSecurityID", 1538 } },
   { 1539, { Type2Type<TEX::RiskSecurityIDSource>(), "RiskSecurityIDSource", 1539 } },
   { 1540, { Type2Type<TEX::NoRiskSecurityAltID>(), "NoRiskSecurityAltID", 1540 } },
   { 1541, { Type2Type<TEX::RiskSecurityAltID>(), "RiskSecurityAltID", 1541 } },
   { 1542, { Type2Type<TEX::RiskSecurityAltIDSource>(), "RiskSecurityAltIDSource", 1542 } },
   { 1543, { Type2Type<TEX::RiskProduct>(), "RiskProduct", 1543 } },
   { 1544, { Type2Type<TEX::RiskProductComplex>(), "RiskProductComplex", 1544 } },
   { 1545, { Type2Type<TEX::RiskSecurityGroup>(), "RiskSecurityGroup", 1545 } },
   { 1546, { Type2Type<TEX::RiskCFICode>(), "RiskCFICode", 1546 } },
   { 1547, { Type2Type<TEX::RiskSecurityType>(), "RiskSecurityType", 1547 } },
   { 1548, { Type2Type<TEX::RiskSecuritySubType>(), "RiskSecuritySubType", 1548 } },
   { 1549, { Type2Type<TEX::RiskMaturityMonthYear>(), "RiskMaturityMonthYear", 1549 } },
   { 1550, { Type2Type<TEX::RiskMaturityTime>(), "RiskMaturityTime", 1550 } },
   { 1551, { Type2Type<TEX::RiskRestructuringType>(), "RiskRestructuringType", 1551 } },
   { 1552, { Type2Type<TEX::RiskSeniority>(), "RiskSeniority", 1552 } },
   { 1553, { Type2Type<TEX::RiskPutOrCall>(), "RiskPutOrCall", 1553 } },
   { 1554, { Type2Type<TEX::RiskFlexibleIndicator>(), "RiskFlexibleIndicator", 1554 } },
   { 1555, { Type2Type<TEX::RiskCouponRate>(), "RiskCouponRate", 1555 } },
   { 1556, { Type2Type<TEX::RiskSecurityDesc>(), "RiskSecurityDesc", 1556 } },
   { 1557, { Type2Type<TEX::RiskInstrumentSettlType>(), "RiskInstrumentSettlType", 1557 } },
   { 1558, { Type2Type<TEX::RiskInstrumentMultiplier>(), "RiskInstrumentMultiplier", 1558 } },
   { 1559, { Type2Type<TEX::NoRiskWarningLevels>(), "NoRiskWarningLevels", 1559 } },
   { 1560, { Type2Type<TEX::RiskWarningLevelPercent>(), "RiskWarningLevelPercent", 1560 } },
   { 1561, { Type2Type<TEX::RiskWarningLevelName>(), "RiskWarningLevelName", 1561 } },
   { 1562, { Type2Type<TEX::NoRelatedPartyIDs>(), "NoRelatedPartyIDs", 1562 } },
   { 1563, { Type2Type<TEX::RelatedPartyID>(), "RelatedPartyID", 1563 } },
   { 1564, { Type2Type<TEX::RelatedPartyIDSource>(), "RelatedPartyIDSource", 1564 } },
   { 1565, { Type2Type<TEX::RelatedPartyRole>(), "RelatedPartyRole", 1565 } },
   { 1566, { Type2Type<TEX::NoRelatedPartySubIDs>(), "NoRelatedPartySubIDs", 1566 } },
   { 1567, { Type2Type<TEX::RelatedPartySubID>(), "RelatedPartySubID", 1567 } },
   { 1568, { Type2Type<TEX::RelatedPartySubIDType>(), "RelatedPartySubIDType", 1568 } },
   { 1569, { Type2Type<TEX::NoRelatedPartyAltIDs>(), "NoRelatedPartyAltIDs", 1569 } },
   { 1570, { Type2Type<TEX::RelatedPartyAltID>(), "RelatedPartyAltID", 1570 } },
   { 1571, { Type2Type<TEX::RelatedPartyAltIDSource>(), "RelatedPartyAltIDSource", 1571 } },
   { 1572, { Type2Type<TEX::NoRelatedPartyAltSubIDs>(), "NoRelatedPartyAltSubIDs", 1572 } },
   { 1573, { Type2Type<TEX::RelatedPartyAltSubID>(), "RelatedPartyAltSubID", 1573 } },
   { 1574, { Type2Type<TEX::RelatedPartyAltSubIDType>(), "RelatedPartyAltSubIDType", 1574 } },
   { 1575, { Type2Type<TEX::NoRelatedContextPartyIDs>(), "NoRelatedContextPartyIDs", 1575 } },
   { 1576, { Type2Type<TEX::RelatedContextPartyID>(), "RelatedContextPartyID", 1576 } },
   { 1577, { Type2Type<TEX::RelatedContextPartyIDSource>(), "RelatedContextPartyIDSource", 1577 } },
   { 1578, { Type2Type<TEX::RelatedContextPartyRole>(), "RelatedContextPartyRole", 1578 } },
   { 1579, { Type2Type<TEX::NoRelatedContextPartySubIDs>(), "NoRelatedContextPartySubIDs", 1579 } },
   { 1580, { Type2Type<TEX::RelatedContextPartySubID>(), "RelatedContextPartySubID", 1580 } },
   { 1581, { Type2Type<TEX::RelatedContextPartySubIDType>(), "RelatedContextPartySubIDType", 1581 } },
   { 1582, { Type2Type<TEX::NoRelationshipRiskLimits>(), "NoRelationshipRiskLimits", 1582 } },
   { 1583, { Type2Type<TEX::RelationshipRiskLimitType>(), "RelationshipRiskLimitType", 1583 } },
   { 1584, { Type2Type<TEX::RelationshipRiskLimitAmount>(), "RelationshipRiskLimitAmount", 1584 } },
   { 1585, { Type2Type<TEX::RelationshipRiskLimitCurrency>(), "RelationshipRiskLimitCurrency", 1585 } },
   { 1586, { Type2Type<TEX::RelationshipRiskLimitPlatform>(), "RelationshipRiskLimitPlatform", 1586 } },
   { 1587, { Type2Type<TEX::NoRelationshipRiskInstruments>(), "NoRelationshipRiskInstruments", 1587 } },
   { 1588, { Type2Type<TEX::RelationshipRiskInstrumentOperator>(), "RelationshipRiskInstrumentOperator", 1588 } },
   { 1589, { Type2Type<TEX::RelationshipRiskSymbol>(), "RelationshipRiskSymbol", 1589 } },
   { 1590, { Type2Type<TEX::RelationshipRiskSymbolSfx>(), "RelationshipRiskSymbolSfx", 1590 } },
   { 1591, { Type2Type<TEX::RelationshipRiskSecurityID>(), "RelationshipRiskSecurityID", 1591 } },
   { 1592, { Type2Type<TEX::RelationshipRiskSecurityIDSource>(), "RelationshipRiskSecurityIDSource", 1592 } },
   { 1593, { Type2Type<TEX::NoRelationshipRiskSecurityAltID>(), "NoRelationshipRiskSecurityAltID", 1593 } },
   { 1594, { Type2Type<TEX::RelationshipRiskSecurityAltID>(), "RelationshipRiskSecurityAltID", 1594 } },
   { 1595, { Type2Type<TEX::RelationshipRiskSecurityAltIDSource>(), "RelationshipRiskSecurityAltIDSource", 1595 } },
   { 1596, { Type2Type<TEX::RelationshipRiskProduct>(), "RelationshipRiskProduct", 1596 } },
   { 1597, { Type2Type<TEX::RelationshipRiskProductComplex>(), "RelationshipRiskProductComplex", 1597 } },
   { 1598, { Type2Type<TEX::RelationshipRiskSecurityGroup>(), "RelationshipRiskSecurityGroup", 1598 } },
   { 1599, { Type2Type<TEX::RelationshipRiskCFICode>(), "RelationshipRiskCFICode", 1599 } },
   { 1600, { Type2Type<TEX::RelationshipRiskSecurityType>(), "RelationshipRiskSecurityType", 1600 } },
   { 1601, { Type2Type<TEX::RelationshipRiskSecuritySubType>(), "RelationshipRiskSecuritySubType", 1601 } },
   { 1602, { Type2Type<TEX::RelationshipRiskMaturityMonthYear>(), "RelationshipRiskMaturityMonthYear", 1602 } },
   { 1603, { Type2Type<TEX::RelationshipRiskMaturityTime>(), "RelationshipRiskMaturityTime", 1603 } },
   { 1604, { Type2Type<TEX::RelationshipRiskRestructuringType>(), "RelationshipRiskRestructuringType", 1604 } },
   { 1605, { Type2Type<TEX::RelationshipRiskSeniority>(), "RelationshipRiskSeniority", 1605 } },
   { 1606, { Type2Type<TEX::RelationshipRiskPutOrCall>(), "RelationshipRiskPutOrCall", 1606 } },
   { 1607, { Type2Type<TEX::RelationshipRiskFlexibleIndicator>(), "RelationshipRiskFlexibleIndicator", 1607 } },
   { 1608, { Type2Type<TEX::RelationshipRiskCouponRate>(), "RelationshipRiskCouponRate", 1608 } },
   { 1609, { Type2Type<TEX::RelationshipRiskSecurityExchange>(), "RelationshipRiskSecurityExchange", 1609 } },
   { 1610, { Type2Type<TEX::RelationshipRiskSecurityDesc>(), "RelationshipRiskSecurityDesc", 1610 } },
   { 1611, { Type2Type<TEX::RelationshipRiskInstrumentSettlType>(), "RelationshipRiskInstrumentSettlType", 1611 } },
   { 1612, { Type2Type<TEX::RelationshipRiskInstrumentMultiplier>(), "RelationshipRiskInstrumentMultiplier", 1612 } },
   { 1613, { Type2Type<TEX::NoRelationshipRiskWarningLevels>(), "NoRelationshipRiskWarningLevels", 1613 } },
   { 1614, { Type2Type<TEX::RelationshipRiskWarningLevelPercent>(), "RelationshipRiskWarningLevelPercent", 1614 } },
   { 1615, { Type2Type<TEX::RelationshipRiskWarningLevelName>(), "RelationshipRiskWarningLevelName", 1615 } },
   { 1616, { Type2Type<TEX::RiskSecurityExchange>(), "RiskSecurityExchange", 1616 } },
   { 1617, { Type2Type<TEX::StreamAsgnType, int>(), "StreamAsgnType", 1617, &TEX::realmbases[353] } },
   { 1618, { Type2Type<TEX::RelationshipRiskEncodedSecurityDescLen>(), "RelationshipRiskEncodedSecurityDescLen", 1618 } },
   { 1619, { Type2Type<TEX::RelationshipRiskEncodedSecurityDesc>(), "RelationshipRiskEncodedSecurityDesc", 1619 } },
   { 1620, { Type2Type<TEX::RiskEncodedSecurityDescLen>(), "RiskEncodedSecurityDescLen", 1620 } },
   { 1621, { Type2Type<TEX::RiskEncodedSecurityDesc>(), "RiskEncodedSecurityDesc", 1621 } }
}; // 1562
} // namespace TEX

} // namespace FIX8
